&НаКлиенте
Перем КлючеваяОперация;

&НаКлиенте
Перем ВремяНачалаОперации;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначения.ПриСозданииФормыНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
	
	СтруктураОтбора = Неопределено;
	Если Параметры.Свойство("Отбор", СтруктураОтбора) И ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
		СтруктураОтбора.Свойство("Организация",       ОтборОрганизация);
		СтруктураОтбора.Свойство("БанковскийСчет",    ОтборБанковскийСчет);
		СтруктураОтбора.Свойство("ДатаОтбора",        ОтборДатаОтбора);
		СтруктураОтбора.Свойство("Контрагент",        ОтборКонтрагент);
		СтруктураОтбора.Свойство("НазначениеПлатежа", ОтборНазначениеПлатежа);
	КонецЕсли;
	
	ИтогиВключены = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЖурналБанковскиеВыписки", "ИтогиВключены", Истина);
	
	Если ИтогиВключены Тогда
		Элементы.ГруппаСтраницыИтогов.ТекущаяСтраница = Элементы.ГруппаСтраницаИтоги;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СформироватьПараметрыИтогов(ЭтотОбъект));
	Иначе
		Элементы.ГруппаСтраницыИтогов.ТекущаяСтраница = Элементы.ГруппаСтраницаБезИтогов;
	КонецЕсли;
	
	// Уведомим о появлении нового функционала
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("БыстроеОсвоениеБанк");
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтотОбъект, Элементы.ИнформационныеСсылки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КлючеваяОперация = "ОтборПоОрганизациямВЖурналеВыпискиПоБанку";
	ВремяНачалаОперации = Неопределено;
	
	УстановитьВосстановленныеОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ЖурналБанковскиеВыписки", "ИтогиВключены", ИтогиВключены);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОтборОрганизация = Параметр;
		ОтборОрганизациячетИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
		
		УстановитьСчетОрганизации(ОтборБанковскийСчет, ОтборОрганизация);
		
		ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
		
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Истина;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеВыписки" Тогда
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Истина;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

&НаСервере
Процедура УстановитьВосстановленныеОтборы()
	
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(ОсновнаяОрганизация) И ОсновнаяОрганизация <> ОтборОрганизация Тогда
		ОтборОрганизация                 = ОсновнаяОрганизация;
		УстановитьСчетОрганизации(ОтборБанковскийСчет, ОтборОрганизация);
		ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
		ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДатаОтбора");
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "НазначениеПлатежа", ВидСравненияКомпоновкиДанных.Содержит);
	
КонецПроцедуры

&НаКлиенте
// Обновление сумм остатков и оборотов за день в форме журнала
//
Процедура ОбновитьИтоги()
	
	Если НЕ ИтогиВключены Тогда
		ВсегдаОбновлять = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ТекОрганизация    = ?(ОтборОрганизацияИспользование,    ОтборОрганизация,    Неопределено);
		ТекБанковскийСчет = ?(ОтборБанковскийСчетИспользование, ОтборБанковскийСчет, Неопределено);
		Если ОтборДатаОтбора = '00010101' ИЛИ НЕ ОтборДатаОтбораИспользование Тогда
			ТекДата       = ТекущаяДата();
		Иначе
			ТекДата       = ОтборДатаОтбора;
		КонецЕсли;
	ИначеЕсли НЕ ТекДанные.Свойство("Ссылка") Тогда
		ВсегдаОбновлять = Ложь;
		Возврат;
	Иначе
		ТекДата           = ТекДанные.Дата;
		ТекОрганизация    = ТекДанные.Организация;
		ТекБанковскийСчет = ТекДанные.БанковскийСчет;
	КонецЕсли;
	
	Если ВсегдаОбновлять ИЛИ НачалоДня(ИтогиДата) <> НачалоДня(ТекДата) ИЛИ ИтогиБанковскийСчет  <> ТекБанковскийСчет Тогда
		СтруктураПараметров = Новый Структура("ТекДата, ТекОрганизация, ТекБанковскийСчет",
			ТекДата, ТекОрганизация, ТекБанковскийСчет);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СформироватьПараметрыИтогов(ЭтотОбъект, СтруктураПараметров));
	КонецЕсли;
	
	ВсегдаОбновлять = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	Если ВремяНачалаОперации <> Неопределено Тогда
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(
			КлючеваяОперация,
			ВремяНачалаОперации);
		ВремяНачалаОперации = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеТаймера()
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		Возврат ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПараметрыИтогов(Форма, СтруктураПараметров = Неопределено)
	
	Если СтруктураПараметров = Неопределено Тогда
		ТекОрганизация    = ?(Форма.ОтборОрганизацияИспользование,    Форма.ОтборОрганизация,    Неопределено);
		ТекБанковскийСчет = ?(Форма.ОтборБанковскийСчетИспользование, Форма.ОтборБанковскийСчет, Неопределено);
		Если Форма.ОтборДатаОтбора = '00010101' ИЛИ НЕ Форма.ОтборДатаОтбораИспользование Тогда
			ТекДата = ТекущаяДата();
		Иначе
			ТекДата = Форма.ОтборДатаОтбора;
		КонецЕсли;
	Иначе
		ТекДата           = СтруктураПараметров.ТекДата;
		ТекОрганизация    = СтруктураПараметров.ТекОрганизация;
		ТекБанковскийСчет = СтруктураПараметров.ТекБанковскийСчет;
	КонецЕсли;
	
	СтруктураИтогов = ПолучитьИтоги(ТекДата, ТекОрганизация, ТекБанковскийСчет);
	
	Возврат Новый Структура(
		"ИтогиБанковскийСчет, ИтогиНаименованиеСчета, ИтогиДата, ДатаИтогов, ИтогиНаНачалоДня, ИтогиНаКонецДня,
		|ИтогиПоступило, ИтогиСписано, ВсегоПоступилоПеремещения, ВсегоСписаноПеремещения",
			ТекБанковскийСчет, СтруктураИтогов.НаименованиеСчета,
			ТекДата, Формат(ТекДата, "ДФ=dd.MM.yyyy"),
			СтруктураИтогов.НачальныйОстаток,
			СтруктураИтогов.КонечныйОстаток,
			СтруктураИтогов.ВсегоПоступило,
			СтруктураИтогов.ВсегоСписано,
			СтруктураИтогов.ПеремещениеВсегоПоступило,
			СтруктураИтогов.ПеремещениеВсегоСписано);
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает таблицу сумм остатков и оборотов за указанный день по указанному счету
//
Функция ПолучитьИтоги(Знач ТекДата, Знач ТекОрганизация, Знач ТекБанковскийСчет)
	
	СтруктураРезультат = Новый Структура("НаименованиеСчета,
		|НачальныйОстаток, ВсегоПоступило, ВсегоСписано, КонечныйОстаток, ПеремещениеВсегоПоступило, ПеремещениеВсегоСписано"
		, ""
		, 0, 0, 0, 0, 0, 0);
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	// Если нет доступных организаций, то Итоги не вычисляем
	Если СписокДоступныхОрганизаций.Количество() = 0 Тогда
		Возврат СтруктураРезультат;
	ИначеЕсли ЗначениеЗаполнено(ТекОрганизация) Тогда
		// Если организация не числится в списке доступных, то Итоги не вычисляем
		Если СписокДоступныхОрганизаций.Найти(ТекОрганизация) = Неопределено Тогда
			Возврат СтруктураРезультат;
		КонецЕсли;
	КонецЕсли;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ВТ_БИ.ЭтоВалютныйСчет
	|					ТОГДА ВТ_БИ.ВалютнаяСуммаНачальныйОстаток
	|				ИНАЧЕ ВТ_БИ.СуммаНачальныйОстаток
	|			КОНЕЦ), 0) КАК НачальныйОстаток,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ВТ_БИ.ЭтоВалютныйСчет
	|					ТОГДА ВТ_БИ.ВалютнаяСуммаОборотДт
	|				ИНАЧЕ ВТ_БИ.СуммаОборотДт
	|			КОНЕЦ), 0) КАК ВсегоПоступило,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ВТ_БИ.ЭтоВалютныйСчет
	|					ТОГДА ВТ_БИ.ВалютнаяСуммаОборотКт
	|				ИНАЧЕ ВТ_БИ.СуммаОборотКт
	|			КОНЕЦ), 0) КАК ВсегоСписано,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ВТ_БИ.ЭтоВалютныйСчет
	|					ТОГДА ВТ_БИ.ВалютнаяСуммаКонечныйОстаток
	|				ИНАЧЕ ВТ_БИ.СуммаКонечныйОстаток
	|			КОНЕЦ), 0) КАК КонечныйОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		БИ.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|		БИ.ВалютнаяСуммаНачальныйОстаток КАК ВалютнаяСуммаНачальныйОстаток,
	|		БИ.СуммаОборотДт КАК СуммаОборотДт,
	|		БИ.ВалютнаяСуммаОборотДт КАК ВалютнаяСуммаОборотДт,
	|		БИ.СуммаОборотКт КАК СуммаОборотКт,
	|		БИ.ВалютнаяСуммаОборотКт КАК ВалютнаяСуммаОборотКт,
	|		БИ.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|		БИ.ВалютнаяСуммаКонечныйОстаток КАК ВалютнаяСуммаКонечныйОстаток,
	|		ВЫБОР
	|			КОГДА БИ.ВалютнаяСуммаНачальныйОстаток <> 0
	|					ИЛИ БИ.ВалютнаяСуммаОборотДт <> 0
	|					ИЛИ БИ.ВалютнаяСуммаОборотКт <> 0
	|					ИЛИ БИ.ВалютнаяСуммаКонечныйОстаток <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоВалютныйСчет
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаИтоговНачалоДня, &ДатаИтоговКонецДня, , ДвиженияИГраницыПериода, Счет В (&СчетаССубконтоБанковскиеСчета), &ВидСубконтоБанковскиеСчета, Организация В (&Организации) {(ВЫРАЗИТЬ(Субконто1 КАК Справочник.БанковскиеСчета)) КАК БанковскийСчетИтогов}) КАК БИ) КАК ВТ_БИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Перемещения.ПеремещениеВсегоСписано), 0) КАК ПеремещениеВсегоСписано,
	|	ЕСТЬNULL(СУММА(Перемещения.ПеремещениеВсегоПоступило), 0) КАК ПеремещениеВсегоПоступило
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК ПеремещениеВсегоСписано,
	|		СписаниеСРасчетногоСчета.СуммаДокумента КАК ПеремещениеВсегоПоступило
	|	ИЗ
	|		Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет)
	|		И СписаниеСРасчетногоСчета.Организация В(&Организации)
	|		И СписаниеСРасчетногоСчета.Дата МЕЖДУ &ДатаИтоговНачалоДня И &ДатаИтоговКонецДня
	|		И СписаниеСРасчетногоСчета.Проведен
	|	{ГДЕ
	|		СписаниеСРасчетногоСчета.СчетКонтрагента КАК БанковскийСчетИтогов}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриходныйКассовыйОрдер.СуммаДокумента,
	|		0
	|	ИЗ
	|		Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|	ГДЕ
	|		ПриходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке)
	|		И ПриходныйКассовыйОрдер.Организация В(&Организации)
	|		И ПриходныйКассовыйОрдер.Дата МЕЖДУ &ДатаИтоговНачалоДня И &ДатаИтоговКонецДня
	|		И ПриходныйКассовыйОрдер.Проведен
	|	{ГДЕ
	|		ПриходныйКассовыйОрдер.СчетОрганизации КАК БанковскийСчетИтогов}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		РасходныйКассовыйОрдер.СуммаДокумента
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|	ГДЕ
	|		РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк)
	|		И РасходныйКассовыйОрдер.Организация В(&Организации)
	|		И РасходныйКассовыйОрдер.Дата МЕЖДУ &ДатаИтоговНачалоДня И &ДатаИтоговКонецДня
	|		И РасходныйКассовыйОрдер.Проведен
	|	{ГДЕ
	|		РасходныйКассовыйОрдер.СчетОрганизации КАК БанковскийСчетИтогов}) КАК Перемещения";
	
	Если ЗначениеЗаполнено(ТекОрганизация) Тогда
		СписокОрганизаций = Новый Массив;
		СписокОрганизаций.Добавить(ТекОрганизация);
	Иначе
		СписокОрганизаций = СписокДоступныхОрганизаций;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
		ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("БанковскийСчетИтогов");
		ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = ТекБанковскийСчет;
		СтруктураРезультат.НаименованиеСчета = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекБанковскийСчет, "Наименование"));
	КонецЕсли;
	
	ПостроительЗапроса.Параметры.Вставить("Организации",         СписокОрганизаций);
	ПостроительЗапроса.Параметры.Вставить("ДатаИтоговНачалоДня", НачалоДня(ТекДата));
	ПостроительЗапроса.Параметры.Вставить("ДатаИтоговКонецДня",  КонецДня(ТекДата));
	ПостроительЗапроса.Параметры.Вставить("ВалютаРеглУчета",
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПостроительЗапроса.Параметры.Вставить("ВидСубконтоБанковскиеСчета",
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета);
	ПостроительЗапроса.Параметры.Вставить("СчетаССубконтоБанковскиеСчета",
		УчетДенежныхСредствПовтИсп.ПолучитьСчетаССубконтоБанковскиеСчета());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатыЗапроса    = ПостроительЗапроса.ПолучитьЗапрос().ВыполнитьПакет();
	РезультатИтогов      = РезультатыЗапроса[0];
	РезультатПеремещений = РезультатыЗапроса[1];
	
	Если НЕ РезультатИтогов.Пустой() Тогда
		Выборка = РезультатИтогов.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, Выборка);
	КонецЕсли;
	
	Если НЕ РезультатПеремещений.Пустой() Тогда
		Выборка = РезультатПеремещений.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, Выборка);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСчетОрганизации(СчетОрганизации, Знач Организация)
	
	Если Организация = Неопределено Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетОрганизации, Организация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ
//

&НаКлиенте
Процедура ЗагрузитьИзКлиентБанк(Команда)
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("РежимПоУмолчанию", "ГруппаЗагрузка");
	
	Если ОтборОрганизацияИспользование И ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ПараметрыЗагрузки.Вставить("Организация",      ОтборОрганизация);
	КонецЕсли;
	
	Если ОтборБанковскийСчетИспользование И ЗначениеЗаполнено(ОтборБанковскийСчет) Тогда
		ПараметрыЗагрузки.Вставить("БанковскийСчет",   ОтборБанковскийСчет);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.Форма", ПараметрыЗагрузки, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНеоплаченныеПлатежныеПоручения(Команда)
	
	СтруктураОтбора = Новый Структура("Организация, БанковскийСчет, Дата", ОтборОрганизация, ОтборБанковскийСчет, ОтборДатаОтбора);
	ОткрытьФорму("Документ.ПлатежноеПоручение.Форма.ФормаПодбораНеоплаченных", Новый Структура("Отбор", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеНаРасчетныйСчет(Команда)
	
	КлючеваяОперация = "СозданиеФормыПоступлениеНаРасчетныйСчет";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
	СтруктураОтбора = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	
	Если СтруктураОтбора.Свойство("ДатаОтбора") Тогда
		СтруктураОтбора.Вставить("Дата", СтруктураОтбора.ДатаОтбора);
	КонецЕсли;
	
	ОткрытьФорму("Документ.ПоступлениеНаРасчетныйСчет.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписаниеСРасчетногоСчета(Команда)
	
	КлючеваяОперация = "СозданиеФормыСписаниеСРасчетногоСчета";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
	СтруктураОтбора = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	ОткрытьФорму("Документ.СписаниеСРасчетногоСчета.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
//

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВремяНачалаОперации = ЗначениеТаймера();
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
	УстановитьСчетОрганизации(ОтборБанковскийСчет, ОтборОрганизация);
	
	ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	
	Если ИтогиВключены Тогда
		ВсегдаОбновлять = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
	Иначе
		ЗафиксироватьДлительностьКлючевойОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборБанковскийСчетПриИзменении(Элемент)
	
	ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	
	// Вызовет пересчет итогов
	ТекДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Ложь;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаОтбораПриИзменении(Элемент)
	
	ОтборДатаОтбораИспользование = ЗначениеЗаполнено(ОтборДатаОтбора);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДатаОтбора");
	
	// Вызовет пересчет итогов
	ТекДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Ложь;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	
	ОтборКонтрагентИспользование = ЗначениеЗаполнено(ОтборКонтрагент);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
	
	// Вызовет пересчет итогов
	ТекДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Ложь;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНазначениеПлатежаПриИзменении(Элемент)
	
	ОтборНазначениеПлатежаИспользование = ЗначениеЗаполнено(ОтборНазначениеПлатежа);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "НазначениеПлатежа", ВидСравненияКомпоновкиДанных.Содержит);
	
	// Вызовет пересчет итогов
	ТекДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Ложь;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборБанковскийСчетИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	
	// Вызовет пересчет итогов
	ТекДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Ложь;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
	// Вызовет пересчет итогов
	ТекДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Ложь;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
	
	// Вызовет пересчет итогов
	ТекДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Ложь;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДатаОтбора");
	
	// Вызовет пересчет итогов
	ТекДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Ложь;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНазначениеПлатежаИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "НазначениеПлатежа", ВидСравненияКомпоновкиДанных.Содержит);
	
	// Вызовет пересчет итогов
	ТекДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Ложь;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияГиперссылкаПеремещенияНажатие(Элемент)
	
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ТекОрганизация    = ?(ОтборОрганизацияИспользование,    ОтборОрганизация,    Неопределено);
		ТекБанковскийСчет = ?(ОтборБанковскийСчетИспользование, ОтборБанковскийСчет, Неопределено);
		Если ЗначениеЗаполнено(ОтборБанковскийСчет) И ОтборДатаОтбора = '00010101' Тогда
			ТекДата = ТекущаяДата();
		Иначе
			ТекДата = ОтборДатаОтбора;
		КонецЕсли;
	Иначе
		ТекДата           = ТекДанные.Дата;
		ТекОрганизация    = ТекДанные.Организация;
		ТекБанковскийСчет = ТекДанные.БанковскийСчет;
	КонецЕсли;
	
	ОткрытьФорму("ЖурналДокументов.БанковскиеВыписки.Форма.ПеремещенияДенежныхСредств",
		Новый Структура("ДатаВыписки, Организация, БанковскийСчет", ТекДата, ТекОрганизация, ТекБанковскийСчет),
			ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияГиперссылкаСкрытьИтогиНажатие(Элемент)
	
	ИтогиВключены = Ложь;
	Элементы.ГруппаСтраницыИтогов.ТекущаяСтраница = Элементы.ГруппаСтраницаБезИтогов;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьИтогиНажатие(Элемент)
	
	ИтогиВключены = Истина;
	Элементы.ГруппаСтраницыИтогов.ТекущаяСтраница = Элементы.ГруппаСтраницаИтоги;
	
	ВсегдаОбновлять = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ Список

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		КлючеваяОперация = "ОткрытиеФормыПоступлениеНаРасчетныйСчет";
	ИначеЕсли ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		КлючеваяОперация = "ОткрытиеФормыСписаниеСРасчетногоСчета";
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ИтогиВключены Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	Оповестить("ИзменениеВыписки");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ОБРАБОТЧИКИ

&НаКлиенте
Процедура Подключаемый_ОбновитьИтогиОбработчик()
	
	Если ИтогиВключены Тогда
		ОбновитьИтоги();
		ЗафиксироватьДлительностьКлючевойОперации();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОЛЕЗНАЯ ИНФОРМАЦИЯ

&НаКлиенте
Процедура Подключаемый_ПоказатьБыстроеОсвоение()
	
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("БыстроеОсвоениеБанк",, НастройкиПредупреждений);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтотОбъект.ИмяФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать
