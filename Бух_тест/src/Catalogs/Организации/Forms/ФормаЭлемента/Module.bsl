////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);

	// Установка списка выбора головных организаций
	Элементы.ГоловнаяОрганизация.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокГоловныхОрганизацийОбособленногоПодразделения().ВыгрузитьЗначения());
	
	// Исключим редактируемую организацию из списка головных
	Если Параметры.Ключ.Пустая() Тогда
		ЭлементТекущаяОрганизация	= Элементы.ГоловнаяОрганизация.СписокВыбора.НайтиПоЗначению(Объект.Ссылка);
		Если ЭлементТекущаяОрганизация <> Неопределено Тогда
			Элементы.ГоловнаяОрганизация.СписокВыбора.Удалить(ЭлементТекущаяОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	
	ЭтоЮрЛицо	= Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	ЭтоФизЛицо	= Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ЭтоОбособленноеПодразделение	= Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
		И Объект.ОбособленноеПодразделение;

	ПрочитатьКодыОрганизации();
	
	ПараметрыУчета = ОбщегоНазначенияБПВызовСервера.ОпределитьПараметрыУчета();
	
	ИспользоватьРазделениеПоОбластямДанных = ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
	
	
	ФИОФизическогоЛица	= ПолучитьФИОФизическогоЛица(Объект.ИндивидуальныйПредприниматель);
	
	ФИОИндивидуальногоПредпринимателя	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3",
		ФИОФизическогоЛица.Фамилия, ФИОФизическогоЛица.Имя, ФИОФизическогоЛица.Отчество);
	
	НаименованиеПолное		= Объект.НаименованиеПолное;
		
	УчетЗарплатыИКадровВоВнешнейПрограмме	= Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	
	Если ЭтоОбособленноеПодразделение Тогда
		ВидОрганизации = "ОбособленноеПодразделение";
	ИначеЕсли ЭтоФизЛицо Тогда
		ВидОрганизации = "ИндивидуальныйПредприниматель";
	Иначе
		ВидОрганизации = "ЮридическоеЛицо";
	КонецЕсли;
	
	УстановитьЗаголовкиПоВидуОрганизации(ЭтаФорма);
	
	СоздатьБанковскийСчет = НСтр("ru='Создать';uk='Створити'");
	
	КоличествоБанковскихСчетов = Справочники.БанковскиеСчета.ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Объект.Ссылка);
	Элементы.ГруппаОсновнойБанковскийСчет.ТекущаяСтраница = ?(КоличествоБанковскихСчетов = 0,
		Элементы.ГруппаСоздатьБанковскийСчет,
		Элементы.ГруппаБанковскийСчет);
		
	ОбновитьИнформациюОбОтветственныхЛицах();
	
	
	РазместитьКонтактнуюИнформацию();
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	
	// Установка доступности ссылок в зависимости от доступности данных формы для изменения
	Элементы.СоздатьБанковскийСчет.Доступность = НЕ ТолькоПросмотр;
	Элементы.ВсеОтветственныеЛица.Доступность = НЕ ТолькоПросмотр;
	Элементы.Руководитель.Доступность = НЕ ТолькоПросмотр;
	Элементы.ГлавныйБухгалтер.Доступность = НЕ ТолькоПросмотр;
	Элементы.Кассир.Доступность = НЕ ТолькоПросмотр;

	ТекущийФайл = Объект.ФайлФаксимильнаяПодпись;
	Если Не ТекущийФайл.Пустая() Тогда
		АдресФаксимильнойПодписи = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ТекущийФайл.ТекущаяВерсия)
	Конецесли;	

	ТекущийФайл = Объект.ФайлФаксимильнаяПечать;
	Если Не ТекущийФайл.Пустая() Тогда
		АдресФаксимильнойПечати = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ТекущийФайл.ТекущаяВерсия)
	Конецесли;
	
	ТекущийФайл = Объект.ФайлЛоготип;
	Если Не ТекущийФайл.Пустая() Тогда
		АдресЛоготипа = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ТекущийФайл.ТекущаяВерсия)
	Конецесли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	Если Источник = ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененБанковскийСчет" Тогда
		
		Если Параметр.Владелец = Объект.Ссылка Тогда
			
			Если НЕ ТолькоПросмотр Тогда
			
				Если НЕ ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
					
					Объект.ОсновнойБанковскийСчет = Параметр.Ссылка;
					Элементы.ГруппаОсновнойБанковскийСчет.ТекущаяСтраница = Элементы.ГруппаБанковскийСчет;
					Модифицированность = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица" Тогда
		
		Если НЕ ТолькоПросмотр
			И Объект.ИндивидуальныйПредприниматель = Источник
			И Параметр.Свойство("КодПоДРФО") Тогда
		
			Если Объект.КодПоЕДРПОУ <> Параметр.КодПоДРФО Тогда
				
				Объект.КодПоЕДРПОУ	= Параметр.КодПоДРФО;
				
				Модифицированность	= Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеОтветственныхЛиц" Тогда
		
		ОбновитьИнформациюОбответственныхЛицах();
	
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИмяОбработкиВводаКонтактнойИнформации = "Обработка.ВводКонтактнойИнформации";
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И Лев(ИсточникВыбора.ИмяФормы, СтрДлина(ИмяОбработкиВводаКонтактнойИнформации)) = ИмяОбработкиВводаКонтактнойИнформации Тогда
		
		Возврат;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ВыбранноеЗначение);
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
			
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеКонтактнойИнформациейБП.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПараметрыЗаписи.Вставить("ОсновнаяОрганизацияПередЗаписью", БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	

	ЗаписатьКодыОрганизации();
	
	ЗаписатьДанныеФизическогоЛица(ТекущийОбъект, Отказ);
	

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ОсновнаяОрганизацияПослеЗаписи", БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Организации", , Объект.Ссылка);
	
	Если НЕ ПараметрыЗаписи.Свойство("ОсновнаяОрганизацияПередЗаписью")	И НЕ ПараметрыЗаписи.Свойство("ОсновнаяОрганизацияПослеЗаписи") Тогда
		Возврат;
	КонецЕсли;
		
	Если ПараметрыЗаписи.ОсновнаяОрганизацияПередЗаписью <> ПараметрыЗаписи.ОсновнаяОрганизацияПослеЗаписи Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Установлена основная организация:';uk='Установлена основна організація:'"),
			ПолучитьНавигационнуюСсылку(ПараметрыЗаписи.ОсновнаяОрганизацияПослеЗаписи), 
			ПараметрыЗаписи.ОсновнаяОрганизацияПослеЗаписи);
		Оповестить("ИзменениеОсновнойОрганизации", ПолучитьОрганизациюПоУмолчанию());
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("СохранениеИзмененийВОрганизации");
	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиПоВидуОрганизации(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;

	Если Форма.ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		
		Элементы.НаименованиеПолное.ПодсказкаВвода	 = "Физична особа - підприємець Шевченко Тарас Григорович";
		Элементы.Наименование.ПодсказкаВвода		 = "Шевченко Т.Г. ФОП";
		
		Элементы.ЮрАдресОрганизации.Заголовок	     = НСтр("ru='Адрес  по  прописке';uk='Адреса  за  пропискою'");
		Элементы.ФактАдресОрганизации.Заголовок      = НСтр("ru='Адрес   проживания';uk='Адреса   проживання'");
		Элементы.ЮрФактАдресаСовпадают.Заголовок     = НСтр("ru='Адрес по прописке совпадает с адресом проживания';uk='Адреса за пропискою збігається з адресою проживання'");
		Элементы.НадписьПочтовыйАдрес.Заголовок      = НСтр("ru='Адрес для информ.:';uk='Адреса для інформ.:'");
		Элементы.ЮрПочтовыйАдресаСовпадают.Заголовок = НСтр("ru='Адрес для информирования совпадает с адресом по прописке';uk='Адреса для інформування збігається з адресою за пропискою'");
		Элементы.ТелефонОрганизации.Заголовок        = НСтр("ru='Телефон домашний';uk='Телефон домашній'");
		
		Элементы.ФактАдресОрганизацииСовпадает.Заголовок = Элементы.ФактАдресОрганизации.Заголовок;
		
	Иначе
		
		Элементы.НаименованиеПолное.ПодсказкаВвода	 = "Товариство з обмеженою відповідальністю ""Добро""";
		Элементы.Наименование.ПодсказкаВвода		 = "Добро ТОВ";
		
		Элементы.ЮрАдресОрганизации.Заголовок	     = НСтр("ru='Юридический адрес';uk='Юридична адреса'");
		Элементы.ФактАдресОрганизации.Заголовок      = НСтр("ru='Фактический адрес';uk='Фактична адреса'");
		Элементы.ЮрФактАдресаСовпадают.Заголовок     = НСтр("ru='Фактический адрес совпадает с юридическим адресом';uk='Фактична адреса співпадає з юридичною адресою'");
		Элементы.НадписьПочтовыйАдрес.Заголовок      = НСтр("ru='Почтовый адрес:';uk='Поштова адреса:'");
		Элементы.ЮрПочтовыйАдресаСовпадают.Заголовок = НСтр("ru='Почтовый адрес совпадает с юридическим адресом';uk='Поштова адреса збігається з юридичною адресою'");
		Элементы.ТелефонОрганизации.Заголовок        = НСтр("ru='Контактный телефон';uk='Контактний телефон'");
		
		Элементы.ФактАдресОрганизацииСовпадает.Заголовок = Элементы.ФактАдресОрганизации.Заголовок;
		
	КонецЕсли;
	

КонецПроцедуры
 
&НаКлиенте
Процедура ВидОрганизацииПриИзменении(Элемент)
	
	ЮридическоеФизическоеЛицоДо = Объект.ЮридическоеФизическоеЛицо;
	Если ВидОрганизации = "ЮридическоеЛицо" Тогда
		Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
		Объект.ОбособленноеПодразделение = Ложь;
		Если Объект.ГоловнаяОрганизация <> Объект.Ссылка Тогда
			Объект.ГоловнаяОрганизация	= Объект.Ссылка;
		КонецЕсли;
	ИначеЕсли ВидОрганизации = "ОбособленноеПодразделение" Тогда
		Объект.ЮридическоеФизическоеЛицо =  ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
		Объект.ОбособленноеПодразделение = Истина;
		Если Объект.ГоловнаяОрганизация = Объект.Ссылка Тогда
			Объект.ГоловнаяОрганизация	= Неопределено;
		КонецЕсли;
	ИначеЕсли ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
		Объект.ОбособленноеПодразделение = Ложь;
		Если Объект.ГоловнаяОрганизация <> Объект.Ссылка Тогда
			Объект.ГоловнаяОрганизация	= Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Если Объект.ЮридическоеФизическоеЛицо <> ЮридическоеФизическоеЛицоДо Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьЗаголовкиПоВидуОрганизации(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйПредпринимательПриИзменении(Элемент)
	
	ОбновитьДанныеИндивидуальногоПредпринимателя();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	
	НаименованиеПолное	= Объект.НаименованиеПолное;

КонецПроцедуры

&НаКлиенте
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьБанковскийСчетНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("Владелец", Объект.Ссылка));

	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("СоздатьБанковскийСчетНажатиеЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБанковскийСчетНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    УправлениеФормой(ЭтаФорма);

КонецПроцедуры


&НаКлиенте
Процедура РегистрацияВНалоговомОрганеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	ИсходныйЮрАдресОрганизации	= ЮрАдресОрганизации;
	
	УправлениеКонтактнойИнформациейКлиентБП.ГиперссылкаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
	Если НЕ ИсходныйЮрАдресОрганизации = ЮрАдресОрганизации Тогда
	
		ПриИзмененииЮрАдресаОрганизации();
	
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиентБП.ГиперссылкаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
	ПриИзмененииФактАдресаОрганизации();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры


&НаКлиенте
Процедура ТелефонОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры


&НаКлиенте
Процедура EmailОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура EmailОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДругаяИнформацияОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДругаяИнформацияОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФактАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрФактАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации("ФактАдресОрганизации", "ЮрАдресОрганизации");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрПочтовыйАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрПочтовыйАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации("ПочтовыйАдресОрганизации", "ЮрАдресОрганизации");
		
		Если ПочтовыйАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			ПочтовыйАдресОрганизации = "";
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьКонтактнуюИнформацию(Результат = Неопределено) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейБП.ОбновитьКонтактнуюИнформацию(ЭтаФорма, Объект, Результат);
	
КонецФункции

&НаКлиенте
Процедура ПредставлениеРуководителяНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.Руководитель");
	
	ЗначенияЗаполнения	= Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					РуководительКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеГлавногоБухгалтераНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер");
	
	ЗначенияЗаполнения	= Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					ГлавныйБухгалтерКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаЗаписи", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКассираНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.Кассир");
	
	ЗначенияЗаполнения	= Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					КассирКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаЗаписи", ПараметрыФормы);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВсеБанковскиеСчета(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор			= Новый Структура("Владелец", Объект.Ссылка);
	ПараметрыФормы	= Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаСписка", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры


&НаКлиенте
Процедура ВсеОтветственныеЛица(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
		
	Отбор			= Новый Структура("СтруктурнаяЕдиница", Объект.Ссылка);
	ПараметрыФормы	= Новый Структура("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаСписка", ПараметрыФормы);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоЮрЛицо	= Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	ЭтоФизЛицо	= Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	ЭтоОбособленноеПодразделение	= Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо")
		И Объект.ОбособленноеПодразделение;

	Элементы.ГруппаГоловнаяОрганизация.Видимость			= ЭтоОбособленноеПодразделение;
	Элементы.ИндивидуальныйПредприниматель.Видимость		= ЭтоФизЛицо;
	Элементы.КодДРФОИндивидуальногоПредпринимателя.Видимость= ЭтоФизЛицо;
	Элементы.ГруппаОсновныеРеквизиты.Видимость = НЕ ЭтоФизЛицо;
	Элементы.КодыОрганизацийНомерСвидетельства.Видимость = ЗначениеЗаполнено(Форма.КодыОрганизации.НомерСвидетельства);
	
	Если ЭтоФизЛицо Тогда
			
		Элементы.ЮрАдресОрганизации.Заголовок	     = НСтр("ru='Адрес  по  прописке';uk='Адреса  за  пропискою'");
		Элементы.ФактАдресОрганизации.Заголовок      = НСтр("ru='Адрес   проживания';uk='Адреса   проживання'");
		Элементы.ЮрФактАдресаСовпадают.Заголовок     = НСтр("ru='Адрес по прописке совпадает с адресом проживания';uk='Адреса за пропискою збігається з адресою проживання'");
		Элементы.НадписьПочтовыйАдрес.Заголовок      = НСтр("ru='Адрес для информ.:';uk='Адреса для інформ.:'");
		Элементы.ЮрПочтовыйАдресаСовпадают.Заголовок = НСтр("ru='Адрес для информирования совпадает с адресом по прописке';uk='Адреса для інформування збігається з адресою за пропискою'");
		Элементы.ТелефонОрганизации.Заголовок        = НСтр("ru='Телефон домашний';uk='Телефон домашній'");
		
		Элементы.ФактАдресОрганизацииСовпадает.Заголовок = Элементы.ФактАдресОрганизации.Заголовок;
		
	Иначе
		
		Элементы.ЮрАдресОрганизации.Заголовок	     = НСтр("ru='Юридический адрес';uk='Юридична адреса'");
		Элементы.ФактАдресОрганизации.Заголовок      = НСтр("ru='Фактический адрес';uk='Фактична адреса'");
		Элементы.ЮрФактАдресаСовпадают.Заголовок     = НСтр("ru='Фактический адрес совпадает с юридическим адресом';uk='Фактична адреса співпадає з юридичною адресою'");
		Элементы.НадписьПочтовыйАдрес.Заголовок      = НСтр("ru='Почтовый адрес:';uk='Поштова адреса:'");
		Элементы.ЮрПочтовыйАдресаСовпадают.Заголовок = НСтр("ru='Почтовый адрес совпадает с юридическим адресом';uk='Поштова адреса збігається з юридичною адресою'");
		Элементы.ТелефонОрганизации.Заголовок        = НСтр("ru='Контактный телефон';uk='Контактний телефон'");
		
		Элементы.ФактАдресОрганизацииСовпадает.Заголовок = Элементы.ФактАдресОрганизации.Заголовок;

		
	КонецЕсли;
	
	// Закладка Адреса, телефоны
	Если Форма.ЮрФактАдресаСовпадают Тогда
		Элементы.ГруппаФактАдресОрганизации.ТекущаяСтраница	= Элементы.СтраницаФактАдресОрганизацииСовпадает;
	Иначе
		Элементы.ГруппаФактАдресОрганизации.ТекущаяСтраница	= Элементы.СтраницаФактАдресОрганизации;
	КонецЕсли;
	
	Если Форма.ЮрПочтовыйАдресаСовпадают Тогда
		Элементы.ГруппаПочтовыйАдресОрганизации.ТекущаяСтраница	= Элементы.СтраницаПочтовыйАдресОрганизацииСовпадает;
	Иначе
		Элементы.ГруппаПочтовыйАдресОрганизации.ТекущаяСтраница	= Элементы.СтраницаПочтовыйАдресОрганизации;
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.ФактАдресОрганизации)
		ИЛИ Форма.ФактАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			Форма.ФактАдресОрганизацииСовпадает = НСтр("ru='<не заполнен>';uk='<не заповнений>'");
	Иначе
		Форма.ФактАдресОрганизацииСовпадает = Форма.ФактАдресОрганизации;	
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.ПочтовыйАдресОрганизации)
		ИЛИ Форма.ПочтовыйАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			Форма.ПочтовыйАдресОрганизацииСовпадает = НСтр("ru='<не заполнен>';uk='<не заповнений>'");
	Иначе
		Форма.ПочтовыйАдресОрганизацииСовпадает = Форма.ПочтовыйАдресОрганизации;	
	КонецЕсли;
	
	ДоступностьКонтактнойИнформации = НЕ Форма.ТолькоПросмотр;
	
	Форма.Элементы.ЮрАдресОрганизации.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.ФактАдресОрганизации.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.ФактАдресОрганизацииСовпадает.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.ЮрФактАдресаСовпадают.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.НадписьПочтовыйАдрес.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.ПочтовыйАдресОрганизации.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.ПочтовыйАдресОрганизацииСовпадает.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.ЮрПочтовыйАдресаСовпадают.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.ТелефонОрганизации.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.ФаксОрганизации.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.EmailОрганизации.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.ДругаяИнформацияОрганизации.Доступность = ДоступностьКонтактнойИнформации;
	
	
КонецПроцедуры

Функция ПолучитьСписокГоловныхОрганизацийОбособленногоПодразделения()

	Запрос = Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = Организации.Ссылка
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	СписокОрганизаций = Новый СписокЗначений;

	Результат	= Запрос.Выполнить();
	Выборка	= Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции

&НаСервере
Функция ОбновитьДанныеИндивидуальногоПредпринимателя()
	
	ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить();	
	
	ЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки();
	ФактАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки();
	ПочтовыйАдресОрганизации = "";
	ТелефонОрганизации = "";
	
	РазместитьКонтактнуюИнформацию(Ложь);
	
	Если НЕ ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) Тогда
		Объект.КодПоЕДРПОУ = "";
		Возврат Ложь;
	КонецЕсли;
	
	ФИОФизическогоЛица	= ПолучитьФИОФизическогоЛица(Объект.ИндивидуальныйПредприниматель);
	
	ФИОИндивидуальногоПредпринимателя	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3",
		ФИОФизическогоЛица.Фамилия, ФИОФизическогоЛица.Имя, ФИОФизическогоЛица.Отчество);
		
		
	Объект.КодПоЕДРПОУ	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИндивидуальныйПредприниматель, "КодПоДРФО");
	
	ЮрФактАдресаСовпадают = СокрЛП(ЮрАдресОрганизации) = СокрЛП(ФактАдресОрганизации);
	
	ЮрПочтовыйАдресаСовпадают = СокрЛП(ЮрАдресОрганизации) = СокрЛП(ПочтовыйАдресОрганизации)
		ИЛИ СокрЛП(?(ЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки(),
		"", ЮрАдресОрганизации)) = СокрЛП(ПочтовыйАдресОрганизации);
	
	Возврат Истина;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФИОФизическогоЛица(ИндивидуальныйПредприниматель)
	Перем ФИОФизическогоЛица;
	
	ФИОФизическогоЛица	= Новый Структура("Фамилия, Имя, Отчество", Строка(ИндивидуальныйПредприниматель), "", "");
	
	ТаблицаСрезПоследних = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(, Новый Структура("ФизическоеЛицо", ИндивидуальныйПредприниматель));
	Если ТаблицаСрезПоследних.Количество() > 0 Тогда
		
		СтрокаТаблицы	= ТаблицаСрезПоследних[0];
		Если НЕ ПустаяСтрока(СтрокаТаблицы.Фамилия) Тогда
			ФИОФизическогоЛица.Фамилия	= СокрЛП(СтрокаТаблицы.Фамилия);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаТаблицы.Имя) Тогда
			ФИОФизическогоЛица.Имя	= СокрЛП(СтрокаТаблицы.Имя);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаТаблицы.Отчество) Тогда
			ФИОФизическогоЛица.Отчество	= СокрЛП(СтрокаТаблицы.Отчество);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФИОФизическогоЛица;
	
КонецФункции

&НаСервере
Процедура РазместитьКонтактнуюИнформацию(ПриСозданииНаСервере = Истина)
	
	ТаблицаРазмещенияКИ	= УправлениеКонтактнойИнформациейБП.ПолучитьПустуюТаблицуРазмещенияКонтактнойИнформации();
		
	// Обработчик подсистемы "Контактная информация" для закладки "ГруппаКонтактнаяИнформация"
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Элементы.ЮрАдресОрганизации.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, Элементы.ФактАдресОрганизации.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, Элементы.ПочтовыйАдресОрганизации.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, Элементы.ТелефонОрганизации.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, Элементы.ФаксОрганизации.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.EmailОрганизации, Элементы.EmailОрганизации.ПутьКДанным);
	
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации, Элементы.ДругаяИнформацияОрганизации.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация", "", ТаблицаРазмещенияКИ);
	
	Если ПриСозданииНаСервере Тогда
		// Добавление непредопределенной контактной информации
		ИсключаемыеВидыКИ	= Новый Массив;
		ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
		ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
		ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
		ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
		ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации);
		ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации);
		
		УправлениеКонтактнойИнформациейБП.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация", "", , ИсключаемыеВидыКИ);
	КонецЕсли;
		
	
	ЮрФактАдресаСовпадают		= СокрЛП(ЮрАдресОрганизации) = СокрЛП(ФактАдресОрганизации);
	ЮрПочтовыйАдресаСовпадают	= СокрЛП(ЮрАдресОрганизации) = СокрЛП(ПочтовыйАдресОрганизации)
		ИЛИ СокрЛП(?(ЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки(),
		"", ЮрАдресОрганизации)) = СокрЛП(ПочтовыйАдресОрганизации);

КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОбОтветственныхЛицах()
	
	Руководитель		= НСтр("ru='Создать';uk='Створити'");
	ГлавныйБухгалтер	= НСтр("ru='Создать';uk='Створити'");
	Кассир				= НСтр("ru='Создать';uk='Створити'");
	
	РуководительКлючЗаписи		= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	ГлавныйБухгалтерКлючЗаписи	= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	КассирКлючЗаписи			= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",	Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Период КАК Период,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо) КАК ФизическоеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизацийСрезПоследних.Должность) КАК Должность,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ТОГДА ""Руководитель""
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			ТОГДА ""ГлавныйБухгалтер""
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир)
	|			ТОГДА ""Кассир""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеОтветственногоЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|ГДЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ИЛИ ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			ИЛИ ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир))";
	
	
	Отбор	= Новый Структура("Период, СтруктурнаяЕдиница, ОтветственноеЛицо");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПустаяСтрока(Выборка.ПредставлениеОтветственногоЛица) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормы	= ЭтаФорма.Элементы.Найти(Выборка.ПредставлениеОтветственногоЛица);
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма[Выборка.ПредставлениеОтветственногоЛица]	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (%2)';uk='%1 (%2)'"),
			Выборка.ФизическоеЛицо, Выборка.Должность);
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		ЭтаФорма[Выборка.ПредставлениеОтветственногоЛица + "КлючЗаписи"]	= РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьКлючЗаписи(Отбор);
		
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ЗаписатьДанныеФизическогоЛица(ТекущийОбъект, Отказ = Ложь)
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ИндивидуальныйПредприниматель) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.КодПоЕДРПОУ)
		И ТекущийОбъект.КодПоЕДРПОУ <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИндивидуальныйПредприниматель, "КодПоДРФО") Тогда
		
		ОбъектФизическоеЛицо	= ТекущийОбъект.ИндивидуальныйПредприниматель.ПолучитьОбъект();
		ОбъектФизическоеЛицо.КодПоДРФО	= ТекущийОбъект.КодПоЕДРПОУ;
		
		Попытка
			ОбъектФизическоеЛицо.Записать();
		Исключение
			
			Отказ	= Истина;
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Если ИнформацияОбОшибке.Причина = Неопределено Тогда
				ОписаниеОшибки = ИнформацияОбОшибке.Описание;
			Иначе
				ОписаниеОшибки = ИнформацияОбОшибке.Причина.Описание;
			КонецЕсли;
			
			ОписаниеОшибки = НСтр("ru='Ошибка при обновлении данных физического лица:';uk='Помилка при оновленні даних фізичної особи:'") + Символы.ПС + ОписаниеОшибки;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЮрАдресаОрганизации()

	Если ЮрФактАдресаСовпадают ИЛИ ПустаяСтрока(ФактАдресОрганизации) Тогда
		СкопироватьПолеКонтактнойИнформации("ФактАдресОрганизации", "ЮрАдресОрганизации");
	КонецЕсли;
	
	Если ЮрПочтовыйАдресаСовпадают ИЛИ ПустаяСтрока(ПочтовыйАдресОрганизации) Тогда
		СкопироватьПолеКонтактнойИнформации("ПочтовыйАдресОрганизации", "ЮрАдресОрганизации");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФактАдресаОрганизации()

	ЮрФактАдресаСовпадают = СокрЛП(ЮрАдресОрганизации) = СокрЛП(ФактАдресОрганизации);
	ЮрПочтовыйАдресаСовпадают = СокрЛП(ЮрАдресОрганизации) = СокрЛП(ПочтовыйАдресОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПолеКонтактнойИнформации(ИмяПриемника, ИмяИсточника)

	Модифицированность		= Истина;
	ЭтаФорма[ИмяПриемника]	= ЭтаФорма[ИмяИсточника];
	
	ИмяОписания	= "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Отбор.ИмяРеквизита	= ИмяИсточника;
	ДанныеИсточника	= ЭтаФорма[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор.ИмяРеквизита	= ИмяПриемника;
	ДанныеПриемника	= ЭтаФорма[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеПриемника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеИсточника[0].Тип = ДанныеПриемника[0].Тип Тогда
		Возврат
	КонецЕсли;
	
	ЗначенияПолейИсточника = ДанныеИсточника[0].ЗначенияПолей;
	Если ТипЗнч(ЗначенияПолейИсточника)=Тип("Строка") Тогда
		ДанныеПриемника[0].ЗначенияПолей = ЗначенияПолейИсточника;
	Иначе
		ДанныеПриемника[0].ЗначенияПолей = ЗначенияПолейИсточника.Скопировать();
	КонецЕсли;
	ДанныеПриемника[0].Представление = ДанныеИсточника[0].Представление;
	ДанныеПриемника[0].Комментарий = ДанныеИсточника[0].Комментарий;
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьОрганизациюПоУмолчанию()

	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");

КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьУчетнуюПолитику(Ссылка, СистемаНалогообложения)
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаНабораЗаписей = НаборЗаписей.Добавить();
	СтрокаНабораЗаписей.Активность = Истина;
	
	ЭтоФизЛицо	= Ссылка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	НаборЗаписей.Записать();
	
	
КонецПроцедуры


&НаСервере
Процедура ПрочитатьКодыОрганизации()
	
	ДатаСреза = ?(КодыОрганизации.Период = '00010101', НачалоМесяца(ТекущаяДата()), КодыОрганизации.Период);
	
	ТаблицаКодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаСреза, Новый Структура("Организация", Объект.Ссылка));
	
	Если ТаблицаКодыОрганизации.Количество() > 0 Тогда
	
		ЗаполнитьЗначенияСвойств(КодыОрганизации, ТаблицаКодыОрганизации[0]);	
		
	Иначе	
		
		КодыОрганизации.Период = ДатаСреза;
		
	КонецЕсли;
	
	 
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКодыОрганизации()
	
	Менеджер = РегистрыСведений.КодыОрганизации.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(Менеджер, КодыОрганизации);
	
	Менеджер.Организация = Объект.Ссылка;
	Если НЕ ЗначениеЗаполнено(КодыОрганизации.Период) Тогда
		Менеджер.Период = ТекущаяДата();	
	КонецЕсли;
	
	// проверим изменялся ли реально набор записей
	НаборМодифицирован = Ложь;
	
	ТаблицаКоды = РегистрыСведений.КодыОрганизации.СрезПоследних(Менеджер.Период, Новый Структура("Организация", Объект.Ссылка));
    Если ТаблицаКоды.Количество() > 0 Тогда
	    Для каждого Колонка Из ТаблицаКоды.Колонки Цикл
			
			Если Колонка.Имя = "Период" Тогда
				Продолжить;
			КонецЕсли;
			
			Если Менеджер[Колонка.Имя] <> ТаблицаКоды[0][Колонка.Имя] Тогда
			
				 НаборМодифицирован = Истина;
				 Прервать;
			
			КонецЕсли;
		
		КонецЦикла;
		
	Иначе
		НаборМодифицирован = Истина;
	КонецЕсли;
	
	Если НаборМодифицирован Тогда
		Менеджер.Записать(Истина);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияКонтактнойИнформации(Результат) Экспорт
	
	Если Результат.ИмяРеквизита = "ЮрАдресОрганизации" Тогда
		
		Если НЕ Результат.ЗначениеПоляДоИзменения = ЮрАдресОрганизации Тогда
			
			ПриИзмененииЮрАдресаОрганизации();
			
		КонецЕсли;
		
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли Результат.ИмяРеквизита = "ФактАдресОрганизации" Тогда
		
		ПриИзмененииФактАдресаОрганизации();
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораИзКлассификаторКОАТУУ()
	
	СтандартнаяОбработка = Ложь;

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработкаВыбораИзКлассификаторКОАТУУ", ЭтотОбъект);
		
	ОткрытьФорму("Справочник.КлассификаторКОАТУУ.Форма.ФормаВыбора", ,ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИзКлассификаторКОАТУУ(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		СтруктураРеквизитовКОАТУУ = ОбщегоНазначенияБПВызовСервера.ЗначенияРеквизитовОбъекта(
			РезультатЗакрытия, "Наименование,Код,НалоговаяИнспекция");
		ЭтотОбъект.КодыОрганизации.Территория = СтруктураРеквизитовКОАТУУ.Наименование;
    	ЭтотОбъект.КодыОрганизации.КодКОАТУУ = СтруктураРеквизитовКОАТУУ.Код;
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.КодыОрганизации.НалоговаяИнспекция) Тогда
			ЭтотОбъект.КодыОрганизации.НалоговаяИнспекция = СтруктураРеквизитовКОАТУУ.НалоговаяИнспекция;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КодыОрганизацийКодКОАТУУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораИзКлассификаторКОАТУУ();
	
КонецПроцедуры

&НаКлиенте
Процедура КодыОрганизацийТерриторияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораИзКлассификаторКОАТУУ()
	
КонецПроцедуры

// КОНТАКТНАЯ ИНФОРМАЦИЯ

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)	
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

// ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаКлиенте
Процедура АдресЛоготипаНажатие(Элемент, СтандартнаяОбработка)
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "ФайлЛоготип");
КонецПроцедуры

&НаКлиенте
Процедура АдресФаксимильнойПодписиНажатие(Элемент, СтандартнаяОбработка)
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "ФайлФаксимильнаяПодпись");
КонецПроцедуры

&НаКлиенте
Процедура АдресФаксимильнойПечатиНажатие(Элемент, СтандартнаяОбработка)
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "ФайлФаксимильнаяПечать");
КонецПроцедуры

&НаКлиенте
// Процедура отвечает за обработку нажатия на картинки формы (логотип/факсим. печать)
//
Процедура ОбработатьНажатиеКартинки(СтандартнаяОбработка, ИмяЭлементаСКартинкой)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект[ИмяЭлементаСКартинкой]) Тогда
		
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаДляОткрытия(Объект[ИмяЭлементаСКартинкой], Неопределено, УникальныйИдентификатор);
		
		РаботаСФайламиКлиент.Открыть(ДанныеФайла);
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбора", Новый Структура("ВладелецФайла", Объект.Ссылка), Элементы[ИмяЭлементаСКартинкой]);
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Элемент справочника еще не записан.';uk='Елемент довідника ще не записаний.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ОбработатьНажатиеКартинки()

&НаСервереБезКонтекста
// Функция возвращает навигационую ссылку файла
//
Функция ПолучитьТекущуюВерсиюКартинки(ФайлКартинки)
	
	Возврат ФайлКартинки.ТекущаяВерсия;
	
КонецФункции // ПолучитьТекущуюВерсиюКАртинки()

&НаКлиенте
// Процедура отвечает за отображение/обновление соответствующей картинки
//
Процедура УстановитьКартинкуНаФорме(АктивныйАдрес, РеквизитОбъекта)
	
	ТекущийФайл = ПолучитьТекущуюВерсиюКартинки(РеквизитОбъекта);
	АктивныйАдрес = ?(ТекущийФайл.Пустая(), "", РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ТекущийФайл));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлФаксимильнаяПодписьПриИзменении(Элемент)
	УстановитьКартинкуНаФорме(АдресФаксимильнойПодписи, Объект.ФайлФаксимильнаяПодпись)
КонецПроцедуры

&НаКлиенте
Процедура ФайлФаксимильнаяПечатьПриИзменении(Элемент)
	УстановитьКартинкуНаФорме(АдресФаксимильнойПечати, Объект.ФайлФаксимильнаяПечать);
КонецПроцедуры

&НаКлиенте
Процедура ФайлЛоготипПриИзменении(Элемент)
	УстановитьКартинкуНаФорме(АдресЛоготипа, Объект.ФайлЛоготип);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

