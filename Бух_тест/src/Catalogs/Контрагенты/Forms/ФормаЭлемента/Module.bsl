////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
	
	Элементы.Вид.СписокВыбора.Добавить("ЮридическоеЛицо",
		Строка(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо));
	Элементы.Вид.СписокВыбора.Добавить("ФизическоеЛицо",
		Строка(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо));
	Элементы.Вид.СписокВыбора.Добавить("ОбособленноеПодразделение",
		НСтр("ru='Обособленное подразделение';uk='Відокремлений підрозділ'"));
		
	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Вид	= "ФизическоеЛицо";
	ИначеЕсли Объект.ОбособленноеПодразделение Тогда
		Вид	= "ОбособленноеПодразделение";
	Иначе
		Вид	= "ЮридическоеЛицо";
	КонецЕсли;
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		
	КоличествоБанковскихСчетов = Справочники.БанковскиеСчета.ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Объект.Ссылка);
	Элементы.ГруппаОсновнойБанковскийСчет.ТекущаяСтраница = ?(КоличествоБанковскихСчетов = 0,
		Элементы.ГруппаСоздатьБанковскийСчет,
		Элементы.ГруппаБанковскийСчет);

	КоличествоДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Объект.Ссылка);
	Элементы.ГруппаОсновнойДоговорКонтрагента.ТекущаяСтраница = ?(КоличествоДоговоров = 0,
		Элементы.ГруппаСоздатьДоговорКонтрагента,
		Элементы.ГруппаДоговорКонтрагента);
		
	КоличествоКонтактныхЛиц = Справочники.КонтактныеЛица.ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Объект.Ссылка);
	Элементы.ГруппаОсновноеКонтактноеЛицо.ТекущаяСтраница = ?(КоличествоКонтактныхЛиц = 0,
		Элементы.ГруппаСоздатьКонтактноеЛицо,
		Элементы.ГруппаКонтактноеЛицо);
		
	
	ОткрытИзПлатежки = Параметры.Свойство("ОткрытИзПлатежки");
	
	ОбновитьИнформациюОбОтветственныхЛицах();
	
	РазместитьКонтактнуюИнформацию();
	
	ПрочитатьСхемуНалогообложения();
	
	УправлениеФормой(ЭтаФорма);

	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ТекущийОбъект.ОбособленноеПодразделение Тогда
		ТекущийОбъект.ИНН	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ГоловнойКонтрагент, "ИНН");
	КонецЕсли;
	
	// Обработчик подсистемы "Контактная информация"
	УправлениеКонтактнойИнформациейБП.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		
		ОсновнаяОрганизация = Параметр;
		
	ИначеЕсли ИмяСобытия = "Запись_Контрагенты" Тогда
		
		Если Объект.Ссылка = Источник Тогда
			// Собственную запись специально не обрабатываем
			Возврат;
		КонецЕсли;
	
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка И Источник = Объект.ГоловнойКонтрагент Тогда
			ГоловнойКонтрагентПриИзмененииНаСервере();
			Модифицированность	= Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеОтветственныхЛицКонтрагентов" Тогда
		
		ОбновитьИнформациюОбответственныхЛицах();
	
	КонецЕсли;
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
			
			Объект.ОсновнойБанковскийСчет = НовыйОбъект;
			Элементы.ГруппаОсновнойБанковскийСчет.ТекущаяСтраница = Элементы.ГруппаБанковскийСчет;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ОсновнойДоговорКонтрагента) Тогда
			
			Объект.ОсновнойДоговорКонтрагента = НовыйОбъект;
			Элементы.ГруппаОсновнойДоговорКонтрагента.ТекущаяСтраница = Элементы.ГруппаДоговорКонтрагента;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ОсновноеКонтактноеЛицо) Тогда
			
			Объект.ОсновноеКонтактноеЛицо = НовыйОбъект;
			Элементы.ГруппаОсновноеКонтактноеЛицо.ТекущаяСтраница = Элементы.ГруппаКонтактноеЛицо;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Контрагенты", , Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьСхемуНалогообложения(ТекущийОбъект.Ссылка, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидПриИзменении(Элемент)
	
	Если Вид = "ФизическоеЛицо" Тогда
		Объект.ЮридическоеФизическоеЛицо	= ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
		Объект.ОбособленноеПодразделение	= Ложь;
		Объект.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН	= Ложь;
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент	= Объект.Ссылка;
		КонецЕсли;
	ИначеЕсли Вид = "ОбособленноеПодразделение" Тогда
		Объект.ЮридическоеФизическоеЛицо		= ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
		Объект.ДокументУдостоверяющийЛичность	= "";
		Объект.ОбособленноеПодразделение		= Истина;
		Если Объект.ГоловнойКонтрагент = Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент	= Неопределено;
		КонецЕсли;
	Иначе
		Объект.ЮридическоеФизическоеЛицо		= ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
		Объект.ДокументУдостоверяющийЛичность	= "";
		Объект.ОбособленноеПодразделение		= Ложь;
		Объект.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН	= Ложь;
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент	= Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)

	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Список = Новый СписокЗначений();
	Список.Добавить(Объект.Наименование);

	Оповещение = Новый ОписаниеОповещения("НаименованиеПолноеНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, Список, Элементы.НаименованиеПолное);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.НаименованиеПолное = Результат.Значение;
		Модифицированность = Истина;
		ФормироватьНаименованиеПолноеАвтоматически = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	ГоловнойКонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура("Владелец", Объект.Ссылка);
	Если ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
		ПараметрыОтбора.Вставить("Организация", ОсновнаяОрганизация);
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Отбор, МножественныйВыбор", ПараметрыОтбора, Ложь);
	
	Если ОткрытИзПлатежки Тогда
		ПараметрыФормы.Вставить("ОткрытИзПлатежки");
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОсновнойДоговорКонтрагентаНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Объект.ОсновнойДоговорКонтрагента,,,, ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ОсновнойДоговорКонтрагентаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.ОсновнойДоговорКонтрагента = Результат;
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрАдресКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
	
	ИсходныйЮрАдресКонтрагента	= ЮрАдресКонтрагента;
	
	УправлениеКонтактнойИнформациейКлиентБП.ГиперссылкаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
	Если НЕ ИсходныйЮрАдресКонтрагента = ЮрАдресКонтрагента Тогда
	
		ПриИзмененииЮрАдресаКонтрагента();
	
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактАдресКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиентБП.ГиперссылкаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
	ПриИзмененииФактАдресаКонтрагента();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФактАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрФактАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации("ФактАдресКонтрагента", "ЮрАдресКонтрагента");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрПочтовыйАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрПочтовыйАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации("ПочтовыйАдресКонтрагента", "ЮрАдресКонтрагента");
		
		Если ПочтовыйАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			ПочтовыйАдресКонтрагента = "";
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРуководителяНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.Руководитель");
	
	ЗначенияЗаполнения	= Новый Структура("Контрагент,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					РуководительКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаКонтрагентов.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеГлавногоБухгалтераНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер");
	
	ЗначенияЗаполнения	= Новый Структура("Контрагент,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					ГлавныйБухгалтерКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаКонтрагентов.ФормаЗаписи", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКассираНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.Кассир");
	
	ЗначенияЗаполнения	= Новый Структура("Контрагент,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					КассирКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаКонтрагентов.ФормаЗаписи", ПараметрыФормы);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СоздатьБанковскийСчет(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("Владелец", Объект.Ссылка));
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговор(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("Владелец, Организация", Объект.Ссылка, ОсновнаяОрганизация));
	
	Если ОткрытИзПлатежки Тогда
		СтруктураПараметров.Вставить("ОткрытИзПлатежки");
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактноеЛицо(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("ОбъектВладелец", Объект.Ссылка));
	ОткрытьФорму("Справочник.КонтактныеЛица.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеБанковскиеСчета(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор			= Новый Структура("Владелец", Объект.Ссылка);
	ПараметрыФормы	= Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеДоговоры(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Владелец", Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
		Отбор.Вставить("Организация", ОсновнаяОрганизация);
	КонецЕсли;
	
	ПараметрыФормы	= Новый Структура("Отбор", Отбор);
	
	Если ОткрытИзПлатежки Тогда
		ПараметрыФормы.Вставить("ОткрытИзПлатежки");
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаСписка", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВсеКонтактныеЛица(Команда)

	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор			= Новый Структура("ОбъектВладелец", Объект.Ссылка);
	ПараметрыФормы	= Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Справочник.КонтактныеЛица.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры


&НаСервере
Процедура ПрочитатьСхемуНалогообложения()
	
	ТаблицаСхемыНалогообложенияКонтрагентов = РегистрыСведений.СхемыНалогообложенияКонтрагентов.СрезПоследних(ТекущаяДата(), Новый Структура("Контрагент", Объект.Ссылка));
	Если ТаблицаСхемыНалогообложенияКонтрагентов.Количество()>0 Тогда
		СхемаНалогообложения = ТаблицаСхемыНалогообложенияКонтрагентов[0].СхемаНалогообложения;
	КонецЕсли;

	

КонецПроцедуры

&НаСервере
// Процедура записывает данные об Ответственном лице.
//
// Параметры:
//  Отказ - в параметр записывается Истина при неудачной записи.
//
Процедура ЗаписатьСхемуНалогообложения(СсылкаНаОбъект, Отказ)

	Отбор = Новый Структура("Контрагент");
	Отбор.Контрагент = СсылкаНаОбъект;
	СрезПоследних = РегистрыСведений.СхемыНалогообложенияКонтрагентов.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		Если НЕ ЗначениеЗаполнено(СхемаНалогообложения) Тогда
			Возврат;
		Иначе
			ПериодЗаписи = '19800101';
		КонецЕсли;
	Иначе
		Если СхемаНалогообложения = СрезПоследних[0].СхемаНалогообложения Тогда
			Возврат;
		Иначе
			ПериодЗаписи = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.СхемыНалогообложенияКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ПериодЗаписи);
	НаборЗаписей.Отбор.Контрагент.Установить(СсылкаНаОбъект);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период 				= ПериодЗаписи;
	Запись.Контрагент 			= СсылкаНаОбъект;
	Запись.СхемаНалогообложения = СхемаНалогообложения;
	
	// При программном создании записи в РС "СхемыНалогообложенияКонтрагентов" будем записывать без проверки на дату запрета редактирования
	НаборЗаписей.ОбменДанными.Загрузка = Истина;	

	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru='Не удалось записать данные о схеме налогообложения :';uk='Не вдається записати дані про схему оподаткування :'") + " " + ОписаниеОшибки.Описание;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект", Отказ);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);	
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ВсеОтветственныеЛица(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
		
	Отбор			= Новый Структура("Контрагент", Объект.Ссылка);
	ПараметрыФормы	= Новый Структура("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаКонтрагентов.ФормаСписка", ПараметрыФормы);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		Элементы.ГруппаСтраницыЮрФизЛицо.ТекущаяСтраница	= Элементы.ГруппаФизЛицо;
	Иначе
		
		Элементы.ГруппаСтраницыЮрФизЛицо.ТекущаяСтраница	= Элементы.ГруппаЮрЛицо;
		
		Если Объект.ОбособленноеПодразделение Тогда
			Элементы.СтраницыКодПоЕДРПОУГоловнойКонтрагент.ТекущаяСтраница	= Элементы.СтраницаГоловнойКонтрагент;
		Иначе
			Элементы.СтраницыКодПоЕДРПОУГоловнойКонтрагент.ТекущаяСтраница	= Элементы.СтраницаКодПоЕДРПОУ;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаДополнятьНаименованиеАдресДаннымиГоловногоКонтрагента.Видимость = Объект.ОбособленноеПодразделение;
	Элементы.НомерСвидетельства.Видимость = ЗначениеЗаполнено(Объект.НомерСвидетельства);
	
	// Закладка Адреса, телефоны
	Если Форма.ЮрФактАдресаСовпадают Тогда
		Элементы.ГруппаФактАдресКонтрагента.ТекущаяСтраница	= Элементы.СтраницаФактАдресКонтрагентаСовпадает;
	Иначе
		Элементы.ГруппаФактАдресКонтрагента.ТекущаяСтраница	= Элементы.СтраницаФактАдресКонтрагента;
	КонецЕсли;
	
	Если Форма.ЮрПочтовыйАдресаСовпадают Тогда
		Элементы.ГруппаПочтовыйАдресКонтрагента.ТекущаяСтраница	= Элементы.СтраницаПочтовыйАдресКонтрагентаСовпадает;
	Иначе
		Элементы.ГруппаПочтовыйАдресКонтрагента.ТекущаяСтраница	= Элементы.СтраницаПочтовыйАдресКонтрагента;
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.ФактАдресКонтрагента)
		ИЛИ Форма.ФактАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			Форма.ФактАдресКонтрагентаСовпадает = НСтр("ru='<не заполнен>';uk='<не заповнений>'");
	Иначе
		Форма.ФактАдресКонтрагентаСовпадает = Форма.ФактАдресКонтрагента;	
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.ПочтовыйАдресКонтрагента)
		ИЛИ Форма.ПочтовыйАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			Форма.ПочтовыйАдресКонтрагентаСовпадает = НСтр("ru='<не заполнен>';uk='<не заповнений>'");
	Иначе
		Форма.ПочтовыйАдресКонтрагентаСовпадает = Форма.ПочтовыйАдресКонтрагента;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ГоловнойКонтрагентПриИзмененииНаСервере()
	
	Объект.КодПоЕДРПОУ	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ГоловнойКонтрагент, "КодПоЕДРПОУ");
	
КонецПроцедуры

&НаСервере
Процедура РазместитьКонтактнуюИнформацию()

	ТаблицаРазмещенияКИ	= УправлениеКонтактнойИнформациейБП.ПолучитьПустуюТаблицуРазмещенияКонтактнойИнформации();
	
	// Обработчик подсистемы "Контактная информация" для закладки "ГруппаКонтактнаяИнформация"
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Элементы.ЮрАдресКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, Элементы.ФактАдресКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, Элементы.ПочтовыйАдресКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, Элементы.ТелефонКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты, Элементы.ФаксКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты, Элементы.EmailКонтрагента.ПутьКДанным);
	
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты, Элементы.ДругаяИнформацияКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация", "", ТаблицаРазмещенияКИ);
	
	// Добавление непредопределенной контактной информации
	ИсключаемыеВидыКИ	= Новый Массив;
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты);
	
	УправлениеКонтактнойИнформациейБП.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация", "", , ИсключаемыеВидыКИ);
	
	ЮрФактАдресаСовпадают		= СокрЛП(ЮрАдресКонтрагента) = СокрЛП(ФактАдресКонтрагента);
	ЮрПочтовыйАдресаСовпадают	= СокрЛП(ЮрАдресКонтрагента) = СокрЛП(ПочтовыйАдресКонтрагента)
		ИЛИ СокрЛП(?(ЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки(),
		"", ЮрАдресКонтрагента)) = СокрЛП(ПочтовыйАдресКонтрагента);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЮрАдресаКонтрагента()

	Если ЮрФактАдресаСовпадают ИЛИ ПустаяСтрока(ФактАдресКонтрагента) Тогда
		СкопироватьПолеКонтактнойИнформации("ФактАдресКонтрагента", "ЮрАдресКонтрагента");
	КонецЕсли;
	
	Если ЮрПочтовыйАдресаСовпадают ИЛИ ПустаяСтрока(ПочтовыйАдресКонтрагента) Тогда
		СкопироватьПолеКонтактнойИнформации("ПочтовыйАдресКонтрагента", "ЮрАдресКонтрагента");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФактАдресаКонтрагента()

	ЮрФактАдресаСовпадают = СокрЛП(ЮрАдресКонтрагента) = СокрЛП(ФактАдресКонтрагента);
	ЮрПочтовыйАдресаСовпадают = СокрЛП(ЮрАдресКонтрагента) = СокрЛП(ПочтовыйАдресКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПолеКонтактнойИнформации(ИмяПриемника, ИмяИсточника)

	Модифицированность		= Истина;
	ЭтаФорма[ИмяПриемника]	= ЭтаФорма[ИмяИсточника];
	
	ИмяОписания	= "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Отбор.ИмяРеквизита	= ИмяИсточника;
	ДанныеИсточника	= ЭтаФорма[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор.ИмяРеквизита	= ИмяПриемника;
	ДанныеПриемника	= ЭтаФорма[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеПриемника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеИсточника[0].Тип = ДанныеПриемника[0].Тип Тогда
		Возврат
	КонецЕсли;
	
	ЗначенияПолейИсточника = ДанныеИсточника[0].ЗначенияПолей;
	Если ТипЗнч(ЗначенияПолейИсточника)=Тип("Строка") Тогда
		ДанныеПриемника[0].ЗначенияПолей = ЗначенияПолейИсточника;
	Иначе
		ДанныеПриемника[0].ЗначенияПолей = ЗначенияПолейИсточника.Скопировать();
	КонецЕсли;
	ДанныеПриемника[0].Представление = ДанныеИсточника[0].Представление;
	ДанныеПриемника[0].Комментарий = ДанныеИсточника[0].Комментарий;
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаСервере
Функция ЗаписатьЭлементСправочника()
	
	Возврат Записать();
	
КонецФункции	

&НаКлиенте
Процедура ИсторияСхемНалогообложения(Команда)
	
    Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Вопрос = "Перед просмотром истории необходимо записать элемент. Записать?";
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ИсторияСхемНалогообложенияЗавершение", ЭтотОбъект), Вопрос, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;

	ИсторияСхемНалогообложенияОткрытьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСхемНалогообложенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ  = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.ОК Тогда
        Если ЗаписатьЭлементСправочника() Тогда
		    ИсторияСхемНалогообложенияОткрытьФорму();
		КонецЕсли;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсторияСхемНалогообложенияОткрытьФорму()
    
    Перем ПараметрыФормы;

    ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Контрагент", Объект.Ссылка));
    ОткрытьФорму("РегистрСведений.СхемыНалогообложенияКонтрагентов.ФормаСписка", ПараметрыФормы, ЭтаФорма, Истина, ЭтаФорма.Окно);

КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияКонтактнойИнформации(Результат) Экспорт
	
	Если Результат.ИмяРеквизита = "ЮрАдресКонтрагента" Тогда
		
		Если НЕ Результат.ЗначениеПоляДоИзменения = ЮрАдресКонтрагента Тогда
			
			ПриИзмененииЮрАдресаКонтрагента();
			
		КонецЕсли;
		
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли Результат.ИмяРеквизита = "ФактАдресКонтрагента" Тогда
		
		ПриИзмененииФактАдресаКонтрагента();
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "КОНТАКТНАЯ ИНФОРМАЦИЯ"

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, , СтандартнаяОбработка);
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка(ЭтаФорма, Элемент.Имя);
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда(ЭтаФорма, Команда.Имя);
	ОбновитьКонтактнуюИнформацию(Результат);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуВводаАдреса(ЭтаФорма, Результат);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьКонтактнуюИнформацию(Результат = Неопределено)
	
	Возврат УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтаФорма, Объект, Результат);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()

	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

&НаСервере
Процедура ОбновитьИнформациюОбОтветственныхЛицах()
	
	Руководитель		= НСтр("ru='Создать';uk='Створити'");
	ГлавныйБухгалтер	= НСтр("ru='Создать';uk='Створити'");
	Кассир				= НСтр("ru='Создать';uk='Створити'");
	
	РуководительКлючЗаписи		= РегистрыСведений.ОтветственныеЛицаКонтрагентов.ПустойКлюч();
	ГлавныйБухгалтерКлючЗаписи	= РегистрыСведений.ОтветственныеЛицаКонтрагентов.ПустойКлюч();
	КассирКлючЗаписи			= РегистрыСведений.ОтветственныеЛицаКонтрагентов.ПустойКлюч();
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент",	Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаКонтрагентовСрезПоследних.Период КАК Период,
	|	ОтветственныеЛицаКонтрагентовСрезПоследних.Контрагент КАК Контрагент,
	|	ОтветственныеЛицаКонтрагентовСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаКонтрагентовСрезПоследних.КонтактноеЛицо) КАК КонтактноеЛицо,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаКонтрагентовСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ТОГДА ""Руководитель""
	|		КОГДА ОтветственныеЛицаКонтрагентовСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			ТОГДА ""ГлавныйБухгалтер""
	|		КОГДА ОтветственныеЛицаКонтрагентовСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир)
	|			ТОГДА ""Кассир""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеОтветственногоЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаКонтрагентов.СрезПоследних КАК ОтветственныеЛицаКонтрагентовСрезПоследних
	|ГДЕ
	|	ОтветственныеЛицаКонтрагентовСрезПоследних.Контрагент = &Контрагент
	|	И (ОтветственныеЛицаКонтрагентовСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ИЛИ ОтветственныеЛицаКонтрагентовСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			ИЛИ ОтветственныеЛицаКонтрагентовСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир))";
	
	
	Отбор	= Новый Структура("Период, Контрагент, ОтветственноеЛицо");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПустаяСтрока(Выборка.ПредставлениеОтветственногоЛица) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормы	= ЭтаФорма.Элементы.Найти(Выборка.ПредставлениеОтветственногоЛица);
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма[Выборка.ПредставлениеОтветственногоЛица] = Выборка.КонтактноеЛицо;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		ЭтаФорма[Выборка.ПредставлениеОтветственногоЛица + "КлючЗаписи"]	= РегистрыСведений.ОтветственныеЛицаКонтрагентов.СоздатьКлючЗаписи(Отбор);
		
	КонецЦикла;
	
КонецПроцедуры
