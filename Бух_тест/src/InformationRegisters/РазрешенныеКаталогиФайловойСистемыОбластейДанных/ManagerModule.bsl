#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает XDTO-тип, описывающий разрешения типа, соответствующего элементу кэша.
//
// Возвращаемое значение - ТипОбъектаXDTO.
//
Функция ТипXDTOПредставленияРазрешений() Экспорт
	
	Возврат ФабрикаXDTO.Тип(РаботаВБезопасномРежимеСлужебный.ПакетXDTOПредставленийРазрешений(), "FileSystemAccess");
	
КонецФункции

// Формирует набор записей текущего регистра кэша из XDTO-представлений разрешения.
//
// Параметры:
//  БезопасныйРежим - ОпределяемыйТип.БезопасныйРежим,
//  Владелец - ЛюбаяСсылка,
//  XDTOПредставления - Массив(ОбъектXDTO).
//
// Возвращаемое значение - РегистрСведенийНаборЗаписей.
//
Функция НаборЗаписейИзXDTOПредставления(Знач XDTOПредставления, Знач БезопасныйРежим, Знач Владелец, Знач ДляУдаления) Экспорт
	
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.БезопасныйРежим.Установить(БезопасныйРежим);
	Набор.Отбор.Владелец.Установить(Владелец);
	
	Если ДляУдаления Тогда
		
		Возврат Набор;
		
	Иначе
		
		Таблица = Обработки.НастройкаРазрешенийНаИспользованиеВнешнихРесурсовВМоделиСервиса.ТаблицаРазрешений(СоздатьНаборЗаписей().Метаданные(), Истина);
		
		Для Каждого XDTOПредставление Из XDTOПредставления Цикл
			
			ПроверитьРазрешение(XDTOПредставление);
			
			Ключ = Новый Структура("БезопасныйРежим,Владелец,Адрес", БезопасныйРежим, Владелец, XDTOПредставление.Path);
			СтрокиПоКлючу = Таблица.НайтиСтроки(Ключ);
			
			Если СтрокиПоКлючу.Количество() = 0 Тогда
				Строка = Таблица.Добавить();
				Строка.БезопасныйРежим = БезопасныйРежим;
				Строка.Владелец = Владелец;
				Строка.Адрес = XDTOПредставление.Path;
				Строка.РазрешеноЧтениеДанных = XDTOПредставление.AllowedRead;
				Строка.РазрешенаЗаписьДанных = XDTOПредставление.AllowedWrite;
			ИначеЕсли СтрокиПоКлючу.Количество() = 1 Тогда
				Строка = СтрокиПоКлючу[0];
				Если XDTOПредставление.AllowedRead И Не Строка.РазрешеноЧтениеДанных Тогда
					Строка.РазрешеноЧтениеДанных = Истина;
				КонецЕсли;
				Если XDTOПредставление.AllowedWrite И Не Строка.РазрешенаЗаписьДанных Тогда
					Строка.РазрешенаЗаписьДанных = Истина;
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		КонецЦикла;
		
		Набор.Загрузить(Таблица);
		Возврат Набор;
		
	КонецЕсли;
	
КонецФункции

// Возвращает текст запроса для получения текущего среза разрешений по данному
//  элементу кэша.
//
// Возвращаемое значение - Строка, текст запроса.
//
Функция ЗапросТекущегоСреза() Экспорт
	
	Возврат
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РазрешенныеКаталогиФайловойСистемыОбластейДанных.Адрес КАК Адрес,
		|	РазрешенныеКаталогиФайловойСистемыОбластейДанных.РазрешеноЧтениеДанных КАК РазрешеноЧтениеДанных,
		|	РазрешенныеКаталогиФайловойСистемыОбластейДанных.РазрешенаЗаписьДанных КАК РазрешенаЗаписьДанных,
		|	РазрешенныеКаталогиФайловойСистемыОбластейДанных.ВнешнийМодуль КАК ВнешнийМодуль
		|ИЗ
		|	РегистрСведений.РазрешенныеКаталогиФайловойСистемыОбластейДанных КАК РазрешенныеКаталогиФайловойСистемыОбластейДанных";
	
КонецФункции

// Возвращает текст запроса для получения дельты измения разрешений по данному
//  элементу кэша.
//
// Возвращаемое значение - Строка, текст запроса.
//
Функция ЗапросПолученияДельты() Экспорт
	
	Возврат
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_До.Адрес,
		|	ВТ_До.РазрешеноЧтениеДанных,
		|	ВТ_До.РазрешенаЗаписьДанных,
		|	ВТ_До.ВнешнийМодуль
		|ИЗ
		|	ВТ_До КАК ВТ_До
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_После КАК ВТ_После
		|		ПО ВТ_До.ВнешнийМодуль = ВТ_После.ВнешнийМодуль
		|			И ВТ_До.Адрес = ВТ_После.Адрес
		|ГДЕ
		|	ВТ_После.Адрес ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_После.Адрес,
		|	ВТ_После.РазрешеноЧтениеДанных,
		|	ВТ_После.РазрешенаЗаписьДанных,
		|	ВТ_После.ВнешнийМодуль
		|ИЗ
		|	ВТ_После КАК ВТ_После
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_До КАК ВТ_До
		|		ПО ВТ_После.ВнешнийМодуль = ВТ_До.ВнешнийМодуль
		|			И ВТ_После.Адрес = ВТ_До.Адрес
		|ГДЕ
		|	ВТ_До.Адрес ЕСТЬ NULL ";
	
КонецФункции

// Проверяет разрешение на допустимость.
//
// Параметры:
//  Разрешение - ОбъектXDTO.
//
Процедура ПроверитьРазрешение(Разрешение) Экспорт
	
	Если РазрешенныеВиртуальныеКаталоги().Получить(НРег(Разрешение.Path)) = Неопределено Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Доступ к ресурсу файловой системы %1 не может быть запрошен у администратора области данных!';uk='Доступ до ресурсу файлової системи %1 не може бути запитаний у адміністратора області даних!'"),
			Разрешение.Path);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазрешенныеВиртуальныеКаталоги()
	
	Результат = Новый Соответствие();
	
	Результат.Вставить("/temp", "%t/%i/%s/%p");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли