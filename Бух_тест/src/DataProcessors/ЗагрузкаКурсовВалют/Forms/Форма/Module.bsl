// Флаг подтверждения, используется при не модальном закрытии
&НаКлиенте
Перем ПодтверждениеЗакрытияФормы;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ОткрытиеИзСписка") Тогда
		Если РаботаСКурсамиВалют.КурсыАктуальны() Тогда
			СообщитьЧтоКурсыАктуальны = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьВалюты();
	
	// Начало и окончание периода загрузки курсов.
	Объект.ОкончаниеПериодаЗагрузки = НачалоДня(ТекущаяДатаСеанса());
	Объект.НачалоПериодаЗагрузки = Объект.ОкончаниеПериодаЗагрузки;
	МинимальнаяДата = НачалоГода(Объект.ОкончаниеПериодаЗагрузки);
	Для Каждого Валюта Из Объект.СписокВалют Цикл
		Если ЗначениеЗаполнено(Валюта.ДатаКурса) И Валюта.ДатаКурса < Объект.НачалоПериодаЗагрузки Тогда
			Если Валюта.ДатаКурса < МинимальнаяДата Тогда
				Объект.НачалоПериодаЗагрузки = МинимальнаяДата;
				Прервать;
			КонецЕсли;
			Объект.НачалоПериодаЗагрузки = Валюта.ДатаКурса;
		КонецЕсли;
	КонецЦикла;
	
	ВосстановитьНастройки();
	
	Элементы.НадписьДата.Заголовок = Формат(ТекущаяДата(), "ДЛФ=ДД");
	
	УстановитьВидимость();
	
	Если НЕ Объект.ИсточникДанных Тогда // Интернет
		КодКорректен = КодДоступаКорректный();
		УстановитьВидимостьЭлементовКодаДоступа(КодКорректен);
	Иначе // Диск ИТС	
		УстановитьВидимостьЭлементовКодаДоступа(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если СообщитьЧтоКурсыАктуальны Тогда
		РаботаСКурсамиВалютКлиент.ОповеститьКурсыАктуальны();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПроверитьСписокЗагружаемыхВалют", 0.1, Истина);
КонецПроцедуры


&НаКлиенте
Процедура ИсточникДанныхПриИзменении(Элемент)
	
	УстановитьВидимость();
	
	Если НЕ Объект.ИсточникДанных Тогда // Интернет
		КодКорректен = КодДоступаКорректный();
		УстановитьВидимостьЭлементовКодаДоступа(КодКорректен);
	Иначе // Диск ИТС	
		УстановитьВидимостьЭлементовКодаДоступа(Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КодДоступаПриИзменении(Элемент)
	
	КодКорректен = КодДоступаКорректный();
	
	УстановитьВидимостьЭлементовКодаДоступа(КодКорректен);
	
	Если НЕ КодКорректен И НЕ ПустаяСтрока(Объект.КодДоступа) Тогда
		Сообщить(НСтр("ru='Введен некорректный код доступа!';uk='Введено некоректний код доступу!'"));
		Сообщить(НСтр("ru='Попробуйте ввести код еще раз.';uk='Спробуйте ввести код ще раз.'"));
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СписокВалют

&НаКлиенте
Процедура СписокВалютПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ПереключитьЗагрузку();
КонецПроцедуры

&НаКлиенте
Процедура СписокВалютВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПереключитьЗагрузку();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗагрузитьКурсыВалют()
	
	
	
	// Загрузка курсов
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.НачалоПериодаЗагрузки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не задана дата начала периода загрузки.';uk='Не задана дата початку періоду завантаження.'"),
			,
			"Объект.НачалоПериодаЗагрузки");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ОкончаниеПериодаЗагрузки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не задана дата окончания периода загрузки.';uk='Не задана дата закінчення періоду завантаження.'"),
			,
			"Объект.ОкончаниеПериодаЗагрузки");
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Загружаются курсы валют...';uk='Завантажуються курси валют...'"));
	РезультатЗагрузки = ЗагрузитьКурсыСФинансУа();
	
	Если РезультатЗагрузки <> Неопределено Тогда
		ПараметрыЗаписи = Неопределено;
		МассивОбновляемыхВалют = Новый Массив;
		Для Каждого СтрокаТаблицы Из Объект.СписокВалют Цикл
			МассивОбновляемыхВалют.Добавить(СтрокаТаблицы.Валюта);
		КонецЦикла;
		Оповестить("Запись_ЗагрузкаКурсовВалют", ПараметрыЗаписи, МассивОбновляемыхВалют);
		
		РаботаСКурсамиВалютКлиент.ОповеститьКурсыУспешноОбновлены();
		
		Если РезультатЗагрузки = Истина Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеВалюты(Команда)
	УстановитьВыбор(Истина);
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыбор(Команда)
	УстановитьВыбор(Ложь);
	УстановитьДоступностьЭлементов();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура УстановитьВыбор(Выбор)
	Для Каждого Валюта Из Объект.СписокВалют Цикл
		Валюта.Загружать = Выбор;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЗагрузитьКурсыСФинансУа()
	// Истина - Все успешно загружены.
	// Ложь - Часть загружена.
	// Неопределено - Ни один не загружен.
	
	СписокВалют = Объект.СписокВалют.Выгрузить(, "КодВалюты,Валюта,Загружать").НайтиСтроки(Новый Структура("Загружать", Истина));
	
	Результат = РаботаСКурсамиВалютКлиентСервер.ЗагрузитьКурсыВалютПоПараметрам(
		СписокВалют,
		Объект.НачалоПериодаЗагрузки,
		Объект.ОкончаниеПериодаЗагрузки,
		Объект.ИсточникДанных,
		Объект.КодДоступа,
		Объект.БукваДиска
		);
	
	ЕстьУспешноЗагруженныеКурсы = Ложь;
	БезОшибок = Истина;
	
	Для Каждого СостояниеЗагрузки Из Результат Цикл
		Если СостояниеЗагрузки.СтатусОперации Тогда
			ЕстьУспешноЗагруженныеКурсы = Истина;
		Иначе
			БезОшибок = Ложь;
			Индекс = Объект.СписокВалют.Индекс(Объект.СписокВалют.НайтиСтроки(Новый Структура("Валюта", СостояниеЗагрузки.Валюта))[0]);
			ИмяПоля = СтрЗаменить("СписокВалют[x].Валюта", "x", Строка(Индекс));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СостояниеЗагрузки.Сообщение,, ИмяПоля, "Объект");
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьУспешноЗагруженныеКурсы Тогда
		ОбновитьСведенияВСпискеВалют();
	КонецЕсли;
	
	Возврат ?(ЕстьУспешноЗагруженныеКурсы, БезОшибок, Неопределено);
КонецФункции

&НаСервере
Процедура ЗаполнитьВалюты()
	
	Актуален = РеквизитФормыВЗначение("Объект").КодДоступаАктуален();
	
	// Заполнение табличной части списком валют, курс которых не зависит от курса других валют
	ОкончаниеПериодаЗагрузки = Объект.ОкончаниеПериодаЗагрузки;
	СписокВалют = Объект.СписокВалют;
	СписокВалют.Очистить();
	
	ЗагружаемыеВалюты = РаботаСКурсамиВалют.ПолучитьМассивЗагружаемыхВалют();
	
	Для Каждого ЭлементВалюта Из ЗагружаемыеВалюты Цикл
		ДобавитьВалютуВСписок(ЭлементВалюта);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВалютуВСписок(Валюта)
	
	// Добавление записи в список валют
	НоваяСтрока = Объект.СписокВалют.Добавить();
	
	// Заполнение информации о курсе на основе ссылки валюты
	ЗаполнитьДанныеСтрокиТаблицыНаОсновеВалюты(НоваяСтрока, Валюта);
	
	НоваяСтрока.Загружать = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияВСпискеВалют()
	
	// Обновление записей о курсах валют в списке.
	
	Для Каждого СтрокаДанных Из Объект.СписокВалют Цикл
		СсылкаНаВалюту = СтрокаДанных.Валюта;
		ЗаполнитьДанныеСтрокиТаблицыНаОсновеВалюты(СтрокаДанных, СсылкаНаВалюту);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтрокиТаблицыНаОсновеВалюты(СтрокаТаблицы, Валюта);
	
	СведенияОВалюте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Валюта, "НаименованиеПолное,Код,Наименование");
	
	СтрокаТаблицы.Валюта = Валюта;
	СтрокаТаблицы.ЦифровойКод = СведенияОВалюте.Код;
	СтрокаТаблицы.КодВалюты = СведенияОВалюте.Код;
	СтрокаТаблицы.СимвольныйКод = СведенияОВалюте.Наименование;
	СтрокаТаблицы.Представление = СведенияОВалюте.НаименованиеПолное;
	
	ДанныеКурса = РаботаСКурсамиВалют.ЗаполнитьДанныеКурсаДляВалюты(Валюта);
	
	Если ТипЗнч(ДанныеКурса) = Тип ("Структура") Тогда
		СтрокаТаблицы.ДатаКурса = ДанныеКурса.ДатаКурса;
		СтрокаТаблицы.Курс      = ДанныеКурса.Курс;
		СтрокаТаблицы.Кратность = ДанныеКурса.Кратность;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСписокЗагружаемыхВалют()
	Если Объект.СписокВалют.Количество() = 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьСписокЗагружаемыхВалютЗавершение", ЭтотОбъект);
		ТекстПредупреждения = НСтр("ru='В справочнике валют отсутствуют валюты, курсы которых можно загружать из сети Интернет.';uk='У довіднику валют відсутні валюти, курси яких можна завантажувати з мережі Інтернет.'");
		ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСписокЗагружаемыхВалютЗавершение(ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	ЕстьВыбранныеВалюты = Объект.СписокВалют.НайтиСтроки(Новый Структура("Загружать", Истина)).Количество() > 0;
	Элементы.ФормаЗагрузитьКурсыВалют.Доступность = ЕстьВыбранныеВалюты;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьЗагрузкуКурсаВыбраннойВалютыИзИнтернета(Команда)
	ТекущиеДанные = Элементы.СписокВалют.ТекущиеДанные;
	СнятьПризнакЗагрузкиИзИнтернета(ТекущиеДанные.Валюта);
	Объект.СписокВалют.Удалить(ТекущиеДанные);
КонецПроцедуры

&НаСервере
Процедура СнятьПризнакЗагрузкиИзИнтернета(ВалютаСсылка)
	ВалютаОбъект = ВалютаСсылка.ПолучитьОбъект();
	ВалютаОбъект.ЗагружаетсяИзИнтернета = Ложь;
	ВалютаОбъект.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьЗагрузку()
	Элементы.СписокВалют.ТекущиеДанные.Загружать = Не Элементы.СписокВалют.ТекущиеДанные.Загружать;
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСайтФинансУа() Экспорт
	ЗапуститьПриложение("http://1c.finance.ua");
КонецПроцедуры

&НаКлиенте
Процедура ПолеКартинкиФинансУаНажатие(Элемент)
	ОткрытьСайтФинансУа();
КонецПроцедуры

&НаКлиенте
Процедура НадписьПолучитьКодНажатие(Элемент)
	ОткрытьСайтФинансУа();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	Элементы.БукваДиска.Видимость = (Объект.ИсточникДанных = Истина); // ИсточникДанных = Диск ИТС
	Элементы.КодДоступа.Видимость = (Объект.ИсточникДанных = Ложь); // ИсточникДанных = Интернет
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовКодаДоступа(КодКорректен = Истина)

	Элементы.НадписьПояснение.Видимость = НЕ КодКорректен;
	Элементы.НадписьПолучитьКод.Видимость = НЕ КодКорректен;	
	Элементы.ГруппаЗаДень.Видимость = НЕ КодКорректен;
	Элементы.ГруппаЗаПериод.Видимость = КодКорректен;
	
КонецПроцедуры

&НаСервере
Функция КодДоступаКорректный()

	КодКорректен = Истина;
	
	КодДоступа = Объект.КодДоступа;
	
	Если НЕ ПустаяСтрока(КодДоступа) Тогда
	
		Если НЕ (СтрДлина(СокрЛП(КодДоступа)) = 32) Тогда
			КодКорректен = Ложь;
		Иначе
			Для ном=0 По СтрДлина(КодДоступа)-1 Цикл
				Символ = Сред(КодДоступа,ном,1);
				Если  Символ <> "a" И Символ <> "b" И Символ <> "c" И Символ <> "d" И Символ <> "e" И Символ <> "f"
					И Символ <> "0" И Символ <> "1" И Символ <> "2" И Символ <> "3" И Символ <> "4" И Символ <> "5"
					И Символ <> "6" И Символ <> "7" И Символ <> "8" И Символ <> "9" Тогда
						КодКорректен = Ложь;
						Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе	
		
	    КодКорректен = Ложь;
		
	КонецЕсли; 
	
	Если НЕ КодКорректен Тогда
		Объект.НачалоПериодаЗагрузки = НачалоДня(ТекущаяДата());
		Объект.ОкончаниеПериодаЗагрузки = НачалоДня(ТекущаяДата());
	КонецЕсли;	
	
	Возврат КодКорректен;
	
КонецФункции

Процедура СохранитьНастройки()
	
	Настройки = Новый Структура("ИсточникДанных, КодДоступа, БукваДиска");
	
	Настройки.Вставить("ИсточникДанных", 	Объект.ИсточникДанных); // Интернет
	Настройки.Вставить("КодДоступа", 		Объект.КодДоступа);
	Настройки.Вставить("БукваДиска", 		Объект.БукваДиска);
	
	ХранилищеНастроек = Новый ХранилищеЗначения(Настройки);
	Попытка
		Константы.НастройкиЗагрузкиКурсовВалют.Установить(ХранилищеНастроек);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ВосстановитьНастройки()
	
	Попытка
		
		ЗначениеКонстанты = Константы.НастройкиЗагрузкиКурсовВалют.Получить();
		
		Если ТипЗнч(ЗначениеКонстанты.Получить()) = Тип("Структура") Тогда
			
			Настройки = ЗначениеКонстанты.Получить();
			
			Объект.ИсточникДанных 	= Настройки.ИсточникДанных;
			Объект.КодДоступа 		= Настройки.КодДоступа;
			Объект.БукваДиска 		= Настройки.БукваДиска;
			
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ПодтверждениеЗакрытияФормы <> Истина Тогда
		Отказ = Истина;
		НастройкиИзменилисьИСохранить();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиИзменилисьИСохранить()
		
	Если НастройкиИзменились() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиИзменилисьИСохранитьЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Изменились настройки загрузки. Сохранить измененные настройки?';uk='Змінилися настройки завантаження. Зберегти змінені настройки?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе 
		
		ПодтверждениеЗакрытияФормы = Истина;
		Закрыть();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиИзменилисьИСохранитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьНастройки();
	КонецЕсли;
	ПодтверждениеЗакрытияФормы = Истина;
	Закрыть();
КонецПроцедуры

&НаСервере
Функция НастройкиИзменились()
	
	ТекущиеНастройки = Константы.НастройкиЗагрузкиКурсовВалют.Получить();
	Если ТипЗнч(ТекущиеНастройки.Получить()) = Тип("Структура") Тогда
		ТекущиеНастройки = ТекущиеНастройки.Получить();
	КонецЕсли;
	
	ЕстьРазличия = Истина;
	Пока Истина Цикл
	
		Если НЕ ТипЗнч(ТекущиеНастройки) = Тип("Структура") Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ Объект.ИсточникДанных = ТекущиеНастройки.ИсточникДанных Тогда
			Прервать;
		КонецЕсли;
		Если НЕ Объект.КодДоступа = ТекущиеНастройки.КодДоступа Тогда
			Прервать;
		КонецЕсли;
		Если НЕ Объект.БукваДиска = ТекущиеНастройки.БукваДиска Тогда
			Прервать;
		КонецЕсли;
		
		ЕстьРазличия = Ложь;
		Прервать;
	КонецЦикла;
	
	Возврат ЕстьРазличия;
КонецФункции


