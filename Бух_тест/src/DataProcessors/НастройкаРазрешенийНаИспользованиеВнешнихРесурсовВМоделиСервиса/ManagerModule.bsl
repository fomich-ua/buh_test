#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Сериализует запросы на использование внешних ресурсов для отправки в менеджер сервиса при
// включении использования для информационной базы профилей юезопасности.
//
// Параметры:
//  ИдентификаторыЗапросов - Массив(УникальныйИдентификатор) - идентификаторы запросов.
//
// Возвращаемое значение - ОбъектXDTO {http://www.1c.ru/1cFresh/Application/Permissions/Management/a.b.c.d}PermissionsRequestsList.
//
Функция СериализоватьЗапросыНаИспользованиеВнешнихРесурсовПриВключенииПрофилейЮезопасности() Экспорт
	
	ВызовПриОтключенныхПрофилях = Не Константы.АвтоматическиНастраиватьРазрешенияВПрофиляхБезопасности.Получить();
	
	Если ВызовПриОтключенныхПрофилях Тогда
		
		НачатьТранзакцию();
		
		Константы.ИспользуютсяПрофилиБезопасности.Установить(Истина);
		Константы.АвтоматическиНастраиватьРазрешенияВПрофиляхБезопасности.Установить(Истина);
		
		ИдентификаторыЗапросов = РаботаВБезопасномРежимеСлужебный.ЗапросыНаОбновлениеРазрешенийКонфигурации();
		СериализацияЗапросов = СериализоватьЗапросыДляОбработкиСВосстановлением(ИдентификаторыЗапросов);
		
	КонецЕсли;
	
	Результат = СериализоватьЗапросыНаИспользованиеВнешнихРесурсов(ИдентификаторыЗапросов);
	
	Если ВызовПриОтключенныхПрофилях Тогда
		
		ОтменитьТранзакцию();
		ДесериализоватьЗапросыДляОбработкиСВосстановлением(СериализацияЗапросов);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сериализует запросы на использование внешних ресурсов для отправки в менеджер сервиса.
//
// Параметры:
//  ИдентификаторыЗапросов - Массив(УникальныйИдентификатор) - идентификаторы запросов.
//
// Возвращаемое значение - ОбъектXDTO {http://www.1c.ru/1cFresh/Application/Permissions/Management/a.b.c.d}PermissionsRequestsList.
//
Функция СериализоватьЗапросыНаИспользованиеВнешнихРесурсов(Знач ИдентификаторыЗапросов) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Конверт = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПакетАдминистрированиеРазрешений(), "PermissionsRequestsList"));
		
		Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных.Идентификатор,
				|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных.ВнешнийМодуль,
				|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных.Владелец,
				|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных.РежимЗамещения,
				|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных.ДобавляемыеРазрешения,
				|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных.УдаляемыеРазрешения
				|ИЗ
				|	РегистрСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных КАК ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных
				|ГДЕ
				|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных.Идентификатор В(&Идентификаторы)";
			
		Иначе
			
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.Идентификатор,
				|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.Владелец,
				|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.РежимЗамещения,
				|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.ДобавляемыеРазрешения,
				|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.УдаляемыеРазрешения
				|ИЗ
				|	РегистрСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов КАК ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов
				|ГДЕ
				|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.Идентификатор В(&Идентификаторы)";
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Идентификаторы", ИдентификаторыЗапросов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗапросРазрешений = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПакетАдминистрированиеРазрешений(), "PermissionsRequest"));
			
			ЗапросРазрешений.UUID = Выборка.Идентификатор;
			
			СтандартнаяОбработка = Истина;
			ВладелецРазрешений = Неопределено;
			
			Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
				
				МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
				МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриСериализацииВладельцаРазрешенийНаИспользованиеВнешнихРесурсов(Выборка.Владелец, СтандартнаяОбработка, ВладелецРазрешений);
				
			КонецЕсли;
			
			Если СтандартнаяОбработка Тогда
				
				Если Выборка.Владелец = РаботаВБезопасномРежимеСлужебныйПовтИсп.СлужебныйИОМ() Тогда
					ВладелецРазрешений = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПакетАдминистрированиеРазрешений(), "PermissionsOwnerApplication"));
				Иначе
					
					ВладелецРазрешений = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПакетАдминистрированиеРазрешений(), "PermissionsOwnerApplicationObject"));
					ВладелецРазрешений.Type = Выборка.Владелец.Метаданные().ПолноеИмя();
					ВладелецРазрешений.UUID = Выборка.Владелец.УникальныйИдентификатор();
					ВладелецРазрешений.Description = Строка(Выборка.Владелец);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЗапросРазрешений.Owner = ВладелецРазрешений;
			
			ДобавляемыеРазрешения = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПакетАдминистрированиеРазрешений(), "PermissionsList"));
			Если Не ПустаяСтрока(Выборка.ДобавляемыеРазрешения) Тогда
				МассивРазрешений = ОбщегоНазначения.ЗначениеИзСтрокиXML(Выборка.ДобавляемыеРазрешения);
				Для Каждого ЭлементМассива Из МассивРазрешений Цикл
					ДобавляемыеРазрешения.Permission.Добавить(ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(ЭлементМассива));
				КонецЦикла;
			КонецЕсли;
			ЗапросРазрешений.GrantPermissions = ДобавляемыеРазрешения;
			
			УдаляемыеРазрешения = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПакетАдминистрированиеРазрешений(), "PermissionsList"));
			Если Не ПустаяСтрока(Выборка.УдаляемыеРазрешения) Тогда
				МассивРазрешений = ОбщегоНазначения.ЗначениеИзСтрокиXML(Выборка.УдаляемыеРазрешения);
				Для Каждого ЭлементМассива Из МассивРазрешений Цикл
					УдаляемыеРазрешения.Permission.Добавить(ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(ЭлементМассива));
				КонецЦикла;
			КонецЕсли;
			ЗапросРазрешений.CancelPermissions = УдаляемыеРазрешения;
			
			ЗапросРазрешений.ReplaceOwnerPermissions = Выборка.РежимЗамещения;
			
			Конверт.Request.Добавить(ЗапросРазрешений);
			
		КонецЦикла;
		
		Возврат Конверт;
		
	Иначе
		
		ВызватьИсключение НСтр("ru='Операция не может быть выполнена!';uk='Операція не може бути виконана!'");
		
	КонецЕсли;
	
КонецФункции

// Возвращает результат обработки запросов разрешений на использование внешних ресурсов в менеджере сервиса.
// В возвращаемой таблице присутствуют только запросы, которые уже были обработаны менеджером сервиса.
//
// Параметры:
//  ИдентификаторыЗапросов - Массив(УникальныйИдентификатор) - идентификаторы запросов на использование
//    внешних ресурсов.
//
// Возвращаемое значение - ТаблицаЗначений:
//                           *  ИдентификаторЗапроса - УникальныйИдентификатор,
//                           *  РезультатОбработки - ПеречислениеСсылка.РезультатыОбработкиЗапросовНаИспользованиеВнешнихРесурсовВМоделиСервиса,
//                           *  ИнформацияОбОшибке - Строка.
//
Функция РезультатОбработкиЗапросовВУправляющемПриложении(Знач ИдентификаторыЗапросов) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	Результаты.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
				|	Результаты.РезультатОбработки КАК РезультатОбработки,
				|	Результаты.ИнформацияОбОшибке КАК ИнформацияОбОшибке
				|ИЗ
				|	РегистрСведений.РезультатыОбработкиРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных КАК Результаты
				|ГДЕ
				|	Результаты.ИдентификаторЗапроса В(&ИдентификаторыЗапросов)";
			
		Иначе
			
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	Результаты.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
				|	Результаты.РезультатОбработки КАК РезультатОбработки,
				|	Результаты.ИнформацияОбОшибке КАК ИнформацияОбОшибке
				|ИЗ
				|	РегистрСведений.РезультатыОбработкиРазрешенийНаИспользованиеВнешнихРесурсов КАК Результаты
				|ГДЕ
				|	Результаты.ИдентификаторЗапроса В(&ИдентификаторыЗапросов)";
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ИдентификаторыЗапросов", ИдентификаторыЗапросов);
		Возврат Запрос.Выполнить().Выгрузить();
		
	Иначе
		ВызватьИсключение НСтр("ru='Действие может быть выполнено только при включенном разделении по областям данных!';uk='Дія може бути виконана тільки при включеному розподілу по областях даних!'");
	КонецЕсли;
	
КонецФункции

// Вызывается при создании запроса на администрирование разрешений использования внешних ресурсов.
//
// Параметры:
//  ВнешнийМодуль - ЛюбаяСсылка,
//  Операция - ПеречислениеСсылка.ОперацииСПрофилямиБезопасности,
//  СтандартнаяОбработка - Булево, флаг выполнения стандартной обработки создания запроса на администрирование
//    использования внешних ресурсов.
//  Результат - УникальныйИдентификатор - идентификатор запроса (в том случае, если внутри обработчика
//    значение параметра СтандартнаяОбработка установлено в значение Ложь).
//
Процедура ПриЗапросеНаАдминистрированиеРазрешенийИспользованияВнешнихРесурсов(Знач ВнешнийМодуль, Знач Операция, СтандартнаяОбработка, Результат) Экспорт
	
	Если ВнешнийМодуль = РаботаВБезопасномРежимеСлужебныйПовтИсп.СлужебныйИОМ() Тогда
		
		СтандартнаяОбработка = Ложь;
		Результат = Новый УникальныйИдентификатор();
		
	Иначе
		
		Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Если ТребуетсяЗапросРазрешенийНаИспользованиеВнешнихРесурсов() Тогда
				
				//Если Не МонопольныйРежим() Тогда
				//	ФоновыеЗадания.Выполнить("РаботаВБезопасномРежимеСлужебный.РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
				//КонецЕсли;
				
				Менеджер = РегистрыСведений.ЗапросыАдминистрированияРазрешенийИспользованияВнешнихРесурсовОбластейДанных.СоздатьМенеджерЗаписи();
				Менеджер.Идентификатор = Новый УникальныйИдентификатор();
				Менеджер.ВнешнийМодуль = ВнешнийМодуль;
				Менеджер.Операция = Операция;
				Менеджер.МоментВремени = ТекущаяУниверсальнаяДата();
				Менеджер.Состояние = Перечисления.СостоянияЗапросовНаИспользованиеВнешнихРесурсов.Новый;
				
				Менеджер.Записать();
				
				Результат = Менеджер.Идентификатор;
				
			Иначе
				
				Результат = Новый УникальныйИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании запроса на использование внешних ресурсов.
//
// Параметры:
//  Владелец - ЛюбаяСсылка - владелец запрашиваемых разрешений на использование внешних ресурсов,
//  РежимЗамещения - Булево - флаг замещения ранее предоставленных разрешений по владельцу,
//  ДобавляемыеРазрешения - Массив(ОбъектXDTO) - массив добавляемых разрешений,
//  УдаляемыеРазрешения - Массив(ОбъектXDTO) - массив удаляемых разрешений,
//  СтандартнаяОбработка - Булево, флаг выполнения стандартной обработки создания запроса на использование
//    внешних ресурсов.
//  Результат - УникальныйИдентификатор - идентификатор запроса (в том случае, если внутри обработчика
//    значение параметра СтандартнаяОбработка установлено в значение Ложь).
//
Процедура ПриЗапросеРазрешенийНаИспользованиеВнешнихРесурсов(Знач Владелец, Знач РежимЗамещения, Знач ДобавляемыеРазрешения = Неопределено, Знач УдаляемыеРазрешения = Неопределено, СтандартнаяОбработка, Результат) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТребуетсяЗапросРазрешенийНаИспользованиеВнешнихРесурсов() Тогда
			
			//Если Не МонопольныйРежим() Тогда
			//	ФоновыеЗадания.Выполнить("РаботаВБезопасномРежимеСлужебный.РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
			//КонецЕсли;
			
			Запрос = РегистрыСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных.СоздатьМенеджерЗаписи();
			Запрос.Идентификатор = Новый УникальныйИдентификатор();
			Запрос.МоментВремени = ТекущаяУниверсальнаяДата();
			
			//Если РаботаВБезопасномРежиме.УстановленБезопасныйРежим() Тогда
			//	Запрос.БезопасныйРежим = БезопасныйРежим();
			//Иначе
			//	Запрос.БезопасныйРежим = Ложь;
			//КонецЕсли;
			
			Если Владелец = Неопределено Тогда
				Запрос = РаботаВБезопасномРежимеСлужебныйПовтИсп.СлужебныйИОМ();
			КонецЕсли;
			
			Запрос.Владелец = Владелец;
			
			Запрос.РежимЗамещения = РежимЗамещения;
			
			Если ДобавляемыеРазрешения <> Неопределено Тогда
				
				МассивРазрешений = Новый Массив();
				Для Каждого НовоеРазрешение Из ДобавляемыеРазрешения Цикл
					ПроверитьРазрешение(НовоеРазрешение);
					МассивРазрешений.Добавить(ОбщегоНазначения.ОбъектXDTOВСтрокуXML(НовоеРазрешение));
				КонецЦикла;
				
				Если МассивРазрешений.Количество() > 0 Тогда
					Запрос.ДобавляемыеРазрешения = ОбщегоНазначения.ЗначениеВСтрокуXML(МассивРазрешений);
				КонецЕсли;
				
			КонецЕсли;
			
			Если УдаляемыеРазрешения <> Неопределено Тогда
				
				МассивРазрешений = Новый Массив();
				Для Каждого ОтменяемоеРазрешение Из УдаляемыеРазрешения Цикл
					ПроверитьРазрешение(ОтменяемоеРазрешение);
					МассивРазрешений.Добавить(ОбщегоНазначения.ОбъектXDTOВСтрокуXML(ОтменяемоеРазрешение));
				КонецЦикла;
				
				Если МассивРазрешений.Количество() > 0 Тогда
					Запрос.УдаляемыеРазрешения = ОбщегоНазначения.ЗначениеВСтрокуXML(МассивРазрешений);
				КонецЕсли;
				
			КонецЕсли;
			
			Запрос.Записать();
			
			Результат = Запрос.Идентификатор;
			
		Иначе
			
			Результат = Новый УникальныйИдентификатор();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при применении запросов на использование внешних ресурсов.
//
// Параметры:
//  ИдентификаторыЗапросов - Массив(УникальныйИдентификатор) - массив идентификаторов запросов,
//  СтандартнаяОбработка - Булево, флаг выполнения стандартной обработки расчета дельты,
//
Процедура ПриПримененииЗапросовНаИспользованиеВнешнихРесурсов(Знач ИдентификаторыЗапросов, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		СтандартнаяОбработка = Ложь;
		ПрименитьЗапросы(ИдентификаторыЗапросов);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после обработки запросов на использование внешних ресурсов.
//
// Параметры:
//  ИдентификаторыЗапросов - Массив(УникальныйИдентификатор) - массив идентификаторов запросов,
//  РежимВосстановления - Булево, флаг вызова для запросов восстановления разрешений в кластере после
//    отказа от записи объектов, для которых требовались разрешения на использование внешних ресурсов,
//  СтандартнаяОбработка - Булево, флаг выполнения стандартной обработки,
//
Процедура ПослеОбработкиЗапросовНаИспользованиеВнешнихРесурсов(Знач ИдентификаторыЗапросов, Знач РежимВосстановления, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НачатьТранзакцию();
		
		Попытка
			
			Если РежимВосстановления Тогда
				Менеджеры = МенеджерыКэшаПредоставленныхРазрешений();
				Для Каждого Менеджер Из Менеджеры Цикл
					Набор = Менеджер.СоздатьНаборЗаписей();
					Набор.Записать(Истина);
				КонецЦикла;
			КонецЕсли;
			
			ПрименитьЗапросы(ИдентификаторыЗапросов);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую таблицы разрешений на использование внешних ресурсов.
//
// Вовзращаемое значение: Структура:
//                          * Ключ - Строка, имя XDTO-типа, описывающего тип разрешения,
//                          * Значение - ТаблицаЗначений, структура колонок совпадает с набором
//                              полей регистра сведений, который используется для хранения
//                              перечня предоставленных разрешений данного типа (см. МенеджерыРегистровРазрешений()).
//
Функция ТаблицыРазрешений() Экспорт
	
	Результат = Новый Структура();
	
	Менеджеры = МенеджерыКэшаПредоставленныхРазрешений();
	
	Для Каждого Менеджер Из Менеджеры Цикл
		
		МетаданныеРегистра = Менеджер.СоздатьНаборЗаписей().Метаданные();
		Таблица = ТаблицаРазрешений(МетаданныеРегистра);
		Результат.Вставить(Менеджер.ТипXDTOПредставленияРазрешений().Имя, Таблица);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу, подходящую для хранения перечня предоставленных разрешений определенного типа.
//
// Параметры:
//  МетаданныеРегистра - ОбъектМетаданных(РегистрСведений) - объект метаданных, соответствующий регистру
//    сведений, использующемуся для хранения перечня предоставленных разрешений определенного типа (см.
//    МенеджерыРегистровРазрешений()),
//  ИндексироватьИзмерения - Булево - флаг необходимости индексации колонок таблицы, соответствующих
//    измерениям регистра.
//
// Возвращаемое значение: ТаблицаЗначений, состав колонок которой соответствует составу полей регистра сведений,
//  использующегося для хранения перечня предоставленных разрешений определенного типа.
//
Функция ТаблицаРазрешений(Знач МетаданныеРегистра, Знач ИндексироватьИзмерения = Ложь) Экспорт
	
	Таблица = Новый ТаблицаЗначений();
	ПоляИндекса = Новый Массив();
	
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Таблица.Колонки.Добавить(Измерение.Имя, Измерение.Тип);
		Если ИндексироватьИзмерения Тогда
			ПоляИндекса.Добавить(Измерение.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		Таблица.Колонки.Добавить(Ресурс.Имя, Ресурс.Тип);
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		Таблица.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Если ПоляИндекса.Количество() > 0 Тогда
		Таблица.Индексы.Добавить(СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ПоляИндекса, ", "));
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Рассчитывает изменения в разрешениях на использование внешних ресурсов, которые должны
// быть внесены в настройки профилей безопасности при обработке запросов на использование
// внешних ресурсов.
//
// Параметры:
//  ИдентификаторыЗапросов - Массив(УникальныйИдентификатор) - идентификаторы запросов на
//    использование внешних ресурсов, для которых требуется получить изменения, которые должны
//    быть внесены в настройки профилей безопасности при применении разрешений.
//
// Возвращаемое значение: ТаблицаЗначений:
//                          * ВнешнийМодуль - ЛюбаяСсылка - ссылка на элемент справочника, соответствуюшая
//                              внешнему модулю, для которого выполняется запрос разрешений на использование
//                              внешних ресурсов,
//                          * Изменения - Структура:
//                              * Добавляемые - Структура, содержащая таблицы с описаниями разрешений, которые
//                                  должны быть добавлены в настройки профилей безопасности в кластере серверов
//                                  при применении запросов (см. ТаблицыРазрешений()),
//                              * Удаляемые - Структура, содержащая таблицы с описаниями разрешений, которые
//                                  должны быть удалены из настроек профилей безопасности в кластере серверов
//                                  при применении запросов (см. ТаблицыРазрешений()),
//                          * Приоритет - Число, приоритет текущего внешнего модуля (для случаев визуального
//                              отображения рассчитанной дельты в пользовательском интерфейсе).
//
Функция ДельтаИзмененийРазрешенийНаИспользованиеВнешнихРесурсов(Знач ИдентификаторыЗапросов) Экспорт
	
	МенеджерыРегистров = МенеджерыКэшаПредоставленныхРазрешений();
	СоответствиеРасчетаДельты = Новый Соответствие();
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьРегистрыПредоставленныхРазрешений();
		
		ИменаПервыхВТ = "ВТ_До";
		ИменаВторыхВТ = "ВТ_После";
		ПсевдонимыПомещаемыхТаблиц = "Таблица";
		
		ТекущийСрез = ТекущийСрезРазрешений();
		Для Каждого МенеджерРегистра Из МенеджерыРегистров Цикл
			
			ИмяТаблицы = МенеджерРегистра.ТипXDTOПредставленияРазрешений().Имя;
			ТекущийСрезПоТаблице = ТекущийСрез[ИмяТаблицы];
			
			МенеджерВТ = Новый МенеджерВременныхТаблиц();
			
			ЗапросСозданияВТ = Новый Запрос(ТекстЗапросаСозданияВТ(ТекущийСрезПоТаблице, ПсевдонимыПомещаемыхТаблиц, ИменаПервыхВТ));
			ЗапросСозданияВТ.УстановитьПараметр(ПсевдонимыПомещаемыхТаблиц, ТекущийСрезПоТаблице);
			ЗапросСозданияВТ.МенеджерВременныхТаблиц = МенеджерВТ;
			ЗапросСозданияВТ.Выполнить();
			
			СоответствиеРасчетаДельты.Вставить(МенеджерРегистра, МенеджерВТ);
			
		КонецЦикла;
		
		ПрименитьЗапросыКТаблицамРазрешений(ИдентификаторыЗапросов, ТекущийСрез);
		
		Добавляемые = ТаблицыРазрешений();
		Удаляемые = ТаблицыРазрешений();
		
		Для Каждого ЭлементСоответствияРасчетаДельты Из СоответствиеРасчетаДельты Цикл
			
			МенеджерРегистра = ЭлементСоответствияРасчетаДельты.Ключ;
			ИмяТаблицы = МенеджерРегистра.ТипXDTOПредставленияРазрешений().Имя;
			МенеджерВТ = ЭлементСоответствияРасчетаДельты.Значение;
			
			ТекущийСрезПоТаблице = ТекущийСрез[ИмяТаблицы];
			
			ЗапросСозданияВТ = Новый Запрос(ТекстЗапросаСозданияВТ(ТекущийСрезПоТаблице, ПсевдонимыПомещаемыхТаблиц, ИменаВторыхВТ));
			ЗапросСозданияВТ.УстановитьПараметр(ПсевдонимыПомещаемыхТаблиц, ТекущийСрезПоТаблице);
			ЗапросСозданияВТ.МенеджерВременныхТаблиц = МенеджерВТ;
			ЗапросСозданияВТ.Выполнить();
			
			Запрос = Новый Запрос(МенеджерРегистра.ЗапросПолученияДельты());
			Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
			
			Результаты = Запрос.ВыполнитьПакет();
			
			Порция = Удаляемые[ИмяТаблицы];
			Если Порция = Неопределено Тогда
				Удаляемые.Вставить(ИмяТаблицы, Результаты[0].Выгрузить());
			Иначе
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результаты[0].Выгрузить(), Порция);
				Удаляемые.Вставить(ИмяТаблицы, Порция);
			КонецЕсли;
			
			Порция = Добавляемые[ИмяТаблицы];
			Если Порция = Неопределено Тогда
				Добавляемые.Вставить(ИмяТаблицы, Результаты[1].Выгрузить());
			Иначе
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результаты[1].Выгрузить(), Порция);
				Добавляемые.Вставить(ИмяТаблицы, Порция);
			КонецЕсли;
			
		КонецЦикла;
		
		Результат = Новый ТаблицаЗначений();
		Результат.Колонки.Добавить("ВнешнийМодуль", ТехнологияСервиса.ОписаниеТипаЛюбаяСсылка());
		Результат.Колонки.Добавить("Изменения", Новый ОписаниеТипов("Структура"));
		
		Для Каждого КлючИЗначение Из Добавляемые Цикл
			
			ИмяТаблицы = КлючИЗначение.Ключ;
			Таблица = КлючИЗначение.Значение;
			
			Для Каждого Строка Из Таблица Цикл
				
				ВнешнийМодуль = Строка.ВнешнийМодуль;
				
				ОтборПоМодулю = Новый Структура("ВнешнийМодуль", ВнешнийМодуль);
				СтрокиПоМодулю = Результат.НайтиСтроки(ОтборПоМодулю);
				Если СтрокиПоМодулю.Количество() = 0 Тогда
					СтрокаПоМодулю = Результат.Добавить();
					СтрокаПоМодулю.ВнешнийМодуль = ВнешнийМодуль;
					РезультатПоМодулю = Новый Структура("Добавляемые, Удаляемые", ТаблицыРазрешений(), ТаблицыРазрешений());
				ИначеЕсли СтрокиПоМодулю.Количество() = 1 Тогда
					СтрокаПоМодулю = СтрокиПоМодулю.Получить(0);
					РезультатПоМодулю = СтрокаПоМодулю.Изменения;
				Иначе
					ВызватьИсключение НСтр("ru='Неоднозначность при определении изменений в разрешениях';uk='Неоднозначність при визначенні змін у дозволах'");
				КонецЕсли;
				
				ТаблицаРезультата = РезультатПоМодулю.Добавляемые[ИмяТаблицы];
				СтрокаТаблицыРезультата = ТаблицаРезультата.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРезультата, Строка);
				
				РезультатПоМодулю.Добавляемые.Вставить(ИмяТаблицы, ТаблицаРезультата);
				
				СтрокаПоМодулю.Изменения = РезультатПоМодулю;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из Удаляемые Цикл
			
			ИмяТаблицы = КлючИЗначение.Ключ;
			Таблица = КлючИЗначение.Значение;
			
			Для Каждого Строка Из Таблица Цикл
				
				ВнешнийМодуль = Строка.ВнешнийМодуль;
				
				ОтборПоМодулю = Новый Структура("ВнешнийМодуль", ВнешнийМодуль);
				СтрокиПоМодулю = Результат.НайтиСтроки(ОтборПоМодулю);
				Если СтрокиПоМодулю.Количество() = 0 Тогда
					СтрокаПоМодулю = Результат.Добавить();
					СтрокаПоМодулю.ВнешнийМодуль = ВнешнийМодуль;
					РезультатПоМодулю = Новый Структура("Добавляемые, Удаляемые", ТаблицыРазрешений(), ТаблицыРазрешений());
				ИначеЕсли СтрокиПоМодулю.Количество() = 1 Тогда
					СтрокаПоМодулю = СтрокиПоМодулю.Получить(0);
					РезультатПоМодулю = СтрокаПоМодулю.Изменения;
				Иначе
					ВызватьИсключение НСтр("ru='Неоднозначность при определении изменений в разрешениях';uk='Неоднозначність при визначенні змін у дозволах'");
				КонецЕсли;
				
				ТаблицаРезультата = РезультатПоМодулю.Удаляемые[ИмяТаблицы];
				СтрокаТаблицыРезультата = ТаблицаРезультата.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРезультата, Строка);
				
				РезультатПоМодулю.Удаляемые.Вставить(ИмяТаблицы, ТаблицаРезультата);
				
				СтрокаПоМодулю.Изменения = РезультатПоМодулю;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Результат.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
		Для Каждого СтрокаРезультата Из Результат Цикл
			Если СтрокаРезультата.ВнешнийМодуль = РаботаВБезопасномРежимеСлужебныйПовтИсп.СлужебныйИОМ() Тогда
				СтрокаРезультата.Приоритет = 1;
			Иначе
				СтрокаРезультата.Приоритет = 2;
			КонецЕсли;
		КонецЦикла;
		Результат.Сортировать("Приоритет");
		
		ЗафиксироватьТранзакцию();
		
		Возврат Результат;
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецФункции

// Формирует текст запроса создания временной таблицы при расчеты дельты.
//
// Параметры:
//  ТекущаяТаблица - ТаблицаЗначений - см. ТаблицаРазрешений(),
//  ПсевдонимТаблицы - Строка - пседоним для таблицы (для текста запроса),
//  ИмяВТ - Строка - имя временной таблицы (для текста запроса).
//
// Возвращаемое значение: Строка - текст запроса.
//
Функция ТекстЗапросаСозданияВТ(Знач ТекущаяТаблица, Знач ПсевдонимТаблицы, Знач ИмяВТ)
	
	ПоляВыборки = Новый Массив();
	
	Для Каждого Колонка Из ТекущаяТаблица.Колонки Цикл
		ПоляВыборки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ТекстВыборки = "";
	Для Каждого ПолеВыборки Из ПоляВыборки Цикл
		
		Если Не ПустаяСтрока(ТекстВыборки) Тогда
			ТекстВыборки = ТекстВыборки + ", ";
		КонецЕсли;
		
		ТекстВыборки = ТекстВыборки + ПсевдонимТаблицы + "." + ПолеВыборки + " КАК " + ПолеВыборки;
		
	КонецЦикла;
	
	ТекстЗапроса = "Выбрать %1 Поместить %2 Из &%3 КАК %3";
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗапроса, ТекстВыборки, ИмяВТ, ПсевдонимТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устанавливает исключительную управляемую блокировку на теаблицы всех регистров, использующихся
// для хранения перечня предоставленных разрешений.
//
// Параметры:
//  ВнешнийМодуль - ЛюбаяСсылка, ссылка на элемент справочника, соответствующая внешнему модулю, информацию
//    о ранее предоставленных разрешениях по которому требуется очистить. Если значение параметра не задано -
//    будет заблокирована информация о предоставленных разрешениях по всем внешним модулям.
// ЗаблокироватьРежимыПодключенияВнешнихМодулей - Булево, флаг необходимости дополнительной блокировки режимов подключения
//    внешних модулей.
//
Процедура ЗаблокироватьРегистрыПредоставленныхРазрешений(Знач ВнешнийМодуль = Неопределено, Знач ЗаблокироватьРежимыПодключенияВнешнихМодулей = Истина)
	
	Если Не ТранзакцияАктивна() Тогда
		ВызватьИсключение НСтр("ru='Транзакция не активна!';uk='Транзакція не активна!'");
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных();
	
	Регистры = МенеджерыКэшаПредоставленныхРазрешений();
	
	Если ЗаблокироватьРежимыПодключенияВнешнихМодулей Тогда
		Регистры.Добавить(РегистрыСведений.РежимыПодключенияВнешнихМодулей);
	КонецЕсли;
	
	Для Каждого Регистр Из Регистры Цикл
		БлокировкаРегистра = Блокировка.Добавить(Регистр.СоздатьНаборЗаписей().Метаданные().ПолноеИмя());
		Если ВнешнийМодуль <> Неопределено Тогда
			БлокировкаРегистра.УстановитьЗначение("ВнешнийМодуль", ВнешнийМодуль);
		КонецЕсли;
	КонецЦикла;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Возвращает текущий срез предоставленных разрешений на использование внешних ресурсов.
//
// Возвращаемое значение: Структура, см. ТаблицыРазрешений().
//
Функция ТекущийСрезРазрешений()
	
	Результат = ТаблицыРазрешений();
	
	Менеджеры = МенеджерыКэшаПредоставленныхРазрешений();
	Для Каждого Менеджер Из Менеджеры Цикл
		
		ЗапросТекущегоСреза = Новый Запрос(Менеджер.ЗапросТекущегоСреза(Ложь));
		Результат[Менеджер.ТипXDTOПредставленияРазрешений().Имя] = ЗапросТекущегоСреза.Выполнить().Выгрузить();
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Применяет запросы на использование внешних ресурсов к таблицам разрешений.
//
// Параметры:
//  ИдентификаторыЗапросов - Массив(УникальныйИдентификатор) - идентификаторы запросов на
//    использование внешних ресурсов, для которых требуется получить изменения, которые должны
//    быть внесены в настройки профилей безопасности при применении разрешений,
//  ТаблицыРазрешений - Структура - описывающая разрешения на использование внешних ресурсов
//    (см. ТаблицыРазрешений()).
//
Процедура ПрименитьЗапросыКТаблицамРазрешений(Знач ИдентификаторыЗапросов, ТаблицыРазрешений)
	
	Менеджеры = МенеджерыКэшаПредоставленныхРазрешений();
	
	План = ПланПримененияЗапросовНаИспользованиеВнешнихРесурсов(ИдентификаторыЗапросов);
	
	Для Каждого ЗамещаемыеПоТипу Из План.ЗамещаемыеПоТипам Цикл
		
		ИмяТипа = ЗамещаемыеПоТипу.Тип;
		Таблица = ТаблицыРазрешений[ИмяТипа];
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ВнешнийМодуль", ЗамещаемыеПоТипу.ВнешнийМодуль);
		ПараметрыОтбора.Вставить("Владелец", ЗамещаемыеПоТипу.Владелец);
		
		Строки = Таблица.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Строка Из Строки Цикл
			Таблица.Удалить(Строка);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ДобавляемыеПоТипу Из План.ДобавляемыеПоТипам Цикл
		
		ИмяТипа = ДобавляемыеПоТипу.Тип;
		Таблица = ТаблицыРазрешений[ИмяТипа];
		
		ТекущийМенеджер = Неопределено;
		Для Каждого Менеджер Из Менеджеры Цикл
			Если Менеджер.ТипXDTOПредставленияРазрешений().Имя = ИмяТипа Тогда
				ТекущийМенеджер = Менеджер;
			КонецЕсли;
		КонецЦикла;
		Если ТекущийМенеджер = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при разборе запроса разрешений на использование внешних ресурсов: неизвестное имя типа %1!';uk=""Помилка при розборі запиту дозволів на використання зовнішніх ресурсів: невідоме ім'я типу %1!"""),
				ИмяТипа);
		КонецЕсли;
		
		НаборЗаписей = ТекущийМенеджер.НаборЗаписейИзXDTOПредставления(ДобавляемыеПоТипу.Разрешения, ДобавляемыеПоТипу.ВнешнийМодуль, ДобавляемыеПоТипу.Владелец, Ложь);
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Строка = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Запись);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого УдаляемыеПоТипу Из План.УдаляемыеПоТипам Цикл
		
		ИмяТипа = УдаляемыеПоТипу.Тип;
		Таблица = ТаблицыРазрешений[ИмяТипа];
		
		ТекущийМенеджер = Неопределено;
		Для Каждого Менеджер Из Менеджеры Цикл
			Если Менеджер.ТипXDTOПредставленияРазрешений().Имя = ИмяТипа Тогда
				ТекущийМенеджер = Менеджер;
			КонецЕсли;
		КонецЦикла;
		Если ТекущийМенеджер = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при разборе запроса разрешений на использование внешних ресурсов: неизвестное имя типа %1!';uk=""Помилка при розборі запиту дозволів на використання зовнішніх ресурсів: невідоме ім'я типу %1!"""),
				ИмяТипа);
		КонецЕсли;
		
		НаборЗаписей = ТекущийМенеджер.НаборЗаписейИзXDTOПредставления(УдаляемыеПоТипу.Разрешения, УдаляемыеПоТипу.ВнешнийМодуль, УдаляемыеПоТипу.Владелец, Истина);
		
		ПараметрыОтбора = Новый Структура();
		Для Каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
			Если ЭлементОтбора.Использование Тогда
				Если Таблица.Колонки.Найти(ЭлементОтбора.ПутьКДанным) <> Неопределено Тогда
					Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
						ПараметрыОтбора.Вставить(ЭлементОтбора.ПутьКДанным, ЭлементОтбора.Значение);
					Иначе
						ВызватьИсключение НСтр("ru='Некорректный вид сравнения!';uk='Некоректний вид порівняння!'");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Строки = Таблица.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Строка Из Строки Цикл
			Таблица.Удалить(Строка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
// Строит план применения запросов на использование внешних ресурсов.
//
// Параметры:
//  ИдентификаторыЗапросов - Массив(УникальныйИдентификатор) - идентификаторы запросов на
//    использование внешних ресурсов, для которых требуется получить изменения, которые должны
//    быть внесены в настройки профилей безопасности при применении разрешений.
//
// Возвращаемое значение: Структура:
//                          * ЗамещаемыеПоТипам - ТаблицаЗначений - план выполнения замещения
//                                предыдущих значений для ранее предоставленных разрешений:
//                              * ВнешнийМодуль - ЛюбаяСсылка - ссылка на элемент справочника,
//                                 испольуемая в качестве внешнего модуля,
//                              * Владелец - ЛюбаяСсылка - ссылка на элемент справочника, используемый
//                                 в качестве владельца разрешений,
//                              * Тип - Строка - имя XDTO-типа, описывающего типа разрешений. Тип должен быть
//                                 определен в пакете {http://www.1c.ru/1cFresh/Application/Permissions/a.b.c.d}.
//                          * ДобавляемыеПоТипам - ТаблицаЗначений - план добавления разрешений на использование
//                                внешних ресурсов:
//                              * ВнешнийМодуль - ЛюбаяСсылка - ссылка на элемент справочника,
//                                 испольуемая в качестве внешнего модуля,
//                              * Владелец - ЛюбаяСсылка - ссылка на элемент справочника, используемый
//                                 в качестве владельца разрешений,
//                              * Тип - Строка - имя XDTO-типа, описывающего типа разрешений. Тип должен быть
//                                 определен в пакете {http://www.1c.ru/1cFresh/Application/Permissions/a.b.c.d},
//                              * Разрешения - Массив(ОбъектXDTO) - массив объектов XDTO, описывающих разрешения
//                                 на использование внешних ресурсов. Типы объектов должны быть определены в
//                                 пакете {http://www.1c.ru/1cFresh/Application/Permissions/a.b.c.d},
//                          * УдаляемыеПоТипам - ТаблицаЗначений - план удаления разрешений на использование
//                                 внешних ресурсов:
//                              * ВнешнийМодуль - ЛюбаяСсылка - ссылка на элемент справочника,
//                                 испольуемая в качестве внешнего модуля,
//                              * Владелец - ЛюбаяСсылка - ссылка на элемент справочника, используемый
//                                 в качестве владельца разрешений,
//                              * Тип - Строка - имя XDTO-типа, описывающего типа разрешений. Тип должен быть
//                                 определен в пакете {http://www.1c.ru/1cFresh/Application/Permissions/a.b.c.d},
//                              * Разрешения - Массив(ОбъектXDTO) - массив объектов XDTO, описывающих разрешения
//                                 на использование внешних ресурсов. Типы объектов должны быть определены в
//                                 пакете {http://www.1c.ru/1cFresh/Application/Permissions/a.b.c.d}.
//
Функция ПланПримененияЗапросовНаИспользованиеВнешнихРесурсов(Знач ИдентификаторыЗапросов)
	
	Менеджеры = МенеджерыКэшаПредоставленныхРазрешений();
	
	ЗамещаемыеПоТипам = Новый ТаблицаЗначений();
	ЗамещаемыеПоТипам.Колонки.Добавить("ВнешнийМодуль", ТехнологияСервиса.ОписаниеТипаЛюбаяСсылка());
	ЗамещаемыеПоТипам.Колонки.Добавить("Владелец", ТехнологияСервиса.ОписаниеТипаЛюбаяСсылка());
	ЗамещаемыеПоТипам.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	
	ДобавляемыеПоТипам = Новый ТаблицаЗначений();
	ДобавляемыеПоТипам.Колонки.Добавить("ВнешнийМодуль", ТехнологияСервиса.ОписаниеТипаЛюбаяСсылка());
	ДобавляемыеПоТипам.Колонки.Добавить("Владелец", ТехнологияСервиса.ОписаниеТипаЛюбаяСсылка());
	ДобавляемыеПоТипам.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	ДобавляемыеПоТипам.Колонки.Добавить("Разрешения", Новый ОписаниеТипов("Массив"));
	
	УдаляемыеПоТипам = Новый ТаблицаЗначений();
	УдаляемыеПоТипам.Колонки.Добавить("ВнешнийМодуль", ТехнологияСервиса.ОписаниеТипаЛюбаяСсылка());
	УдаляемыеПоТипам.Колонки.Добавить("Владелец", ТехнологияСервиса.ОписаниеТипаЛюбаяСсылка());
	УдаляемыеПоТипам.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	УдаляемыеПоТипам.Колонки.Добавить("Разрешения", Новый ОписаниеТипов("Массив")); 
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.Идентификатор,
		|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.ВнешнийМодуль,
		|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.Владелец,
		|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.РежимЗамещения,
		|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.ДобавляемыеРазрешения,
		|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.УдаляемыеРазрешения,
		|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.МоментВремени
		|ИЗ
		|	РегистрСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов КАК ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов
		|ГДЕ
		|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.Идентификатор В(&Идентификаторы)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификаторы", ИдентификаторыЗапросов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.РежимЗамещения Тогда
			
			// Замещение по всем таблицам
			
			Для Каждого Менеджер Из Менеджеры Цикл
				
				ТипТаблицы = Менеджер.ТипXDTOПредставленияРазрешений().Имя;
				
				СтрокаЗамещения = ЗамещаемыеПоТипам.Добавить();
				СтрокаЗамещения.ВнешнийМодуль = Выборка.ВнешнийМодуль;
				СтрокаЗамещения.Владелец = Выборка.Владелец;
				СтрокаЗамещения.Тип = ТипТаблицы;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(Выборка.ДобавляемыеРазрешения) Тогда
			
			МассивДобавляемыхРазрешений = ОбщегоНазначения.ЗначениеИзСтрокиXML(Выборка.ДобавляемыеРазрешения);
			Для Каждого ПредставлениеРазрешения Из МассивДобавляемыхРазрешений Цикл
				
				Разрешение = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(ПредставлениеРазрешения);
				
				ТипРазрешения = Разрешение.Тип().Имя;
				Отбор = Новый Структура("ВнешнийМодуль,Владелец,Тип", Выборка.ВнешнийМодуль, Выборка.Владелец, ТипРазрешения);
				Строки = ДобавляемыеПоТипам.НайтиСтроки(Отбор);
				Если Строки.Количество() = 0 Тогда
					Строка = ДобавляемыеПоТипам.Добавить();
					Строка.ВнешнийМодуль = Выборка.ВнешнийМодуль;
					Строка.Владелец = Выборка.Владелец;
					Строка.Тип = ТипРазрешения;
				Иначе
					Строка = Строки.Получить(0);
				КонецЕсли;
				
				Строка.Разрешения.Добавить(Разрешение);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(Выборка.УдаляемыеРазрешения) Тогда
			
			МассивУдаляемыхРазрешений = ОбщегоНазначения.ЗначениеИзСтрокиXML(Выборка.УдаляемыеРазрешения);
			Для Каждого ПредставлениеРазрешения Из МассивУдаляемыхРазрешений Цикл
				
				Разрешение = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(ПредставлениеРазрешения);
				
				ТипРазрешения = Разрешение.Тип().Имя;
				Отбор = Новый Структура("ВнешнийМодуль,Владелец,Тип", Выборка.ВнешнийМодуль, Выборка.Владелец, ТипРазрешения);
				Строки = УдаляемыеПоТипам.НайтиСтроки(Отбор);
				Если Строки.Количество() = 0 Тогда
					Строка = ДобавляемыеПоТипам.Добавить();
					Строка.ВнешнийМодуль = Выборка.ВнешнийМодуль;
					Строка.Владелец = Выборка.Владелец;
					Строка.Тип = ТипРазрешения;
				Иначе
					Строка = Строки.Получить(0);
				КонецЕсли;
				
				Строка.Разрешения.Добавить(Разрешение);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура();
	Результат.Вставить("ЗамещаемыеПоТипам", ЗамещаемыеПоТипам);
	Результат.Вставить("ДобавляемыеПоТипам", ДобавляемыеПоТипам);
	Результат.Вставить("УдаляемыеПоТипам" ,УдаляемыеПоТипам);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПакетАдминистрированиеРазрешений() Экспорт
	
	Возврат "http://www.1c.ru/1cFresh/Application/Permissions/Management/1.0.0.1";
	
КонецФункции

Процедура ПроверитьРазрешение(Разрешение)
	
	Менеджеры = МенеджерыКэшаПредоставленныхРазрешений();
	
	ТипРазрешения = Разрешение.Тип().Имя;
	
	МенеджерРазрешения = Неопределено;
	Для Каждого Менеджер Из Менеджеры Цикл
		Если Менеджер.ТипXDTOПредставленияРазрешений().Имя = ТипРазрешения Тогда
			МенеджерРазрешения = Менеджер;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если МенеджерРазрешения = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Разрешение не может быть запрошено у администратора области данных!';uk='Дозвіл не може бути запитано у адміністратора області даних!'");
	Иначе
		МенеджерРазрешения.ПроверитьРазрешение(Разрешение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьЗапросы(Знач ИдентификаторыЗапросов)
	
	Менеджеры = МенеджерыКэшаПредоставленныхРазрешений();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Запросы.Идентификатор,
		|	Запросы.ВнешнийМодуль,
		|	Запросы.Владелец,
		|	Запросы.РежимЗамещения,
		|	Запросы.ДобавляемыеРазрешения,
		|	Запросы.УдаляемыеРазрешения,
		|	Запросы.МоментВремени
		|ИЗ
		|	РегистрСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных КАК Запросы
		|ГДЕ
		|	Запросы.Идентификатор В(&Идентификаторы)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификаторы", ИдентификаторыЗапросов);
	
	ОписаниеТипаВнешнийМодуль = Метаданные.ОпределяемыеТипы.КонтейнерВнешнегоМодуляВМоделиСервиса.Тип;
	
	ДобавляемыеПоТипам = Новый ТаблицаЗначений();
	ДобавляемыеПоТипам.Колонки.Добавить("ВнешнийМодуль", ОписаниеТипаВнешнийМодуль);
	ДобавляемыеПоТипам.Колонки.Добавить("Владелец", ТехнологияСервиса.ОписаниеТипаЛюбаяСсылка());
	ДобавляемыеПоТипам.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	ДобавляемыеПоТипам.Колонки.Добавить("Разрешения", Новый ОписаниеТипов("Массив"));
	
	УдаляемыеПоТипам = Новый ТаблицаЗначений();
	УдаляемыеПоТипам.Колонки.Добавить("ВнешнийМодуль", ОписаниеТипаВнешнийМодуль);
	УдаляемыеПоТипам.Колонки.Добавить("Владелец", ТехнологияСервиса.ОписаниеТипаЛюбаяСсылка());
	УдаляемыеПоТипам.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	УдаляемыеПоТипам.Колонки.Добавить("Разрешения", Новый ОписаниеТипов("Массив"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.РежимЗамещения Тогда
			
			Для Каждого Менеджер Из Менеджеры Цикл
				
				НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ВнешнийМодуль.Установить(Выборка.ВнешнийМодуль);
				НаборЗаписей.Отбор.Владелец.Установить(Выборка.Владелец);
				НаборЗаписей.Записать(Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(Выборка.ДобавляемыеРазрешения) Тогда
			
			МассивДобавляемыхРазрешений = ОбщегоНазначения.ЗначениеИзСтрокиXML(Выборка.ДобавляемыеРазрешения);
			Для Каждого ПредставлениеРазрешения Из МассивДобавляемыхРазрешений Цикл
				
				Разрешение = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(ПредставлениеРазрешения);
				
				ТипРазрешения = Разрешение.Тип().Имя;
				Отбор = Новый Структура("ВнешнийМодуль,Владелец,Тип", Выборка.ВнешнийМодуль, Выборка.Владелец, ТипРазрешения);
				Строки = ДобавляемыеПоТипам.НайтиСтроки(Отбор);
				Если Строки.Количество() = 0 Тогда
					Строка = ДобавляемыеПоТипам.Добавить();
					Строка.ВнешнийМодуль = Выборка.ВнешнийМодуль;
					Строка.Владелец = Выборка.Владелец;
					Строка.Тип = ТипРазрешения;
				Иначе
					Строка = Строки.Получить(0);
				КонецЕсли;
				
				Строка.Разрешения.Добавить(Разрешение);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(Выборка.УдаляемыеРазрешения) Тогда
			
			МассивУдаляемыхРазрешений = ОбщегоНазначения.ЗначениеИзСтрокиXML(Выборка.УдаляемыеРазрешения);
			Для Каждого ПредставлениеРазрешения Из МассивУдаляемыхРазрешений Цикл
				
				Разрешение = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(ПредставлениеРазрешения);
				
				ТипРазрешения = Разрешение.Тип().Имя;
				Отбор = Новый Структура("ВнешнийМодуль,Владелец,Тип", Выборка.ВнешнийМодуль, Выборка.Владелец, ТипРазрешения);
				Строки = УдаляемыеПоТипам.НайтиСтроки(Отбор);
				Если Строки.Количество() = 0 Тогда
					Строка = ДобавляемыеПоТипам.Добавить();
					Строка.ВнешнийМодуль = Выборка.ВнешнийМодуль;
					Строка.Владелец = Выборка.Владелец;
					Строка.Тип = ТипРазрешения;
				Иначе
					Строка = Строки.Получить(0);
				КонецЕсли;
				
				Строка.Разрешения.Добавить(Разрешение);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ДобавляемыеПоТипу Из ДобавляемыеПоТипам Цикл
		
		ИмяТипа = ДобавляемыеПоТипу.Тип;
		
		ТекущийМенеджер = Неопределено;
		Для Каждого Менеджер Из Менеджеры Цикл
			Если Менеджер.ТипXDTOПредставленияРазрешений().Имя = ИмяТипа Тогда
				ТекущийМенеджер = Менеджер;
			КонецЕсли;
		КонецЦикла;
		Если ТекущийМенеджер = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при разборе запроса разрешений на использование внешних ресурсов: неизвестное имя типа %1!';uk=""Помилка при розборі запиту дозволів на використання зовнішніх ресурсів: невідоме ім'я типу %1!"""),
				ИмяТипа);
		КонецЕсли;
		
		НаборЗаписей = ТекущийМенеджер.НаборЗаписейИзXDTOПредставления(ДобавляемыеПоТипу.Разрешения, ДобавляемыеПоТипу.ВнешнийМодуль, ДобавляемыеПоТипу.Владелец, Ложь);
		НаборЗаписей.Записать(Ложь);
		
	КонецЦикла;
	
	Для Каждого УдаляемыеПоТипу Из УдаляемыеПоТипам Цикл
		
		ИмяТипа = УдаляемыеПоТипу.Тип;
		
		ТекущийМенеджер = Неопределено;
		Для Каждого Менеджер Из Менеджеры Цикл
			Если Менеджер.ТипXDTOПредставленияРазрешений().Имя = ИмяТипа Тогда
				ТекущийМенеджер = Менеджер;
			КонецЕсли;
		КонецЦикла;
		Если ТекущийМенеджер = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при разборе запроса разрешений на использование внешних ресурсов: неизвестное имя типа %1!';uk=""Помилка при розборі запиту дозволів на використання зовнішніх ресурсів: невідоме ім'я типу %1!"""),
				ИмяТипа);
		КонецЕсли;
		
		НаборЗаписей = ТекущийМенеджер.НаборЗаписейИзXDTOПредставления(УдаляемыеПоТипу.Разрешения, УдаляемыеПоТипу.ВнешнийМодуль, УдаляемыеПоТипу.Владелец, Истина);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция МенеджерыКэшаПредоставленныхРазрешений()
	
	Результат = Новый Массив();
	
	Результат.Добавить(РегистрыСведений.РазрешенныеКаталогиФайловойСистемыОбластейДанных);
	Результат.Добавить(РегистрыСведений.РазрешенныеИнтернетРесурсыОбластейДанных);
	Результат.Добавить(РегистрыСведений.РазрешенияПереходаВПривилегированныйРежимОбластейДанных);
	
	Возврат Результат;
	
КонецФункции

// Сериализует запросы на использование внешних ресурсов.
//
// Параметры:
//  Идентификаторы - Массив(УникальныйИдентификатор) - идентификаторы запросов на использование
//    внешних ресурсов, которые требуется сериализовать.
//
// Возвращаемое значение: Массив(Строка) - массив, содержащий сериализацию запросов разрешений.
//
Функция СериализоватьЗапросыДляОбработкиСВосстановлением(Знач Идентификаторы)
	
	Результат = Новый Массив();
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			
			Набор = РегистрыСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных.СоздатьНаборЗаписей();
			Набор.Отбор.Идентификатор.Установить(Идентификатор);
			Набор.Прочитать();
			
			Если Набор.Количество() > 0 Тогда
				
				ПотокЗаписи = Новый ЗаписьXML();
				ПотокЗаписи.УстановитьСтроку();
				СериализаторXDTO.ЗаписатьXML(ПотокЗаписи, Набор);
				Результат.Добавить(ПотокЗаписи.Закрыть());
				
			КонецЕсли;
			
			Набор = РегистрыСведений.ЗапросыАдминистрированияРазрешенийИспользованияВнешнихРесурсовОбластейДанных.СоздатьНаборЗаписей();
			Набор.Отбор.Идентификатор.Установить(Идентификатор);
			Набор.Прочитать();
			
			Если Набор.Количество() > 0 Тогда
				
				ПотокЗаписи = Новый ЗаписьXML();
				ПотокЗаписи.УстановитьСтроку();
				СериализаторXDTO.ЗаписатьXML(ПотокЗаписи, Набор);
				Результат.Добавить(ПотокЗаписи.Закрыть());
				
			КонецЕсли;
			
		Иначе
			
			Набор = РегистрыСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.СоздатьНаборЗаписей();
			Набор.Отбор.Идентификатор.Установить(Идентификатор);
			Набор.Прочитать();
			
			Если Набор.Количество() > 0 Тогда
				
				ПотокЗаписи = Новый ЗаписьXML();
				ПотокЗаписи.УстановитьСтроку();
				СериализаторXDTO.ЗаписатьXML(ПотокЗаписи, Набор);
				Результат.Добавить(ПотокЗаписи.Закрыть());
				
			КонецЕсли;
			
			Набор = РегистрыСведений.ЗапросыАдминистрированияРазрешенийИспользованияВнешнихРесурсов.СоздатьНаборЗаписей();
			Набор.Отбор.Идентификатор.Установить(Идентификатор);
			Набор.Прочитать();
			
			Если Набор.Количество() > 0 Тогда
				
				ПотокЗаписи = Новый ЗаписьXML();
				ПотокЗаписи.УстановитьСтроку();
				СериализаторXDTO.ЗаписатьXML(ПотокЗаписи, Набор);
				Результат.Добавить(ПотокЗаписи.Закрыть());
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);
	
КонецФункции

// Десериализует запросы на использование внешних ресурсов и записывает их в информационную базу.
//
// Параметры:
//  Сериаилазция - Массив(Строка) - см. СериализоватьЗапросыДляОбработкиСВосстановлением().
//
Процедура ДесериализоватьЗапросыДляОбработкиСВосстановлением(Знач Сериализация)
	
	Для Каждого ЭлементСериализации Из Сериализация Цикл
		
		ПотокЧтения = Новый ЧтениеXML();
		ПотокЧтения.УстановитьСтроку(ЭлементСериализации);
		ПотокЧтения.ПерейтиКСодержимому();
		
		Набор = СериализаторXDTO.ПрочитатьXML(ПотокЧтения);
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет необходимость интерактивного запроса разрешений на использование внешних ресурсов.
//
// Возвращаемое значение: Булево.
//
Функция ТребуетсяЗапросРазрешенийНаИспользованиеВнешнихРесурсов()
	
	Если Не ВозможенЗапросРазрешенийНаИспользованиеВнешнихРесурсов() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Константы.ИспользуютсяПрофилиБезопасности.Получить() И Константы.АвтоматическиНастраиватьРазрешенияВПрофиляхБезопасности.Получить();
	
КонецФункции

// Очищает просроченные запросы на использование внешних ресурсов.
//
Процедура ОчисткаНеактуальныхЗапросовНаИспользованиеВнешнихРесурсов() Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Запросы.Идентификатор КАК Идентификатор,
		|	Запросы.ВнешнийМодуль КАК ВнешнийМодуль,
		|	Запросы.Владелец КАК Владелец,
		|	Запросы.БезопасныйРежим
		|ИЗ
		|	РегистрСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов КАК Запросы
		|ГДЕ
		|	Запросы.МоментВремени <= &ДатаЗапроса";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаЗапроса", ТекущаяУниверсальнаяДата() - 3600); // Время жизни запроса - час
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Ключ = РегистрыСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.СоздатьКлючЗаписи(
				Новый Структура("Идентификатор, ВнешнийМодуль, Владелец, БезопасныйРежим", Выборка.Идентификатор, Выборка.ВнешнийМодуль, Выборка.Владелец, Выборка.БезопасныйРежим));
			ЗаблокироватьДанныеДляРедактирования(Ключ);
			
		Исключение
			
			// Обработка исключения не требуется.
			// Ожидаемое исключение - попытка удалить ту же запись регистра из другого сеанса.
			ОтменитьТранзакцию();
			Продолжить;
			
		КонецПопытки;
		
		Менеджер = РегистрыСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.СоздатьМенеджерЗаписи();
		Менеджер.Идентификатор = Выборка.Идентификатор;
		Менеджер.Прочитать();
		Если Менеджер.Выбран() Тогда
			Менеджер.Удалить();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Запросы.Идентификатор КАК Идентификатор,
		|	Запросы.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.ЗапросыАдминистрированияРазрешенийИспользованияВнешнихРесурсов КАК Запросы
		|ГДЕ
		|	Запросы.МоментВремени <= &ДатаЗапроса";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаЗапроса", ТекущаяУниверсальнаяДата() - 3600); // Время жизни запроса - час
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Ключ = РегистрыСведений.ЗапросыАдминистрированияРазрешенийИспользованияВнешнихРесурсов.СоздатьКлючЗаписи(
				Новый Структура("Идентификатор, Владелец", Выборка.Идентификатор, Выборка.Владелец));
			ЗаблокироватьДанныеДляРедактирования(Ключ);
			
		Исключение
			
			// Обработка исключения не требуется.
			// Ожидаемое исключение - попытка удалить ту же запись регистра из другого сеанса.
			ОтменитьТранзакцию();
			Продолжить;
			
		КонецПопытки;
		
		Менеджер = РегистрыСведений.ЗапросыАдминистрированияРазрешенийИспользованияВнешнихРесурсов.СоздатьМенеджерЗаписи();
		Менеджер.Идентификатор = Выборка.Идентификатор;
		Менеджер.Прочитать();
		Если Менеджер.Выбран() Тогда
			Менеджер.Удалить();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет возможность интерактивного запроса разрешений на использование внешних ресурсов.
//
// Возвращаемое значение: Булево.
//
Функция ВозможенЗапросРазрешенийНаИспользованиеВнешнихРесурсов()
	
	Возврат Пользователи.ЭтоПолноправныйПользователь();
	
КонецФункции

#КонецОбласти

#КонецЕсли