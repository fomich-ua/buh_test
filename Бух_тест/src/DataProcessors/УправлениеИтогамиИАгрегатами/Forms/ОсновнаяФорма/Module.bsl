&НаКлиенте
Перем КонтекстВыбора;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКОбъектуМетаданных = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПрочитатьИнформациюПоРегистрам();
	
	ОбновитьСписокИтоговНаСервере();
	ОбновитьАгрегатыПоРегистрамНаСервере();
	
	Если АгрегатыПоРегистрам.Количество() <> 0 Тогда
		Элементы.СписокАгрегатов.Заголовок = Префикс() + " " + АгрегатыПоРегистрам[0].Наименование;
	Иначе
		Элементы.СписокАгрегатов.Заголовок = Префикс();
	КонецЕсли;
	
	Если СписокИтогов.Количество() = 0 Тогда
		Элементы.ГруппаИтогов.Доступность = Ложь;
		Элементы.УстановитьПериодРассчитанныхИтогов.Доступность = Ложь;
		Элементы.ВключитьИспользованиеИтогов.Доступность = Ложь;
	КонецЕсли;
	
	Если АгрегатыПоРегистрам.Количество() = 0 Тогда
		Элементы.ГруппаАгрегаты.Доступность = Ложь;
		Элементы.ПерестроитьИЗаполнитьАгрегаты.Доступность = Ложь;
		Элементы.ПолучитьОптимальныеАгрегаты.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.Операции.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	УстановитьРасширенныйРежим();
	
	РассчитатьИтогиНа = ТекущаяДатаСеанса();
	
	Элементы.ОписаниеУстановкиПериода.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Элементы.ОписаниеУстановкиПериода.Заголовок,
		Формат(ОкончаниеПериода(ДобавитьМесяц(РассчитатьИтогиНа, -1)), "DLF=D"),
		Формат(ОкончаниеПериода(РассчитатьИтогиНа), "DLF=D"));
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	УстановитьРасширенныйРежим();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Обработка.УправлениеИтогамиИАгрегатами.Форма.ФормаВыбораПериода") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыИтогов = Новый Структура;
		ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Установка периода рассчитанных итогов ...';uk='Установка періоду розрахованих підсумків ...'"));
		ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Установка периода рассчитанных итогов завершена';uk='Установка періоду розрахованих підсумків завершена'"));
		ПараметрыИтогов.Вставить("Действие",               "УстановитьПериодИтогов");
		ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.СписокИтогов.ВыделенныеСтроки);
		ПараметрыИтогов.Вставить("Поле",                   "ПериодИтогов");
		ПараметрыИтогов.Вставить("Значение1",              ВыбранноеЗначение.ПериодДляРегистровНакопления);
		ПараметрыИтогов.Вставить("Значение2",              ВыбранноеЗначение.ПериодДляРегистровБухгалтерии);
		ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка установки периода рассчитанных итогов.';uk='Помилка встановлення періоду розрахованих підсумків.'"));
		
		УправлениеИтогами(ПараметрыИтогов);
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Обработка.УправлениеИтогамиИАгрегатами.Форма.ФормаПараметровПерестроения") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		Если КонтекстВыбора = "ПерестроитьАгрегаты" Тогда
			
			ОтносительныйРазмер = ВыбранноеЗначение.ОтносительныйРазмер;
			МинимальныйЭффект   = ВыбранноеЗначение.МинимальныйЭффект;
			
			ПараметрыИтогов = Новый Структура;
			ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Перестроение агрегатов ...';uk='Перебудування агрегатів ...'"));
			ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Перестроение агрегатов завершено';uk='Перебудування агрегатів завершено'"));
			ПараметрыИтогов.Вставить("Действие",               "ПерестроитьАгрегаты");
			ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.АгрегатыПоРегистрам.ВыделенныеСтроки);
			ПараметрыИтогов.Вставить("Поле",                   "Наименование");
			ПараметрыИтогов.Вставить("Значение1",              ВыбранноеЗначение.ОтносительныйРазмер);
			ПараметрыИтогов.Вставить("Значение2",              ВыбранноеЗначение.МинимальныйЭффект);
			ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка перестроения агрегатов.';uk='Помилка перебудови агрегатів.'"));
			
			УправлениеАгрегатом(ПараметрыИтогов);
			
		ИначеЕсли КонтекстВыбора = "АгрегатыОптимальные" Тогда
			
			ОптимальныйОтносительныйРазмер = ВыбранноеЗначение.ОтносительныйРазмер;
			ПутьКОптимальнымАгрегатам = ВыборПутиККаталогу(ПутьКОптимальнымАгрегатам);
			
			Если ПустаяСтрока(ПутьКОптимальнымАгрегатам) Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыИтогов = Новый Структура;
			ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Получение списка оптимальных агрегатов ...';uk='Отримання списку оптимальних агрегатів ...'"));
			ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Получение списка оптимальных агрегатов завершено';uk='Отримання списку оптимальних агрегатів завершене'"));
			ПараметрыИтогов.Вставить("Действие",               "ПолучитьОптимальныеАгрегаты");
			ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.АгрегатыПоРегистрам.ВыделенныеСтроки);
			ПараметрыИтогов.Вставить("Поле",                   "Наименование");
			ПараметрыИтогов.Вставить("Значение1",              ВыбранноеЗначение.ОтносительныйРазмер);
			ПараметрыИтогов.Вставить("Значение2",              Неопределено);
			ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка получения списка оптимальных агрегатов.';uk='Помилка отримання списку оптимальних агрегатів.'"));
			
			УправлениеАгрегатом(ПараметрыИтогов);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГиперссылкаСТекстомНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПолныеВозможности = НЕ ПолныеВозможности;
	УстановитьРасширенныйРежим();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокИтогов

&НаКлиенте
Процедура СписокИтоговПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Элементы.ГруппаРазделениеИтогов.Доступность = Ложь;
	Иначе
		Элементы.ГруппаРазделениеИтогов.Доступность = Элемент.ТекущиеДанные.РазрешитьРазделениеИтогов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИтоговВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяМетаданного = СписокИтогов.НайтиПоИдентификатору(ВыбраннаяСтрока).ИмяМетаданного;
	Если Поле.Имя = "ИтогиАгрегатыИтоги" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		МассивРезультата = АгрегатыПоРегистрам.НайтиСтроки(
			Новый Структура("ИмяМетаданного", ИмяМетаданного));
		
		Если МассивРезультата.Количество() > 0 Тогда
			
			Индекс = АгрегатыПоРегистрам.Индекс(МассивРезультата[0]);
			ТекущийЭлемент = Элементы.АгрегатыПоРегистрам;
			Элементы.АгрегатыПоРегистрам.ТекущаяСтрока = Индекс;
			Элементы.АгрегатыПоРегистрам.ТекущийЭлемент = Элементы.АгрегатыПоРегистрамНаименование;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВключитьИспользованиеИтогов(Команда)
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Включение использования итогов ...';uk='Включення використання підсумків ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Включение использования итогов завершено';uk='Включення використання підсумків завершено'"));
	ПараметрыИтогов.Вставить("Действие",               "УстановитьИспользованиеИтогов");
	ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.СписокИтогов.ВыделенныеСтроки);
	ПараметрыИтогов.Вставить("Поле",                   "ИспользоватьИтоги");
	ПараметрыИтогов.Вставить("Значение1",              Истина);
	ПараметрыИтогов.Вставить("Значение2",              Неопределено);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка включения использования итогов.';uk='Помилка включення використання підсумків.'"));
	
	УправлениеИтогами(ПараметрыИтогов);

КонецПроцедуры

&НаКлиенте
Процедура ВключитьИспользованиеТекущихИтогов(Команда)
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Включение использования текущих итогов ...';uk='Включення використання поточних підсумків ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Включение использования текущих итогов завершено';uk='Включення використання поточних підсумків завершено'"));
	ПараметрыИтогов.Вставить("Действие",               "ИспользоватьТекущиеИтоги");
	ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.СписокИтогов.ВыделенныеСтроки);
	ПараметрыИтогов.Вставить("Поле",                   "ИспользоватьТекущиеИтоги");
	ПараметрыИтогов.Вставить("Значение1",              Истина);
	ПараметрыИтогов.Вставить("Значение2",              Неопределено);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка включения использования текущих итогов.';uk='Помилка включення використання поточних підсумків.'"));
	
	УправлениеИтогами(ПараметрыИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьИспользованиеИтогов(Команда)
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Выключение использования итогов ...';uk='Вимкнення використання підсумків ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Выключение использования итогов завершено';uk='Вимкнення використання підсумків завершено'"));
	ПараметрыИтогов.Вставить("Действие",               "УстановитьИспользованиеИтогов");
	ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.СписокИтогов.ВыделенныеСтроки);
	ПараметрыИтогов.Вставить("Поле",                   "ИспользоватьИтоги");
	ПараметрыИтогов.Вставить("Значение1",              Ложь);
	ПараметрыИтогов.Вставить("Значение2",              Неопределено);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка выключения использования итогов.';uk='Помилка виключення використання підсумків.'"));
	
	УправлениеИтогами(ПараметрыИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьИспользованиеТекущихИтогов(Команда)
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Выключение использования текущих итогов ...';uk='Вимкнення використання поточних підсумків ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Выключение использования текущих итогов завершено';uk='Вимкнення використання поточних підсумків завершено'"));
	ПараметрыИтогов.Вставить("Действие",               "ИспользоватьТекущиеИтоги");
	ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.СписокИтогов.ВыделенныеСтроки);
	ПараметрыИтогов.Вставить("Поле",                   "ИспользоватьТекущиеИтоги");
	ПараметрыИтогов.Вставить("Значение1",              Ложь);
	ПараметрыИтогов.Вставить("Значение2",              Неопределено);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка выключения использования текущих итогов.';uk='Помилка виключення використання поточних підсумків.'"));
	
	УправлениеИтогами(ПараметрыИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеИтогов(Команда)
	
	ОбновитьСписокИтоговНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодИтогов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РегНакопления",  Ложь);
	ПараметрыФормы.Вставить("РегБухгалтерии", Ложь);
	
	Для Каждого Индекс Из Элементы.СписокИтогов.ВыделенныеСтроки Цикл
		ИнформацияПоРегистру = СписокИтогов.НайтиПоИдентификатору(Индекс);
		ПараметрыФормы.РегНакопления  = ПараметрыФормы.РегНакопления  ИЛИ ИнформацияПоРегистру.Тип = 0;
		ПараметрыФормы.РегБухгалтерии = ПараметрыФормы.РегБухгалтерии ИЛИ ИнформацияПоРегистру.Тип = 1;
	КонецЦикла;
	
	ОткрытьФорму("Обработка.УправлениеИтогамиИАгрегатами.Форма.ФормаВыбораПериода", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРазделениеИтогов(Команда)
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Включение разделения итогов ...';uk='Включення поділу підсумків ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Включение разделения итогов завершено';uk='Включення поділу підсумків завершено'"));
	ПараметрыИтогов.Вставить("Действие",               "УстановитьРазделениеИтогов");
	ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.СписокИтогов.ВыделенныеСтроки);
	ПараметрыИтогов.Вставить("Поле",                   "РазделениеИтогов");
	ПараметрыИтогов.Вставить("Значение1",              Истина);
	ПараметрыИтогов.Вставить("Значение2",              Неопределено);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка включения разделения итогов.';uk='Помилка включення поділу підсумків.'"));
	
	УправлениеИтогами(ПараметрыИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРазделениеИтогов(Команда)
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Выключение разделения итогов ...';uk='Вимкнення поділу підсумків ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Выключение разделения итогов завершено';uk='Вимкнення поділу підсумків завершено'"));
	ПараметрыИтогов.Вставить("Действие",               "УстановитьРазделениеИтогов");
	ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.СписокИтогов.ВыделенныеСтроки);
	ПараметрыИтогов.Вставить("Поле",                   "РазделениеИтогов");
	ПараметрыИтогов.Вставить("Значение1",              Ложь);
	ПараметрыИтогов.Вставить("Значение2",              Неопределено);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка выключения разделения итогов.';uk='Помилка виключення розділення підсумків.'"));
	
	УправлениеИтогами(ПараметрыИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОбАгрегатах(Команда)
	
	ОбновитьАгрегатыПоРегистрамНаСервере();
	УстановитьФильтрСпискаАгрегатов();
	
КонецПроцедуры

&НаКлиенте
Процедура АгрегатыПоРегистрамПриАктивизацииСтроки(Элемент)
	
	УстановитьФильтрСпискаАгрегатов();
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ДоступностьЭлементов = Ложь;
		
	ИначеЕсли Элемент.РежимВыделения = РежимВыделенияТаблицы.Одиночный Тогда
		ДоступностьЭлементов = Элемент.ТекущиеДанные.РежимАгрегатов;
	Иначе
		ДоступностьЭлементов = Истина;
	КонецЕсли;
	
	Элементы.АгрегатыКнопкаПерестроить.Доступность                     = ДоступностьЭлементов;
	Элементы.АгрегатыКнопкаОчиститьАгрегатыПоРегистрам.Доступность     = ДоступностьЭлементов;
	Элементы.АгрегатыКнопкаЗаполнитьАгрегатыПоРегистрам.Доступность    = ДоступностьЭлементов;
	Элементы.АгрегатыКнопкаОптимальные.Доступность                     = ДоступностьЭлементов;
	Элементы.АгрегатыКнопкаОтключитьИспользованиеАгрегатов.Доступность = ДоступностьЭлементов;
	Элементы.АгрегатыКнопкаВключитьИспользованиеАгрегатов.Доступность  = ДоступностьЭлементов;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимАгрегатов(Команда)
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Включение режима агрегатов ...';uk='Включення режиму агрегатів ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Включение режима агрегатов завершено';uk='Включення режиму агрегатів завершено'"));
	ПараметрыИтогов.Вставить("Действие",               "УстановитьРежимАгрегатов");
	ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.АгрегатыПоРегистрам.ВыделенныеСтроки);
	ПараметрыИтогов.Вставить("Поле",                   "РежимАгрегатов");
	ПараметрыИтогов.Вставить("Значение1",              Истина);
	ПараметрыИтогов.Вставить("Значение2",              Неопределено);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка включения режима агрегатов.';uk='Помилка включення режиму агрегатів.'"));
	
	УправлениеАгрегатом(ПараметрыИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимИтогов(Команда)
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Включение режима итогов ...';uk='Включення режиму підсумків ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Включение режима итогов завершено';uk='Включення режиму підсумків завершено'"));
	ПараметрыИтогов.Вставить("Действие",               "УстановитьРежимАгрегатов");
	ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.АгрегатыПоРегистрам.ВыделенныеСтроки);
	ПараметрыИтогов.Вставить("Поле",                   "РежимАгрегатов");
	ПараметрыИтогов.Вставить("Значение1",              Ложь);
	ПараметрыИтогов.Вставить("Значение2",              Неопределено);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка включения режима итогов.';uk='Помилка включення режиму підсумків.'"));
	
	УправлениеАгрегатом(ПараметрыИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьИспользованиеАгрегатов(Команда)
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Включение использования агрегатов ...';uk='Включення використання агрегатів ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Включение использования агрегатов завершено';uk='Включення використання агрегатів завершено'"));
	ПараметрыИтогов.Вставить("Действие",               "УстановитьИспользованиеАгрегатов");
	ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.АгрегатыПоРегистрам.ВыделенныеСтроки);
	ПараметрыИтогов.Вставить("Поле",                   "ИспользованиеАгрегатов");
	ПараметрыИтогов.Вставить("Значение1",              Истина);
	ПараметрыИтогов.Вставить("Значение2",              Неопределено);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка включения использования агрегатов.';uk='Помилка включення використання агрегатів.'"));
	
	УправлениеАгрегатом(ПараметрыИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьИспользованиеАгрегатов(Команда)
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Выключение использования агрегатов ...';uk='Вимкнення використання агрегатів ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Выключение использования агрегатов завершено';uk='Вимкнення використання агрегатів завершено'"));
	ПараметрыИтогов.Вставить("Действие",               "УстановитьИспользованиеАгрегатов");
	ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.АгрегатыПоРегистрам.ВыделенныеСтроки);
	ПараметрыИтогов.Вставить("Поле",                   "ИспользованиеАгрегатов");
	ПараметрыИтогов.Вставить("Значение1",              Ложь);
	ПараметрыИтогов.Вставить("Значение2",              Неопределено);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка выключения использования агрегатов.';uk='Помилка виключення використання агрегатів.'"));
	
	УправлениеАгрегатом(ПараметрыИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерестроитьАгрегаты(Команда)
	
	КонтекстВыбора = "ПерестроитьАгрегаты";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтносительныйРазмер", ОтносительныйРазмер);
	ПараметрыФормы.Вставить("МинимальныйЭффект",   МинимальныйЭффект);
	ПараметрыФормы.Вставить("РежимПерестроения",   Истина);
	
	ОткрытьФорму("Обработка.УправлениеИтогамиИАгрегатами.Форма.ФормаПараметровПерестроения", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАгрегатыПоРегистрам(Команда)
	
	ТекстВопроса = НСтр("ru='Очистка агрегатов может привести к существенному замедлению отчетов.';uk='Очищення агрегатів може призвести до значного уповільнення звітів.'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Очистить агрегаты';uk='Очистити агрегати'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	
	Обработчик = Новый ОписаниеОповещения("ОчиститьАгрегатыПоРегистрамЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАгрегатыПоРегистрам(Команда)
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Заполнение агрегатов ...';uk='Заповнення агрегатів ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Заполнение агрегатов завершено';uk='Заповнення агрегатів завершене'"));
	ПараметрыИтогов.Вставить("Действие",               "ЗаполнитьАгрегаты");
	ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.АгрегатыПоРегистрам.ВыделенныеСтроки);
	ПараметрыИтогов.Вставить("Поле",                   "Наименование");
	ПараметрыИтогов.Вставить("Значение1",              Неопределено);
	ПараметрыИтогов.Вставить("Значение2",              Неопределено);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка заполнения агрегатов.';uk='Помилка заповнення агрегатів.'"));
	
	УправлениеАгрегатом(ПараметрыИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура АгрегатыОптимальные(Команда)
	
	КонтекстВыбора = "АгрегатыОптимальные";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтносительныйРазмер", ОптимальныйОтносительныйРазмер);
	ПараметрыФормы.Вставить("МинимальныйЭффект",   0);
	ПараметрыФормы.Вставить("РежимПерестроения",   Ложь);
	
	ОткрытьФорму("Обработка.УправлениеИтогамиИАгрегатами.Форма.ФормаПараметровПерестроения", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодРассчитанныхИтогов(Команда)
	
	Результат = Истина;
	ОчиститьСообщения();
	
	МассивДействий = СписокИтогов.НайтиСтроки(Новый Структура("ОборотныйРег", Истина));
	
	Если МассивДействий.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Отсутствуют регистры, для которых можно выполнить данную операцию.';uk='Відсутні регістри, для яких можна виконати дану операцію.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Установка периода рассчитанных итогов ...';uk='Установка періоду розрахованих підсумків ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Установка периода рассчитанных итогов завершена';uk='Установка періоду розрахованих підсумків завершена'"));
	ПараметрыИтогов.Вставить("Действие",               "УстановитьПериодИтогов");
	ПараметрыИтогов.Вставить("МассивСтрок",            МассивДействий);
	ПараметрыИтогов.Вставить("Поле",                   "ПериодИтогов");
	ПараметрыИтогов.Вставить("Значение1",              ОкончаниеПериода(ДобавитьМесяц(РассчитатьИтогиНа, -1)) );
	ПараметрыИтогов.Вставить("Значение2",              ОкончаниеПериода(РассчитатьИтогиНа) );
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка установки периода рассчитанных итогов.';uk='Помилка встановлення періоду розрахованих підсумків.'"));
	ПараметрыИтогов.Вставить("ГрупповаяОбработка",     Истина);
	
	УправлениеИтогами(ПараметрыИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьИспользованиеИтоговБыстрыйДоступ(Команда)
	
	Результат = Истина;
	ОчиститьСообщения();
	
	МассивДействий = СписокИтогов.НайтиСтроки(Новый Структура("ИспользоватьИтоги", Ложь));
	
	Если МассивДействий.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Отсутствуют регистры, для которых можно выполнить данную операцию.';uk='Відсутні регістри, для яких можна виконати дану операцію.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Включение использования итогов ...';uk='Включення використання підсумків ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Включение использования итогов завершено';uk='Включення використання підсумків завершено'"));
	ПараметрыИтогов.Вставить("Действие",               "УстановитьИспользованиеИтогов");
	ПараметрыИтогов.Вставить("МассивСтрок",            МассивДействий);
	ПараметрыИтогов.Вставить("Поле",                   "");
	ПараметрыИтогов.Вставить("Значение1",              Истина);
	ПараметрыИтогов.Вставить("Значение2",              Неопределено);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка включения использования итогов.';uk='Помилка включення використання підсумків.'"));
	ПараметрыИтогов.Вставить("ГрупповаяОбработка",     Истина);
	
	УправлениеИтогами(ПараметрыИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАгрегатыИВыполнитьПерестроение(Команда)
	
	ОчиститьСообщения();
	
	МассивДействий = АгрегатыПоРегистрам.НайтиСтроки(Новый Структура("РежимАгрегатов,ИспользованиеАгрегатов", Истина, Истина));
	
	Если МассивДействий.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Отсутствуют регистры, для которых можно выполнить выбранное действие.';uk='Відсутні регістри, для яких можна виконати обрану дію.'"));
		Возврат;
	КонецЕсли;
	
	ШагПроцесса = 100/МассивДействий.Количество();
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Перестроение агрегатов ...';uk='Перебудування агрегатів ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Перестроение агрегатов завершено';uk='Перебудування агрегатів завершено'"));
	ПараметрыИтогов.Вставить("Действие",               "ПерестроитьАгрегаты");
	ПараметрыИтогов.Вставить("МассивСтрок",            МассивДействий);
	ПараметрыИтогов.Вставить("Поле",                   "");
	ПараметрыИтогов.Вставить("Значение1",              0);
	ПараметрыИтогов.Вставить("Значение2",              0);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка перестроения агрегатов.';uk='Помилка перебудови агрегатів.'"));
	ПараметрыИтогов.Вставить("ГрупповаяОбработка",     Истина);
	
	УправлениеАгрегатом(ПараметрыИтогов);
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Заполнение агрегатов ...';uk='Заповнення агрегатів ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Заполнение агрегатов завершено';uk='Заповнення агрегатів завершене'"));
	ПараметрыИтогов.Вставить("Действие",               "ЗаполнитьАгрегаты");
	ПараметрыИтогов.Вставить("МассивСтрок",            МассивДействий);
	ПараметрыИтогов.Вставить("Поле",                   "");
	ПараметрыИтогов.Вставить("Значение1",              Неопределено);
	ПараметрыИтогов.Вставить("Значение2",              Неопределено);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка заполнения агрегатов.';uk='Помилка заповнення агрегатів.'"));
	
	УправлениеАгрегатом(ПараметрыИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОптимальныеАгрегаты(Команда)
	
	Если АгрегатыПоРегистрам.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Отсутствуют регистры, для которых можно выполнить данную операцию.';uk='Відсутні регістри, для яких можна виконати дану операцію.'"));
		Возврат;
	КонецЕсли;
	
	ПутьКОптимальнымАгрегатам = ВыборПутиККаталогу(ПутьКОптимальнымАгрегатам);
	Если ПустаяСтрока(ПутьКОптимальнымАгрегатам) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Получение списка оптимальных агрегатов ...';uk='Отримання списку оптимальних агрегатів ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Получение списка оптимальных агрегатов завершено';uk='Отримання списку оптимальних агрегатів завершене'"));
	ПараметрыИтогов.Вставить("Действие",               "ПолучитьОптимальныеАгрегаты");
	ПараметрыИтогов.Вставить("МассивСтрок",            АгрегатыПоРегистрам);
	ПараметрыИтогов.Вставить("Поле",                   "");
	ПараметрыИтогов.Вставить("Значение1",              0);
	ПараметрыИтогов.Вставить("Значение2",              Неопределено);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка получения списка оптимальных агрегатов.';uk='Помилка отримання списку оптимальних агрегатів.'"));
	ПараметрыИтогов.Вставить("ГрупповаяОбработка",     Истина);
	
	УправлениеАгрегатом(ПараметрыИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтоги(Команда)
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Пересчет итогов ...';uk='Перерахунок підсумків ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Пересчет итогов завершен';uk='Перерахунок підсумків завершений'"));
	ПараметрыИтогов.Вставить("Действие",               "ПересчитатьИтоги");
	ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.СписокИтогов.ВыделенныеСтроки);
	ПараметрыИтогов.Вставить("Поле",                   "Наименование");
	ПараметрыИтогов.Вставить("Значение1",              Ложь);
	ПараметрыИтогов.Вставить("Значение2",              Неопределено);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка пересчета итогов.';uk='Помилка перерахунку підсумків.'"));
	
	УправлениеИтогами(ПараметрыИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьТекущиеИтоги(Команда)
	
	ПараметрыИтогов = Новый Структура;
	ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Пересчет текущих итогов ...';uk='Перерахунок поточних підсумків ...'"));
	ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Пересчет текущих итогов завершен';uk='Перерахунок поточних підсумків завершений'"));
	ПараметрыИтогов.Вставить("Действие",               "ПересчитатьТекущиеИтоги");
	ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.СписокИтогов.ВыделенныеСтроки);
	ПараметрыИтогов.Вставить("Поле",                   "Наименование");
	ПараметрыИтогов.Вставить("Значение1",              Ложь);
	ПараметрыИтогов.Вставить("Значение2",              Неопределено);
	ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка пересчета текущих итогов.';uk='Помилка перерахунку поточних підсумків.'"));
	
	УправлениеИтогами(ПараметрыИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогиЗаПериод(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ПересчитатьИтогиЗаПериодЗавершение", ЭтотОбъект);
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = ПериодПерерасчетаРегистров;
	Диалог.Показать(Обработчик);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтогиАгрегатыИтоги.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокИтогов.АгрегатыИтоги");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Итоги';uk='Підсумки'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтогиАгрегатыИтоги.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокИтогов.АгрегатыИтоги");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Агрегаты';uk='Агрегати'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтогиАгрегатыИтоги.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокИтогов.АгрегатыИтоги");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Просто итоговый регистр';uk='Просто підсумковий регістр'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтогиИспользоватьТекущиеИтоги.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтогиПериодИтогов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтогиРазделениеИтогов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокИтогов.ОборотныйРег");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СеребристоСерый);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтогиАгрегатыИтоги.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокИтогов.АгрегатыИтоги");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СеребристоСерый);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтогиИспользоватьИтоги.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокИтогов.АгрегатыИтоги");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СеребристоСерый);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АгрегатыПоРегистрам.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АгрегатыПоРегистрам.ПостроениеОптимально");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Истина, Ложь, Ложь, Ложь, ));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики асинхронных диалогов

&НаКлиенте
Процедура ОчиститьАгрегатыПоРегистрамЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПараметрыИтогов = Новый Структура;
		ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Очистка агрегатов ...';uk='Очищення агрегатів ...'"));
		ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Очистка агрегатов завершена';uk='Очищення агрегатів завершене'"));
		ПараметрыИтогов.Вставить("Действие",               "ОчиститьАгрегаты");
		ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.АгрегатыПоРегистрам.ВыделенныеСтроки);
		ПараметрыИтогов.Вставить("Поле",                   "Наименование");
		ПараметрыИтогов.Вставить("Значение1",              Неопределено);
		ПараметрыИтогов.Вставить("Значение2",              Неопределено);
		ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка очистки агрегатов.';uk='Помилка очищення агрегатів.'"));
		
		УправлениеАгрегатом(ПараметрыИтогов);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогиЗаПериодЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		ПериодПерерасчетаРегистров = ВыбранноеЗначение;
		
		ПараметрыИтогов = Новый Структура;
		ПараметрыИтогов.Вставить("ОбрабатыватьЗаголовок",  НСтр("ru='Пересчет итогов за период ...';uk='Перерахунок підсумків за період ...'"));
		ПараметрыИтогов.Вставить("ПослеПроцесса",          НСтр("ru='Пересчет итогов за период завершен';uk='Перерахунок підсумків за період завершений'"));
		ПараметрыИтогов.Вставить("Действие",               "ПересчитатьИтогиЗаПериод");
		ПараметрыИтогов.Вставить("МассивСтрок",            Элементы.СписокИтогов.ВыделенныеСтроки);
		ПараметрыИтогов.Вставить("Поле",                   "Наименование");
		ПараметрыИтогов.Вставить("Значение1",              ПериодПерерасчетаРегистров.ДатаНачала);
		ПараметрыИтогов.Вставить("Значение2",              ПериодПерерасчетаРегистров.ДатаОкончания);
		ПараметрыИтогов.Вставить("ТекстСообщенияОбОшибке", НСтр("ru='Ошибка пересчета итогов за период.';uk='Помилка перерахунку підсумків за період.'"));
		
		УправлениеИтогами(ПараметрыИтогов);
		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура УстановитьФильтрСпискаАгрегатов()
	
	ТекущиеДанные = Элементы.АгрегатыПоРегистрам.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Фильтр = Новый ФиксированнаяСтруктура("ИмяМетаданного", ТекущиеДанные.ИмяМетаданного);
		НовыйЗаголовок = Префикс() +  " " + ТекущиеДанные.Наименование;
	Иначе
		Фильтр = Новый ФиксированнаяСтруктура("ИмяМетаданного", "");
		НовыйЗаголовок = Префикс();
	КонецЕсли;
	
	Элементы.СписокАгрегатов.ОтборСтрок = Фильтр;
	
	Если Элементы.СписокАгрегатов.Заголовок <> НовыйЗаголовок Тогда
		Элементы.СписокАгрегатов.Заголовок = НовыйЗаголовок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеАгрегатом(Знач ПараметрыИтогов)
	
	Результат = Истина;
	ОчиститьСообщения();
	Выбранные = ПараметрыИтогов.МассивСтрок;
	
	Если Выбранные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШагПроцесса = 100/Выбранные.Количество();
	Действие = НРег(ПараметрыИтогов.Действие);
	
	Если ПараметрыИтогов.Свойство("ГрупповаяОбработка") Тогда
		ТребуетсяПрерватьПослеОшибки = ?(ПараметрыИтогов.ГрупповаяОбработка, Ложь, ПрерыватьПриОшибке);
	Иначе
		ТребуетсяПрерватьПослеОшибки = ПрерыватьПриОшибке;
	КонецЕсли;
	
	Для Счетчик = 1 По Выбранные.Количество() Цикл
		
		Если ТипЗнч(Выбранные[Счетчик - 1]) = Тип("Число") Тогда
			ВыбраннаяСтрока = АгрегатыПоРегистрам.НайтиПоИдентификатору(Выбранные[Счетчик-1]);
		Иначе
			ВыбраннаяСтрока = Выбранные[Счетчик-1];
		КонецЕсли;
		
		ПолеСообщенияОбОшибке = ?(
			ПустаяСтрока(ПараметрыИтогов.Поле),
			"",
			"АгрегатыПоРегистрам[" + Выбранные[Счетчик-1] + "]."+ПараметрыИтогов.Поле);
		
		Если НЕ ВыбраннаяСтрока.РежимАгрегатов
		   И НЕ (    ВРег(Действие) = ВРег("УстановитьРежимАгрегатов")
		         ИЛИ ВРег(Действие) = ВРег("ПолучитьОптимальныеАгрегаты") ) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Операция невозможна в режиме итогов';uk='Операція неможлива в режимі підсумків'"),
				,
				ПолеСообщенияОбОшибке);
			Продолжить;
		КонецЕсли;
		
		Состояние(ПараметрыИтогов.ОбрабатыватьЗаголовок,
		          Счетчик * ШагПроцесса,
		          ВыбраннаяСтрока.Наименование);
		
		АдресФайлаВоВременномХранилище = "";
		Значение1 = ПараметрыИтогов.Значение1;
		Значение2 = ПараметрыИтогов.Значение2;
		
		Результат = УстановитьПараметрыАгрегатаНаСервере(
			ВыбраннаяСтрока.ИмяМетаданного,
			ПараметрыИтогов.Действие,
			Значение1,
			Значение2,
			ПолеСообщенияОбОшибке,
			ПараметрыИтогов.ТекстСообщенияОбОшибке,
			АдресФайлаВоВременномХранилище);
		
		Если Результат И ВРег(Действие) = ВРег("ПолучитьОптимальныеАгрегаты") Тогда
			
			СохранитьОптимальныеНастройкиАгрегатов(
				ВыбраннаяСтрока.ИмяМетаданного,
				АдресФайлаВоВременномХранилище,
				"АгрегатыПоРегистрам[" + Выбранные[Счетчик - 1] + "]." + ПараметрыИтогов.Поле);
			
			ВыбраннаяСтрока.ПостроениеОптимально = Значение1;
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
		Если НЕ Результат И ТребуетсяПрерватьПослеОшибки Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВРег(Действие) = ВРег("УстановитьРежимАгрегатов")
	 ИЛИ ВРег(Действие) = ВРег("УстановитьИспользованиеАгрегатов") Тогда
		
		ОбновитьСписокИтоговНаСервере();
	КонецЕсли;
	
	ОбновитьАгрегатыПоРегистрамНаСервере();
	
	Состояние(ПараметрыИтогов.ПослеПроцесса);
	УстановитьФильтрСпискаАгрегатов();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеИтогами(Знач ПараметрыИтогов)
	
	Результат = Истина;
	ОчиститьСообщения();
	
	Выбранные = ПараметрыИтогов.МассивСтрок;
	Если Выбранные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШагПроцесса = 100/Выбранные.Количество();
	Действие = НРег(ПараметрыИтогов.Действие);
	
	Если ПараметрыИтогов.Свойство("ГрупповаяОбработка") Тогда
		ТребуетсяПрерватьПослеОшибки = ?(ПараметрыИтогов.ГрупповаяОбработка, Ложь, ПрерыватьПриОшибке);
	Иначе
		ТребуетсяПрерватьПослеОшибки = ПрерыватьПриОшибке;
	КонецЕсли;
	
	Для Счетчик=1 По Выбранные.Количество() Цикл
		
		Если ТипЗнч(Выбранные[Счетчик-1]) = Тип("Число") Тогда
			
			ВыбраннаяСтрока = СписокИтогов.НайтиПоИдентификатору(Выбранные[Счетчик-1]);
		Иначе
			ВыбраннаяСтрока = Выбранные[Счетчик-1];
		КонецЕсли;
		
		Состояние(ПараметрыИтогов.ОбрабатыватьЗаголовок,
		          Счетчик * ШагПроцесса,
		          ВыбраннаяСтрока.Наименование);
		
		Если      ВРег(Действие) = ВРег("УстановитьИспользованиеИтогов") Тогда
			Если ВыбраннаяСтрока.АгрегатыИтоги = 1 Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ВРег(Действие) = ВРег("ИспользоватьТекущиеИтоги") Тогда
			Если ВыбраннаяСтрока.АгрегатыИтоги = 1 ИЛИ НЕ ВыбраннаяСтрока.ОборотныйРег Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ВРег(Действие) = ВРег("УстановитьПериодИтогов") Тогда
			Если ВыбраннаяСтрока.АгрегатыИтоги = 1 ИЛИ НЕ ВыбраннаяСтрока.ОборотныйРег Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ВРег(Действие) = ВРег("УстановитьРазделениеИтогов") Тогда
			Если НЕ ВыбраннаяСтрока.РазрешитьРазделениеИтогов Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ВРег(Действие) = ВРег("ПересчитатьИтоги") Тогда
			Если ВыбраннаяСтрока.АгрегатыИтоги Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ВРег(Действие) = ВРег("ПересчитатьИтогиЗаПериод") Тогда
			Если ВыбраннаяСтрока.АгрегатыИтоги = 1 ИЛИ НЕ ВыбраннаяСтрока.ОборотныйРег Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ВРег(Действие) = ВРег("ПересчитатьТекущиеИтоги") Тогда
			Если НЕ ВыбраннаяСтрока.ОборотныйРег Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Результат = УстановитьПараметрыРегистраНаСервере(
			ВыбраннаяСтрока.Тип,
			ВыбраннаяСтрока.ИмяМетаданного,
			ПараметрыИтогов.Действие,
			ПараметрыИтогов.Значение1,
			ПараметрыИтогов.Значение2,
			?(ПустаяСтрока(ПараметрыИтогов.Поле),
			  "",
			  "СписокИтогов[" + Выбранные[Счетчик - 1] + "]." + ПараметрыИтогов.Поле),
			ПараметрыИтогов.ТекстСообщенияОбОшибке);
		
		ОбработкаПрерыванияПользователя();
		
		Если НЕ Результат И ТребуетсяПрерватьПослеОшибки Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ОбновитьСписокИтоговНаСервере();
	
	Состояние(ПараметрыИтогов.ПослеПроцесса);
	
КонецПроцедуры

&НаКлиенте
Функция СохранитьОптимальныеНастройкиАгрегатов(Знач ИмяМетаданного, Знач АдресФайлаВоВременномХранилище, Знач Поле)
	
	Попытка
		Если ПутьКОптимальнымАгрегатам = "web" Тогда
			ПолноеИмяФайла = ИмяМетаданного + ".xml";
		Иначе
			ПолноеИмяФайла = ПутьКОптимальнымАгрегатам + "\" + ИмяМетаданного + ".xml";
		КонецЕсли;
#Если ВебКлиент Тогда
		ПолучитьФайл(АдресФайлаВоВременномХранилище, ПолноеИмяФайла, Истина);
#Иначе
		ПолучитьФайл(АдресФайлаВоВременномХранилище, ПолноеИмяФайла, Ложь);
#КонецЕсли
		УдалитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
		
		Возврат Истина;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка записи файла оптимальных агрегатов:"
"""%1"".';uk='Помилка запису файлу оптимальних агрегатів:"
"""%1"".'"),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке) ));
		
		УдалитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ВыборПутиККаталогу(Знач ТекущийКаталог)
	
	Каталог = "";
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ВыборКаталога = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыборКаталога.Каталог = ТекущийКаталог;
		ВыборКаталога.Заголовок = НСтр("ru='Выберите каталог для размещения файлов с оптимальными агрегатами';uk='Виберіть каталог для розміщення файлів з оптимальними агрегатами'");
		
		Если ВыборКаталога.Выбрать() Тогда
			Каталог = ВыборКаталога.Каталог;
		КонецЕсли;
	Иначе
		Каталог = "web";
	КонецЕсли;
	
	Возврат Каталог;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент, Сервер

&НаКлиентеНаСервереБезКонтекста
Функция ОкончаниеПериода(Знач Дата)
	
	Возврат КонецДня(КонецМесяца(Дата));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Префикс()
	
	Возврат НСтр("ru='Агрегаты регистра';uk='Агрегати регістра'");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера, Сервер

&НаСервере
Процедура ОбновитьСписокИтоговНаСервере()
	
	Менеджеры = Новый Массив;
	Менеджеры.Добавить(РегистрыНакопления);
	Менеджеры.Добавить(РегистрыБухгалтерии);
	
	Для Каждого СтрокаТаблицы Из СписокИтогов Цикл
		
		Регистр = Менеджеры[СтрокаТаблицы.Тип][СтрокаТаблицы.ИмяМетаданного];
		
		СтрокаТаблицы.ИспользоватьИтоги = Регистр.ПолучитьИспользованиеИтогов();
		СтрокаТаблицы.РазделениеИтогов  = Регистр.ПолучитьРежимРазделенияИтогов();
		
		Если СтрокаТаблицы.ОборотныйРег Тогда
			
			СтрокаТаблицы.ИспользоватьТекущиеИтоги = Регистр.ПолучитьИспользованиеТекущихИтогов();
			СтрокаТаблицы.ПериодИтогов             = Регистр.ПолучитьМаксимальныйПериодРассчитанныхИтогов();
			СтрокаТаблицы.АгрегатыИтоги            = 2;
			
		Иначе
			
			СтрокаТаблицы.ИспользоватьТекущиеИтоги = Ложь;
			СтрокаТаблицы.ПериодИтогов             = Неопределено;
			СтрокаТаблицы.АгрегатыИтоги            = Регистр.ПолучитьРежимАгрегатов();
			
			Если СтрокаТаблицы.АгрегатыИтоги Тогда
				СтрокаТаблицы.ИспользоватьИтоги = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ГруппаИтоговЗаголовок = НСтр("ru='Итоги';uk='Підсумки'");
	КоличествоИтогов = СписокИтогов.Количество();
	Если КоличествоИтогов > 0 Тогда
		ГруппаИтоговЗаголовок = ГруппаИтоговЗаголовок + " (" + Формат(КоличествоИтогов, "ЧГ=") + ")";
	КонецЕсли;
	Элементы.ГруппаИтогов.Заголовок = ГруппаИтоговЗаголовок;
КонецПроцедуры

&НаСервере
Процедура ОбновитьАгрегатыПоРегистрамНаСервере()
	
	СписокАгрегатовРегистра.Очистить();
	
	Для Каждого СтрокаТаблицы Из АгрегатыПоРегистрам Цикл
		
		МенеджерРегистра = РегистрыНакопления[СтрокаТаблицы.ИмяМетаданного];
		
		СтрокаТаблицы.РежимАгрегатов         = МенеджерРегистра.ПолучитьРежимАгрегатов();
		СтрокаТаблицы.ИспользованиеАгрегатов = МенеджерРегистра.ПолучитьИспользованиеАгрегатов();

		Агрегаты = МенеджерРегистра.ПолучитьАгрегаты();
		СтрокаТаблицы.ДатаПостроения     = Агрегаты.ДатаПостроения;
		СтрокаТаблицы.Размер             = Агрегаты.Размер;
		СтрокаТаблицы.ОграничениеРазмера = Агрегаты.ОграничениеРазмера;
		СтрокаТаблицы.Эффект             = Агрегаты.Эффект;
		
		Для Каждого Агрегат Из Агрегаты.Агрегаты Цикл
			
			СтрокаАгрегатовРегистра = СписокАгрегатовРегистра.Добавить();
			
			СтрокаИзмерений = "";
			Для Каждого Измерения Из Агрегат.Измерения Цикл
				СтрокаИзмерений = СтрокаИзмерений + Измерения + ", ";
			КонецЦикла;
			СтрокаИзмерений = Сред(СтрокаИзмерений, 1, СтрДлина(СтрокаИзмерений)-2);
			
			СтрокаАгрегатовРегистра.ИмяМетаданного = СтрокаТаблицы.ИмяМетаданного;
			СтрокаАгрегатовРегистра.Периодичность  = Строка(Агрегат.Периодичность);
			СтрокаАгрегатовРегистра.Измерения      = СтрокаИзмерений;
			СтрокаАгрегатовРегистра.Использование  = Агрегат.Использование;
			СтрокаАгрегатовРегистра.НачалоПериода  = Агрегат.НачалоПериода;
			СтрокаАгрегатовРегистра.КонецПериода   = Агрегат.КонецПериода;
			СтрокаАгрегатовРегистра.Размер         = Агрегат.Размер;
			
		КонецЦикла;
	КонецЦикла;
	
	СписокАгрегатовРегистра.Сортировать("Использование Убыв");
	
	ГруппаАгрегатыЗаголовок = НСтр("ru='Агрегаты';uk='Агрегати'");
	КоличествоАгрегатов = АгрегатыПоРегистрам.Количество();
	Если КоличествоАгрегатов > 0 Тогда
		ГруппаАгрегатыЗаголовок = ГруппаАгрегатыЗаголовок + " (" + Формат(КоличествоАгрегатов, "ЧГ=") + ")";
	КонецЕсли;
	Элементы.ГруппаАгрегаты.Заголовок = ГруппаАгрегатыЗаголовок;
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьПараметрыРегистраНаСервере(Знач ВидРегистра,
                                             Знач ИмяРегистра,
                                             Знач Действие,
                                             Знач Значение1,
                                             Знач Значение2 = Неопределено,
                                             Знач ПолеОшибки,
                                             Знач СообщениеОбОшибке)
	
	Менеджеры = Новый Массив;
	Менеджеры.Добавить(РегистрыНакопления);
	Менеджеры.Добавить(РегистрыБухгалтерии);
	
	Менеджер = Менеджеры[ВидРегистра][ИмяРегистра];
	Действие = НРег(Действие);
	
	Попытка
		
		Если      ВРег(Действие) = ВРег("УстановитьИспользованиеИтогов") Тогда
			Менеджер.УстановитьИспользованиеИтогов(Значение1);
			
		ИначеЕсли ВРег(Действие) = ВРег("ИспользоватьТекущиеИтоги") Тогда
			Менеджер.УстановитьИспользованиеТекущихИтогов(Значение1);
			
		ИначеЕсли ВРег(Действие) = ВРег("УстановитьРазделениеИтогов") Тогда
			Менеджер.УстановитьРежимРазделенияИтогов(Значение1);
			
		ИначеЕсли ВРег(Действие) = ВРег("УстановитьПериодИтогов") Тогда
			
			Если ВидРегистра = 0 Тогда
				Дата = Значение1;
				
			ИначеЕсли ВидРегистра = 1 Тогда
				Дата = Значение2;
			КонецЕсли;
			
			Менеджер.УстановитьМаксимальныйПериодРассчитанныхИтогов(Дата);
			
		ИначеЕсли ВРег(Действие) = ВРег("ПересчитатьИтоги") Тогда
			Менеджер.ПересчитатьИтоги();
			
		ИначеЕсли ВРег(Действие) = ВРег("ПересчитатьТекущиеИтоги") Тогда
			Менеджер.ПересчитатьТекущиеИтоги();
			
		ИначеЕсли ВРег(Действие) = ВРег("ПересчитатьИтогиЗаПериод") Тогда
			Менеджер.ПересчитатьИтогиЗаПериод(Значение1, Значение2);
			
		Иначе
			ВызватьИсключение НСтр("ru='Неправильное имя параметра';uk=""Неправильне ім'я параметра""") + "(1): " + Действие;
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СообщениеОбОшибке
			+ Символы.ПС
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			,
			ПолеОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьПараметрыАгрегатаНаСервере(Знач ИмяРегистра,
                                             Знач Действие,
                                             ЗначениеДействия1 = Истина,
                                             Знач ЗначениеДействия2 = Неопределено,
                                             Знач ПолеФормы,
                                             Знач СообщениеОбОшибке = "",
                                             АдресФайлаВоВременномХранилище = "")
	
	МенеджерРегистра = РегистрыНакопления[ИмяРегистра];
	МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
	Действие = НРег(Действие);
	ОК = Истина;
	
	Попытка
		
		Если      ВРег(Действие) = ВРег("УстановитьРежимАгрегатов") Тогда
			МенеджерРегистра.УстановитьРежимАгрегатов(ЗначениеДействия1);
			
		ИначеЕсли ВРег(Действие) = ВРег("УстановитьИспользованиеАгрегатов") Тогда
			МенеджерРегистра.УстановитьИспользованиеАгрегатов(ЗначениеДействия1);
			
		ИначеЕсли ВРег(Действие) = ВРег("ЗаполнитьАгрегаты") Тогда
			МенеджерРегистра.ОбновитьАгрегаты(Ложь);
			
		ИначеЕсли ВРег(Действие) = ВРег("ПерестроитьАгрегаты") Тогда
			МенеджерРегистра.ПерестроитьИспользованиеАгрегатов(ЗначениеДействия1, ЗначениеДействия2);
			
		ИначеЕсли ВРег(Действие) = ВРег("ОчиститьАгрегаты") Тогда
			МенеджерРегистра.ОчиститьАгрегаты();
			
		ИначеЕсли ВРег(Действие) = ВРег("ПолучитьОптимальныеАгрегаты") Тогда
			
			ОптимальныеАгрегаты = МенеджерРегистра.ОпределитьОптимальныеАгрегаты(ЗначениеДействия1);
			ЗначениеДействия1 = Ложь;
			НайденныеАгрегаты = Новый Соответствие;
			МетаданныеАгрегаты = МетаданныеРегистра.Агрегаты;
			
			Для Индекс1=0 По ОптимальныеАгрегаты.Агрегаты.ВГраница() Цикл
				
				ЗначениеДействия1 = Ложь;
				Для Индекс2=0 По МетаданныеАгрегаты.Количество() - 1 Цикл
					
					Если ОптимальныеАгрегаты.Агрегаты[Индекс1].Периодичность
					   = МетаданныеАгрегаты[Индекс2].Периодичность
					   И НайденныеАгрегаты[Индекс2] = Неопределено
					   И ИзмеренияАгрегатовРавны(ОптимальныеАгрегаты.Агрегаты[Индекс1],
					                             МетаданныеАгрегаты[Индекс2]) Тогда
						
						НайденныеАгрегаты.Вставить(Индекс2, Истина);
						ЗначениеДействия1 = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеДействия1 Тогда
					
					Продолжить;
				КонецЕсли;
				
				Для Индекс2=0 По МетаданныеАгрегаты.Количество() - 1 Цикл
					
					Если ОптимальныеАгрегаты.Агрегаты[Индекс1].Периодичность
					     = ПериодичностьАгрегатаРегистраНакопления.Авто
					   И НайденныеАгрегаты[Индекс2] = Неопределено
					   И ИзмеренияАгрегатовРавны(ОптимальныеАгрегаты.Агрегаты[Индекс1],
					                             МетаданныеАгрегаты[Индекс2]) Тогда
						
						НайденныеАгрегаты.Вставить(Индекс2, Истина);
						ЗначениеДействия1 = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЗначениеДействия1 Тогда
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			
			ЗаписьXML = Новый ЗаписьXML();
			ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОптимальныеАгрегаты);
			ЗаписьXML.Закрыть();
			
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(
				Новый ДвоичныеДанные(ИмяВременногоФайла));
			
			УдалитьФайлы(ИмяВременногоФайла);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неправильное имя параметра: %1';uk=""Неправильне ім'я параметра: %1"""),
				Действие);
		КонецЕсли;
		
	Исключение
		СообщениеОбОшибке = СообщениеОбОшибке + " (" + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + ")";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, , ПолеФормы);
		ОК = Ложь;
	КонецПопытки;
	
	Возврат ОК;
	
КонецФункции

&НаСервере
Процедура УстановитьРасширенныйРежим()
	
	Если ПолныеВозможности Тогда
		Заголовок        = НСтр("ru='Управление итогами - полные возможности';uk='Управління підсумками - повні можливості'");
		ТекстГиперСсылки = НСтр("ru='Часто используемые возможности';uk='Часто використовувані можливості'");
		Элементы.Операции.ТекущаяСтраница = Элементы.РасширенныеВозможности;
		Элементы.БыстрыйДоступ.Видимость          = Ложь;
		Элементы.РасширенныеВозможности.Видимость = Истина;
	Иначе
		Заголовок        = НСтр("ru='Управление итогами - часто используемые возможности';uk='Управління підсумками - часто використовувані можливості'");
		ТекстГиперСсылки = НСтр("ru='Полные возможности';uk='Повні можливості'");
		Элементы.Операции.ТекущаяСтраница = Элементы.БыстрыйДоступ;
		Элементы.БыстрыйДоступ.Видимость          = Истина;
		Элементы.РасширенныеВозможности.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура ПрочитатьИнформациюПоРегистрам()
	
	СписокИтогов.Очистить();
	АгрегатыПоРегистрам.Очистить();
	СписокАгрегатовРегистра.Очистить();
	
	Для Каждого Регистр Из Метаданные.РегистрыБухгалтерии Цикл
		
		Если НЕ ПравоДоступа("УправлениеИтогами", Регистр) Тогда
			Продолжить;
		КонецЕсли;
		
		Представление = Регистр.Представление() + НСтр("ru=' (Регистр Бухгалтерии)';uk=' (Регістр Бухгалтерії)'");
		Картинка = БиблиотекаКартинок.РегистрБухгалтерии;
		
		СтрокаТаблицы = СписокИтогов.Добавить();
		СтрокаТаблицы.Тип                       = 1;
		СтрокаТаблицы.ИмяМетаданного            = Регистр.Имя;
		СтрокаТаблицы.Картинка                  = Картинка;
		СтрокаТаблицы.ОборотныйРег              = Истина;
		СтрокаТаблицы.Наименование              = Представление;
		СтрокаТаблицы.РазрешитьРазделениеИтогов = Регистр.РазрешитьРазделениеИтогов ;
		
	КонецЦикла;
	
	Для Каждого Регистр Из Метаданные.РегистрыНакопления Цикл
		
		Постфикс = "";
		Оборотный = Истина;
		Если Регистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
			Оборотный = Ложь;
			Постфикс = НСтр("ru=' (Оборотный Регистр Накопления)';uk=' (Оборотний Регістр Накопичення)'");
		Иначе
			Оборотный = Истина;
			Постфикс = НСтр("ru=' (Регистр Накопления)';uk=' (Регістр Накопичення)'");
		КонецЕсли;
		
		Если НЕ ПравоДоступа("УправлениеИтогами", Регистр) Тогда
			Продолжить;
		КонецЕсли;
		
		Представление = Регистр.Представление() + Постфикс;
		Картинка = БиблиотекаКартинок.РегистрНакопления;
		
		СтрокаТаблицы = СписокИтогов.Добавить();
		СтрокаТаблицы.Тип                       = 0;
		СтрокаТаблицы.ИмяМетаданного            = Регистр.Имя;
		СтрокаТаблицы.Картинка                  = Картинка;
		СтрокаТаблицы.ОборотныйРег              = Оборотный;
		СтрокаТаблицы.Наименование              = Представление;
		СтрокаТаблицы.РазрешитьРазделениеИтогов = Регистр.РазрешитьРазделениеИтогов ;
		
	КонецЦикла;
	
	Для Каждого Регистр Из Метаданные.РегистрыНакопления Цикл
		
		Если Регистр.ВидРегистра <> Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПравоДоступа("УправлениеИтогами", Регистр) Тогда
			Продолжить;
		КонецЕсли;
		
		Представление = Регистр.Представление();
		Картинка = БиблиотекаКартинок.РегистрНакопления;
		
		Агрегаты = Регистр.Агрегаты;
		
		Если Агрегаты.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = АгрегатыПоРегистрам.Добавить();
		СтрокаТаблицы.ИмяМетаданного       = Регистр.Имя;
		СтрокаТаблицы.Картинка             = Картинка;
		СтрокаТаблицы.Наименование         = Представление;
		СтрокаТаблицы.ПостроениеОптимально = Истина;
		
	КонецЦикла;
	
	СписокИтогов.Сортировать("Наименование Возр");
	АгрегатыПоРегистрам.Сортировать("Наименование Возр");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзмеренияАгрегатовРавны(Знач ОптимальныйАгрегат, Знач КонфАгрегат)
	
	Если ОптимальныйАгрегат.Измерения.ВГраница() <> КонфАгрегат.Измерения.ВГраница() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Индекс1 = 0 По ОптимальныйАгрегат.Измерения.ВГраница() Цикл
		
		Найдено = Ложь;
		Для Индекс2 = 0 По КонфАгрегат.Измерения.ВГраница() Цикл
			
			Если ОптимальныйАгрегат.Измерения[Индекс1] = КонфАгрегат.Измерения[Индекс2].Имя Тогда
				Найдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Найдено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти
