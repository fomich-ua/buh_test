#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЛокальныеПеременные

Перем ТекущиеОбработчики;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПередВыгрузкойДанных(Контейнер) Экспорт
	
	// todo Временно
	ВыгрузкаЗагрузкаДанныхСлужебный.ПередВыгрузкойДанных(Контейнер);
	
	// ЗарегистрированныеОбработчики
	ОтборОбработчиков = Новый Структура();
	ОтборОбработчиков.Вставить("ПередВыгрузкойДанных", Истина);
	ОписанияОбработчиков = ТекущиеОбработчики.НайтиСтроки(ОтборОбработчиков);
	Для Каждого ОписаниеОбработчика Из ОписанияОбработчиков Цикл
		ОписаниеОбработчика.Обработчик.ПередВыгрузкойДанных(Контейнер);
	КонецЦикла;
	
	// Обработчики событий БСП
	ОбработчикиПрограммныхСобытийБСП = ОбщегоНазначенияБТС.ПолучитьОбработчикиПрограммныхСобытийБСП(
		"ТехнологияСервиса.ВыгрузкаЗагрузкаДанных\ПередВыгрузкойДанных");
	Для Каждого ОбработчикПрограммныхСобытийБСП Из ОбработчикиПрограммныхСобытийБСП Цикл
		ОбработчикПрограммныхСобытийБСП.Модуль.ПередВыгрузкойДанных(Контейнер);
	КонецЦикла;
	
	// Переопределяемая процедура
	ВыгрузкаЗагрузкаДанныхПереопределяемый.ПередВыгрузкойДанных(Контейнер);
	
КонецПроцедуры

// См. описание к процедуре ПриДобавленииСлужебныхСобытий() общего модуля ВыгрузкаЗагрузкаДанныхСлужебныйСобытия
//
Процедура ПередВыгрузкойТипа(Контейнер, Сериализатор, ОбъектМетаданных, Отказ) Экспорт
	
	ОтборОбработчиков = Новый Структура();
	ОтборОбработчиков.Вставить("ПередВыгрузкойТипа", Истина);
	ОтборОбработчиков.Вставить("ОбъектМетаданных", ОбъектМетаданных);
	ОписанияОбработчиков = ТекущиеОбработчики.НайтиСтроки(ОтборОбработчиков);
	Для Каждого ОписаниеОбработчика Из ОписанияОбработчиков Цикл
		ОписаниеОбработчика.Обработчик.ПередВыгрузкойТипа(Контейнер, Сериализатор, ОбъектМетаданных, Отказ);
	КонецЦикла;
	
КонецПроцедуры

//Вызывается перед выгрузкой объекта.
// см. "ПриРегистрацииОбработчиковВыгрузкиДанных"
//
Процедура ПередВыгрузкойОбъекта(Контейнер, МенеджерВыгрузкиОбъекта, Сериализатор, Объект, Артефакты, Отказ) Экспорт
	
	ОтборОбработчиков = Новый Структура();
	ОтборОбработчиков.Вставить("ПередВыгрузкойОбъекта", Истина);
	ОтборОбработчиков.Вставить("ОбъектМетаданных", Объект.Метаданные());
	ОписанияОбработчиков = ТекущиеОбработчики.НайтиСтроки(ОтборОбработчиков);
	
	Для Каждого ОписаниеОбработчика Из ОписанияОбработчиков Цикл
		
		Если ОписаниеОбработчика.Версия = ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ВерсияОбработчиков1_0_0_0() Тогда
			
			ОписаниеОбработчика.Обработчик.ПередВыгрузкойОбъекта(Контейнер, Сериализатор, Объект, Артефакты, Отказ);
			
		Иначе
			
			ОписаниеОбработчика.Обработчик.ПередВыгрузкойОбъекта(Контейнер, МенеджерВыгрузкиОбъекта, Сериализатор, Объект, Артефакты, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Вызывается перед выгрузкой объекта данных.
// см. "ПриРегистрацииОбработчиковВыгрузкиДанных"
//
Процедура ПослеВыгрузкиОбъекта(Контейнер, МенеджерВыгрузкиОбъекта, Сериализатор, Объект, Артефакты) Экспорт
	
	ОтборОбработчиков = Новый Структура();
	ОтборОбработчиков.Вставить("ПослеВыгрузкиОбъекта", Истина);
	ОтборОбработчиков.Вставить("ОбъектМетаданных", Объект.Метаданные());
	ОписанияОбработчиков = ТекущиеОбработчики.НайтиСтроки(ОтборОбработчиков);
	
	Для Каждого ОписаниеОбработчика Из ОписанияОбработчиков Цикл
		
		Если ОписаниеОбработчика.Версия = ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ВерсияОбработчиков1_0_0_0() Тогда
			
			ОписаниеОбработчика.Обработчик.ПослеВыгрузкиОбъекта(Контейнер, Сериализатор, Объект, Артефакты);
			
		Иначе
			
			ОписаниеОбработчика.Обработчик.ПослеВыгрузкиОбъекта(Контейнер, МенеджерВыгрузкиОбъекта, Сериализатор, Объект, Артефакты);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обработчики после выгрузки определенного типа данных.
//
// Параметры:
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//	Сериализатор - СериализаторXDTO - сериализатор.
//	ОбъектМетаданных - ОбъектМетаданных - объект метаданных.
//
Процедура ПослеВыгрузкиТипа(Контейнер, Сериализатор, ОбъектМетаданных) Экспорт
	
	ОтборОбработчиков = Новый Структура();
	ОтборОбработчиков.Вставить("ПослеВыгрузкиТипа", Истина);
	ОтборОбработчиков.Вставить("ОбъектМетаданных", ОбъектМетаданных);
	ОписанияОбработчиков = ТекущиеОбработчики.НайтиСтроки(ОтборОбработчиков);
	Для Каждого ОписаниеОбработчика Из ОписанияОбработчиков Цикл
		ОписаниеОбработчика.Обработчик.ПослеВыгрузкиТипа(Контейнер, Сериализатор, ОбъектМетаданных);
	КонецЦикла;
	
КонецПроцедуры

// Вызывается после выгрузки данных.
//
// Параметры:
//  Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//    контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//    к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//
Процедура ПослеВыгрузкиДанных(Контейнер) Экспорт
	
	// ЗарегистрированныеОбработчики
	ОтборОбработчиков = Новый Структура();
	ОтборОбработчиков.Вставить("ПослеВыгрузкиДанных", Истина);
	ОписанияОбработчиков = ТекущиеОбработчики.НайтиСтроки(ОтборОбработчиков);
	Для Каждого ОписаниеОбработчика Из ОписанияОбработчиков Цикл
		ОписаниеОбработчика.Обработчик.ПослеВыгрузкиДанных(Контейнер);
	КонецЦикла;
	
	// Обработчики событий БСП
	ОбработчикиПрограммныхСобытийБСП = ОбщегоНазначенияБТС.ПолучитьОбработчикиПрограммныхСобытийБСП(
		"ТехнологияСервиса.ВыгрузкаЗагрузкаДанных\ПослеВыгрузкиДанных");
	Для Каждого ОбработчикПрограммныхСобытийБСП Из ОбработчикиПрограммныхСобытийБСП Цикл
		ОбработчикПрограммныхСобытийБСП.Модуль.ПослеВыгрузкиДанных(Контейнер);
	КонецЦикла;
	
	// Переопределяемая процедура
	ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеВыгрузкиДанных(Контейнер);
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ТекущиеОбработчики = Новый ТаблицаЗначений();

ТекущиеОбработчики.Колонки.Добавить("ОбъектМетаданных");
ТекущиеОбработчики.Колонки.Добавить("Обработчик");
ТекущиеОбработчики.Колонки.Добавить("Версия", Новый ОписаниеТипов("Строка"));

ТекущиеОбработчики.Колонки.Добавить("ПередВыгрузкойДанных", Новый ОписаниеТипов("Булево"));
ТекущиеОбработчики.Колонки.Добавить("ПередВыгрузкойТипа", Новый ОписаниеТипов("Булево"));
ТекущиеОбработчики.Колонки.Добавить("ПередВыгрузкойОбъекта", Новый ОписаниеТипов("Булево"));
ТекущиеОбработчики.Колонки.Добавить("ПослеВыгрузкиОбъекта", Новый ОписаниеТипов("Булево"));
ТекущиеОбработчики.Колонки.Добавить("ПослеВыгрузкиТипа", Новый ОписаниеТипов("Булево"));
ТекущиеОбработчики.Колонки.Добавить("ПослеВыгрузкиДанных", Новый ОписаниеТипов("Булево"));

// Интегрированные обработчики
ВыгрузкаЗагрузкаДанныхГраницПоследовательностей.ПриРегистрацииОбработчиковВыгрузкиДанных(ТекущиеОбработчики);
ВыгрузкаЗагрузкаДанныхХранилищЗначений.ПриРегистрацииОбработчиковВыгрузкиДанных(ТекущиеОбработчики);
ВыгрузкаЗагрузкаНеразделенныхДанных.ПриРегистрацииОбработчиковВыгрузкиДанных(ТекущиеОбработчики);
ВыгрузкаЗагрузкаПредопределенныхДанных.ПриРегистрацииОбработчиковВыгрузкиДанных(ТекущиеОбработчики);
ВыгрузкаЗагрузкаНеразделенныхПредопределенныхДанных.ПриРегистрацииОбработчиковВыгрузкиДанных(ТекущиеОбработчики);
ВыгрузкаЗагрузкаСовместноРазделенныхДанных.ПриРегистрацииОбработчиковВыгрузкиДанных(ТекущиеОбработчики);

// Обработчики событий БСП
ОбработчикиПрограммныхСобытийБСП = ОбщегоНазначенияБТС.ПолучитьОбработчикиПрограммныхСобытийБСП(
	"ТехнологияСервиса.ВыгрузкаЗагрузкаДанных\ПриРегистрацииОбработчиковВыгрузкиДанных");
Для Каждого ОбработчикПрограммныхСобытийБСП Из ОбработчикиПрограммныхСобытийБСП Цикл
	ОбработчикПрограммныхСобытийБСП.Модуль.ПриРегистрацииОбработчиковВыгрузкиДанных(ТекущиеОбработчики);
КонецЦикла;

// Переопределяемая процедура
ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриРегистрацииОбработчиковВыгрузкиДанных(ТекущиеОбработчики);

// Обеспечение обратной совместимости
Для Каждого Строка Из ТекущиеОбработчики Цикл
	Если ПустаяСтрока(Строка.Версия) Тогда
		Строка.Версия = ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ВерсияОбработчиков1_0_0_0();
	КонецЕсли;
КонецЦикла;

#КонецОбласти

#КонецЕсли

