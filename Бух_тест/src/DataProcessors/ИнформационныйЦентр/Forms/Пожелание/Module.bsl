////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Получение логина (для модели сервиса) текущего пользователя
	УстановитьПривилегированныйРежим(Истина);
	Логин = Строка(Пользователи.ТекущийПользователь().ИдентификаторПользователяСервиса);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Определение идентификатора пожелания
	Если Не Параметры.Свойство("ИдентификаторПожелания") Тогда 
		Возврат;
	КонецЕсли;
	ИдентификаторПожелания = Параметры.ИдентификаторПожелания;
	
	СтруктураПожелания = СформироватьЭлементыСтраницы(1);
	Если Не СтруктураПожелания Тогда 
		ВызватьИсключение НСтр("ru='Сервис по отображению пожеланий пользователей временно не доступен."
"Пожалуйста, повторите попытку позже';uk='Сервіс по відображенню побажань користувачів тимчасово не доступний."
"Будь ласка, повторіть спробу пізніше'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьПризнакПросмотраПожелания();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НажатиеНаНомерСтраницы(Элемент)
	
	ИмяСсылки = Элемент.Имя;
	
	Если ИмяСсылки = НСтр("ru='Следующие';uk='Наступні'") Тогда 
		НомерСтраницы = ТекущаяСтраница + 1;
	ИначеЕсли ИмяСсылки = НСтр("ru='Предыдущие';uk='Попередні'") Тогда 
		НомерСтраницы = ТекущаяСтраница - 1;
	Иначе
		НомерСтраницы = СтрЗаменить(Элемент.Имя, "с", "");
		Попытка
			НомерСтраницы = Число(НомерСтраницы);
		Исключение
			НомерСтраницы = ТекущаяСтраница;
		КонецПопытки;
	КонецЕсли;
	
	// Формирование элементов страницы
	Результат = СформироватьЭлементыСтраницы(НомерСтраницы);
	Если Не Результат Тогда
		ВызватьИсключение НСтр("ru='Сервис по отображению пожеланий пользователей временно не доступен."
"Пожалуйста, повторите попытку позже';uk='Сервіс по відображенню побажань користувачів тимчасово не доступний."
"Будь ласка, повторіть спробу пізніше'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	Если ПустаяСтрока(НовыйКомментарий) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Пожалуйста введите комментарий.';uk='Будь ласка, введіть коментар.'"));
		Возврат;
	КонецЕсли;
	
	Результат = ДобавитьКомментрийСервер();
	Если Результат Тогда
		НовыйКомментарий = "";
		ПоказатьОповещениеПользователя(НСтр("ru='Комментарий добавлен.';uk='Коментар доданий.'"));
		СформироватьЭлементыСтраницы(ТекущаяСтраница);
		Оповестить("ИзменениеПожелания");
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='Комментарий не добавлен. Повторите попытку позднее.';uk='Коментар не доданий. Повторіть спробу пізніше.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Проголосовать(Команда)
	
	
	ГолосДобавлен = ПроголосоватьЗаПожеланиеСервер(1, ИдентификаторПожелания);
	Если Не ГолосДобавлен Тогда 
		// Отход от стандарта "Сообщения пользователю"
		ПоказатьПредупреждение(, НСтр("ru = 'К сожалению Ваш голос не добавлен.
								|Попробуйте проголосовать позднее."));
		Возврат;
	КонецЕсли;
	
	Элементы.Проголосовать.Видимость = Ложь;
	Элементы.СВашим.Видимость        = Истина;
	Элементы.Рейтинг.Заголовок       = Число(Элементы.Рейтинг.Заголовок) + 1;
	
	Оповестить("ИзменениеПожелания");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьПризнакПросмотраПожелания()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Новый УникальныйИдентификатор(ИдентификаторПожелания));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбщиеДанныеИнформационногоЦентра.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбщиеДанныеИнформационногоЦентра КАК ОбщиеДанныеИнформационногоЦентра
	|ГДЕ
	|	ОбщиеДанныеИнформационногоЦентра.Идентификатор = &Идентификатор";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ПросмотренныеДанныеИнформационногоЦентра.СоздатьМенеджерЗаписи();
		Запись.Пользователь = Пользователи.ТекущийПользователь();
		Запись.ДанныеИнформационногоЦентра = Выборка.Ссылка;
		Запись.Просмотрены = Истина;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроголосоватьЗаПожеланиеСервер(Голос, Идентификатор)
	
	Попытка
		ПроксиИнформационногоЦентра = ИнформационныйЦентрСервер.ПолучитьПроксиИнформационногоЦентра_1_0_1_2();
		Возврат ПроксиИнформационногоЦентра.AddVote(Идентификатор, Логин, Голос);
	Исключение
		Возврат Ложь
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура СформироватьПодвал(СписокКомментариев)
	
	// Удаление старых страниц и элементов
	УдалитьСтраницыПодвала();
	
	// Определение массива имен ссылок
	МассивИменСсылок = ПолучитьМассивИменСсылокСтраниц(СписокКомментариев);
	
	// Создание элементов подвала
	СоздатьЭлементыПодвала(МассивИменСсылок);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницыПодвала()
	
	Для Каждого ЭлементСписка из СписокЭлементовПодвала Цикл 
		
		НайденныйЭлемент = Элементы.Найти(ЭлементСписка.Значение);
		Если НайденныйЭлемент = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Элементы.Удалить(НайденныйЭлемент);
		
	КонецЦикла;
	
	СписокЭлементовПодвала.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыПодвала(МассивИменСсылок)
	
	Если МассивИменСсылок = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяОчередногоЭлемента            = "Пусто1";
	Элемент                          = Элементы.Добавить(ИмяОчередногоЭлемента, Тип("ДекорацияФормы"), Элементы.Подвал);
	Элемент.Вид                      = ВидДекорацииФормы.Надпись;
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.Заголовок                = "";
	
	СписокЭлементовПодвала.Добавить(ИмяОчередногоЭлемента);
	
	Итерация = 0;
	
	Для Каждого ИмяСсылки из МассивИменСсылок Цикл 
		
		Итерация = Итерация + 1;
		
		Если ИмяСсылки = "..." Тогда 
			ИмяОчередногоЭлемента            = "многоточие" + Строка(Итерация);
			Элемент                          = Элементы.Добавить(ИмяОчередногоЭлемента, Тип("ДекорацияФормы"), Элементы.Подвал);
			Элемент.Вид                      = ВидДекорацииФормы.Надпись;
			Элемент.Заголовок                = Строка(ИмяСсылки);
			СписокЭлементовПодвала.Добавить(ИмяОчередногоЭлемента);
			Продолжить;
		КонецЕсли;
		
		Если ИмяСсылки = НСтр("ru='Следующие';uk='Наступні'") или ИмяСсылки = НСтр("ru='Предыдущие';uk='Попередні'") Тогда 
			ИмяОчередногоЭлемента            = ИмяСсылки;
			Элемент                          = Элементы.Добавить(ИмяОчередногоЭлемента, Тип("ДекорацияФормы"), Элементы.Подвал);
			Элемент.Вид                      = ВидДекорацииФормы.Надпись;
			Элемент.Заголовок                = Строка(ИмяСсылки);
			Элемент.Гиперссылка = Истина;
			Элемент.УстановитьДействие("Нажатие", "НажатиеНаНомерСтраницы");
			СписокЭлементовПодвала.Добавить(ИмяОчередногоЭлемента);
			Продолжить;
		КонецЕсли;
		
		ИмяОчередногоЭлемента            = "с" + Строка(ИмяСсылки);
		Элемент                          = Элементы.Добавить(ИмяОчередногоЭлемента, Тип("ДекорацияФормы"), Элементы.Подвал);
		Элемент.Вид                      = ВидДекорацииФормы.Надпись;
		Элемент.Заголовок                = Строка(ИмяСсылки);
		СписокЭлементовПодвала.Добавить(ИмяОчередногоЭлемента);
		
		Если Число(ИмяСсылки) = ТекущаяСтраница Тогда 
			Продолжить;
		КонецЕсли;
		
		Элемент.Гиперссылка = Истина;
		Элемент.УстановитьДействие("Нажатие", "НажатиеНаНомерСтраницы");
		
	КонецЦикла;
	
	ИмяОчередногоЭлемента            = "Пусто2";
	Элемент                          = Элементы.Добавить(ИмяОчередногоЭлемента, Тип("ДекорацияФормы"), Элементы.Подвал);
	Элемент.Вид                      = ВидДекорацииФормы.Надпись;
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.Заголовок                = "";
	СписокЭлементовПодвала.Добавить(ИмяОчередногоЭлемента);
	
КонецПроцедуры

&НаСервере
Функция СформироватьЭлементыСтраницы(НомерСтраницы)
	
	// Получение объектов пожелания
	ОбъектыПожелания = ПолучитьОбъкетыПожелания();
	Если ОбъектыПожелания = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// Формирование элементов для отображения пожелания
	СформироватьЭлементыПожелания(ОбъектыПожелания);
	
	// Получение комментариев пожелания
	СписокКомментариев = ПолучитьКомментарии(НомерСтраницы);
	Если СписокКомментариев = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ТекущаяСтраница = НомерСтраницы;
	
	// Формирование отображения комментариев
	СформироватьЭлементыКомментариев(СписокКомментариев.MaxAmountOnPage, СписокКомментариев.CommentList);
	
	// Формирование отображения комментариев
	СформироватьПодвал(СписокКомментариев);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьОбъкетыПожелания()
	
	Попытка
		ПроксиИнформационногоЦентра = ИнформационныйЦентрСервер.ПолучитьПроксиИнформационногоЦентра_1_0_1_2();
		Результат = ПроксиИнформационногоЦентра.GetContentSuggestion(Логин, ИдентификаторПожелания);
		Возврат Результат;
	Исключение
		ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПривестиКСтруктуреОбъектыПожелания(ОбъектыПожелания)
	
	ПараметрыПожелания  = СтруктурироватьПараметрыПожелания(ОбъектыПожелания.Parameters);
	СодержаниеПожелания = СтруктурироватьСодержаниеПожелания(ОбъектыПожелания.Content);
	
	Пожелание = Новый Структура;
	Пожелание.Вставить("Параметры",  ПараметрыПожелания);
	Пожелание.Вставить("Содержание", СодержаниеПожелания);
	
	Возврат Пожелание;
	
КонецФункции

&НаСервере
Функция СтруктурироватьПараметрыПожелания(ПараметрыПожелания)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДатаЗакрытия",            ПараметрыПожелания.ClosingDate);
	СтруктураПараметров.Вставить("Идентификатор",           ПараметрыПожелания.Ref);
	СтруктураПараметров.Вставить("ДатаСоздания",            ПараметрыПожелания.GenerationDate);
	СтруктураПараметров.Вставить("ДатаПлановойРеализации",  ПараметрыПожелания.PlanMadeDate);
	СтруктураПараметров.Вставить("Рейтинг",                 ПараметрыПожелания.Rating);
	СтруктураПараметров.Вставить("ГолосПользователя",       ПараметрыПожелания.Vote);
	СтруктураПараметров.Вставить("Статус",                  ПараметрыПожелания.Status);
	СтруктураПараметров.Вставить("Предмет",                 ПараметрыПожелания.Subject);
	СтруктураПараметров.Вставить("Заголовок",               ПараметрыПожелания.Title);
	СтруктураПараметров.Вставить("КомментарийРазработчика", ПараметрыПожелания.developerComment);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция СтруктурироватьСодержаниеПожелания(СодержаниеПожелания)
	
	СтруктураСодержания = Новый Структура;
	
	СтруктураСодержания.Вставить("ТекстHTML", СодержаниеПожелания.TextHTML);
	СтруктураСодержания.Вставить("Файлы",     ПолучитьСтруктуруФайловПожелания(СодержаниеПожелания.Files));
	
	Возврат СтруктураСодержания;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруФайловПожелания(Файлы)
	
	Структура = Новый Структура;
	
	Для Каждого СтруктураФайла из Файлы.Files Цикл
		Структура.Вставить(СтруктураФайла.FullName, Новый Картинка(СтруктураФайла.BinData));
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Процедура СформироватьЭлементыПожелания(ОбъектыПожелания)
	
	СтруктураПожелания = ПривестиКСтруктуреОбъектыПожелания(ОбъектыПожелания);
	
	Содержание.УстановитьHTML(СтруктураПожелания.Содержание.ТекстHTML, СтруктураПожелания.Содержание.Файлы);
	
	Элементы.Рейтинг.Заголовок = СтруктураПожелания.Параметры.Рейтинг;
	Элементы.Предмет.Заголовок = СтруктураПожелания.Параметры.Предмет;
	Элементы.ЗаголовокПожелания.Заголовок = СтруктураПожелания.Параметры.Заголовок;
	
	КомментарийРазработчика = СтруктураПожелания.Параметры.КомментарийРазработчика;
	Если ПустаяСтрока(КомментарийРазработчика) Тогда
		Элементы.КомментарийРазработчика.Видимость = Ложь;
	КонецЕсли;
	
	Если СтруктураПожелания.Параметры.ДатаЗакрытия <> '00010101' Тогда
		Элементы.Сделано.Видимость = Истина;
		Элементы.Сделано.Заголовок = "сделано
		                             |" + Строка(Формат(СтруктураПожелания.Параметры.ДатаЗакрытия, "ДЛФ=D"));
		Возврат;
	КонецЕсли;
	
	Если СтруктураПожелания.Параметры.ГолосПользователя = 0 Тогда 
		Элементы.Проголосовать.Видимость = Истина;
	Иначе
		Элементы.СВашим.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьКомментрийСервер()
	
	ПроксиИнформационногоЦентра = ИнформационныйЦентрСервер.ПолучитьПроксиИнформационногоЦентра_1_0_1_2();
	ФабрикаXDTOВебСервиса       = ПроксиИнформационногоЦентра.ФабрикаXDTO;
	ОписаниеКомментария         = ПривестиКОбъектуXDTOКомментарийПользователя(ФабрикаXDTOВебСервиса);
	
	Возврат ПроксиИнформационногоЦентра.AddCommentSuggestion(ОписаниеКомментария);
	
КонецФункции

&НаСервере
Функция ПривестиКОбъектуXDTOКомментарийПользователя(ФабрикаXDTOВебСервиса)
	
	ТипКомментария      = ФабрикаXDTOВебСервиса.Тип("http://www.1c.ru/SaaS/1.0/XMLSchema/ManageInfoCenter_1_0_1_2", "CommentListElement");
	ОписаниеКомментария = ФабрикаXDTOВебСервиса.Создать(ТипКомментария);
	
	ОписаниеКомментария.Text           = НовыйКомментарий;
	ОписаниеКомментария.Date           = ТекущаяДата(); // Проектное решение БСП
	УстановитьПривилегированныйРежим(Истина);
	ОписаниеКомментария.Author         = Логин;
	ОписаниеКомментария.RefSuggestion  = ИдентификаторПожелания;
	ОписаниеКомментария.Vote           = 0;
	УстановитьПривилегированныйРежим(ложь);
	
	Возврат ОписаниеКомментария;
	
КонецФункции

&НаСервере
Процедура СформироватьЭлементыКомментариев(МаксимальноеЧислоНаСтранице, Комментарии)
	
	// Удаление старых эелементов
	УдалитьЭлементы();
	
	ОсновнаяГруппа = Элементы.ГруппаВсехКомментариев;
	
	Итерация = 0;
	
	Для Каждого Комментарий из Комментарии Цикл
		
		Итерация = Итерация + 1;
		
		Если Итерация > МаксимальноеЧислоНаСтранице Тогда 
			Прервать;
		КонецЕсли;
		
		ИмяГруппыКомментария                   = "ГруппаКомментария" + Строка(Итерация);
		ГруппаКомментария                      = Элементы.Добавить(ИмяГруппыКомментария, Тип("ГруппаФормы"), ОсновнаяГруппа);
		ГруппаКомментария.Вид                  = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаКомментария.ОтображатьЗаголовок  = Ложь;
		ГруппаКомментария.Группировка          = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаКомментария.Отображение          = ОтображениеОбычнойГруппы.Нет;
		
		СписокЭлементовКомментариев.Добавить(ИмяГруппыКомментария);
		
		ИмяЭлементаГруппаЗаголовкаКомментария           = "ГруппаЗаголовкаКомментария" + Строка(Итерация);
		ГруппаЗаголовкаКомментария                      = Элементы.Добавить(ИмяЭлементаГруппаЗаголовкаКомментария, Тип("ГруппаФормы"), ГруппаКомментария);
		ГруппаЗаголовкаКомментария.Вид                  = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗаголовкаКомментария.ОтображатьЗаголовок  = Ложь;
		ГруппаЗаголовкаКомментария.Группировка          = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаЗаголовкаКомментария.Отображение          = ОтображениеОбычнойГруппы.Нет;
		
		СписокЭлементовКомментариев.Добавить(ИмяЭлементаГруппаЗаголовкаКомментария);
		
		ИмяЭлементаАвторКомментария                   = "АвторКомментария" + Строка(Итерация);
		АвторКомментария                              = Элементы.Добавить(ИмяЭлементаАвторКомментария, Тип("ДекорацияФормы"), ГруппаЗаголовкаКомментария);
		АвторКомментария.Вид                          = ВидДекорацииФормы.Надпись;
		АвторКомментария.Заголовок                    = Строка(Комментарий.Author);
		АвторКомментария.Шрифт                        = Новый Шрифт( , , Истина);
		АвторКомментария.ЦветТекста                   = Новый Цвет(159, 101, 0);
		
		СписокЭлементовКомментариев.Добавить(ИмяЭлементаАвторКомментария);
		
		ИмяЭлементаДатаКомментария                   = "ДатаКомментария" + Строка(Итерация);
		ДатаКомментария                              = Элементы.Добавить(ИмяЭлементаДатаКомментария, Тип("ДекорацияФормы"), ГруппаЗаголовкаКомментария);
		ДатаКомментария.Вид                          = ВидДекорацииФормы.Надпись;
		ДатаКомментария.Заголовок                    = Строка(Формат(Комментарий.Date, "ДЛФ=DD")) + ", " + Строка(Формат(Комментарий.Date, "ДФ=ЧЧ:мм"));
		ДатаКомментария.ЦветТекста                   = Новый Цвет(128, 128, 128);
		
		СписокЭлементовКомментариев.Добавить(ИмяЭлементаДатаКомментария);
		
		ИмяЭлементаТекстКомментария             = "ТекстКомментария" + Строка(Итерация);
		ТекстКомментария                        = Элементы.Добавить(ИмяЭлементаТекстКомментария, Тип("ДекорацияФормы"), ГруппаКомментария);
		ТекстКомментария.Вид                    = ВидДекорацииФормы.Надпись;
		ТекстКомментария.Заголовок              = Комментарий.Text;
		
		СписокЭлементовКомментариев.Добавить(ИмяЭлементаТекстКомментария);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементы()
	
	Для каждого ЭлементСписка из СписокЭлементовКомментариев Цикл 
		НайденныйЭлемент = Элементы.Найти(ЭлементСписка.Значение);
		Если НайденныйЭлемент = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		Элементы.Удалить(НайденныйЭлемент);
	КонецЦикла;
	
	СписокЭлементовКомментариев.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКомментарии(НомерСтраницы)
	
	Попытка
		ПроксиИнформационногоЦентра = ИнформационныйЦентрСервер.ПолучитьПроксиИнформационногоЦентра_1_0_1_2();
		Возврат ПроксиИнформационногоЦентра.GetCommentsSuggestion(ИдентификаторПожелания, НомерСтраницы);
	Исключение
		ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивИменСсылокСтраниц(Комментарии)
	
	МассивИменСсылок = Новый Массив;
	
	// Текущая страница пожеланий
	ТекущаяСтраница = Комментарии.CurrentPage;
	
	Если ТекущаяСтраница > 1 Тогда 
		МассивИменСсылок.Добавить(НСтр("ru='Предыдущие';uk='Попередні'"));
	КонецЕсли;
	
	Если ТекущаяСтраница >=1 Тогда 
		МассивИменСсылок.Добавить(ТекущаяСтраница);
	КонецЕсли;
	
	Если Комментарии.CommentList.Количество() > Комментарии.MaxAmountOnPage Тогда 
		МассивИменСсылок.Добавить(НСтр("ru='Следующие';uk='Наступні'"));
	КонецЕсли;
	
	Если МассивИменСсылок.Количество() = 1 Тогда 
		МассивИменСсылок.Очистить();
	КонецЕсли;
	
	Возврат МассивИменСсылок;
	
КонецФункции
