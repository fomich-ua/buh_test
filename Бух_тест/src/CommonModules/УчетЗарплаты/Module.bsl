////////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ ЗАРПЛАТЫ И НАЛОГОВ (ВЗНОСОВ) С ФОТ
//

////////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙС ВЗАИМОДЕЙСТВИЯ С БЗКБ
//
// Предназначена для генерации всех движений, связанных с отражением в регл. учете
//
// Параметры:
//	Движения
//	Отказ
//	Организация
//	ПериодРегистрации
//	ДанныеДляОтражения - таблицы движений
//
Процедура СформироватьДвиженияПоОтражениюЗарплатыВРегламентированномУчете(Движения, Отказ, Организация, ПериодРегистрации, Дата, ДанныеДляОтражения) Экспорт
	
	// Начисление зарплаты и налогов с ФОТ
	ДанныеПоЗарплате = Новый Структура;
	Если ДанныеДляОтражения.Свойство("НачисленнаяЗарплатаИВзносы") Тогда		
		ДанныеПоЗарплате.Вставить("НачисленнаяЗарплатаИВзносы", ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы);
	КонецЕсли;
	
	Если ДанныеПоЗарплате.Количество() <> 0 Тогда
		СформироватьДвиженияНачислениеЗарплаты(Движения, Отказ, Организация, ПериодРегистрации, Дата, ДанныеПоЗарплате);
	КонецЕсли;
	
	Если ДанныеДляОтражения.Свойство("УдержаннаяЗарплата") Тогда
		ДанныеПоУдержаниям = ДанныеДляОтражения.УдержаннаяЗарплата;
		СформироватьДвиженияУдержания(Движения, Отказ, Организация, ПериодРегистрации, Дата, ДанныеПоУдержаниям);
	КонецЕсли;
	
	Если ДанныеДляОтражения.Свойство("УдержанныйЕСВ") Тогда		
		ДанныеПоЗарплате.Вставить("УдержанныйЕСВ", ДанныеДляОтражения.УдержанныйЕСВ);
		СформироватьДвиженияУдержанныйЕСВ(Движения, Отказ, Организация, ПериодРегистрации, Дата, ДанныеПоЗарплате);
	КонецЕсли;

	Если ДанныеДляОтражения.Свойство("УдержанныйНДФЛ") Тогда		
		ДанныеПоЗарплате.Вставить("УдержанныйНДФЛ", ДанныеДляОтражения.УдержанныйНДФЛ);
		СформироватьДвиженияУдержанныйНДФЛ(Движения, Отказ, Организация, ПериодРегистрации, Дата, ДанныеПоЗарплате);
	КонецЕсли;
			
	Если ДанныеДляОтражения.Свойство("Депоненты") Тогда		
		ДанныеПоДепонентам = ДанныеДляОтражения.Депоненты;		
		СформироватьДвиженияДепонированиеЗарплаты(Движения, Отказ, Организация, ПериодРегистрации, Дата, ДанныеПоДепонентам);
	КонецЕсли;	
		
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ ЗАРПЛАТЫ И НАЛОГОВ С ФОТ
//

Процедура СформироватьДвиженияНачислениеЗарплаты(Движения, Отказ, Организация, ПериодРегистрации, Дата, ДанныеДляОтражения)
	
	Дополнять = Ложь;
	
	Если ДанныеДляОтражения.Свойство("НачисленнаяЗарплатаИВзносы") Тогда		
		Параметры = ПодготовитьПараметрыПоОтражениюЗарплатыВУчете(ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы, Организация, ПериодРегистрации, Дата);
		Реквизиты = Параметры.Реквизиты[0];
		ТаблицаЗаработнойПлаты = Параметры.ТаблицаЗаработнойПлаты;
		Дополнять = Истина;
	КонецЕсли;
	
	ТаблицаЗаработнойПлаты = ДополнитьТаблицуЗарплатыАналитикойБухУчета(ТаблицаЗаработнойПлаты);
		
	СформироватьПроводкиПоОтражениюЗарплатыВУчете(ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ);	
		
КонецПроцедуры

Процедура СформироватьДвиженияУдержанныйЕСВ(Движения, Отказ, Организация, ПериодРегистрации, Дата, ДанныеДляОтражения)
	
	Параметры = ПодготовитьПараметрыПоОтражениюЕСВВУчете(ДанныеДляОтражения.УдержанныйЕСВ, Организация, ПериодРегистрации, Дата);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаЕСВ = Параметры.ТаблицаЕСВ;
	
	ТаблицаЕСВ = ДополнитьТаблицуЕСВАналитикойБухУчета(ТаблицаЕСВ);
		
	СформироватьПроводкиПоОтражениюЕСВВУчете(ТаблицаЕСВ, Реквизиты, Движения, Отказ);	
		
КонецПроцедуры

Процедура СформироватьДвиженияУдержанныйНДФЛ(Движения, Отказ, Организация, ПериодРегистрации, Дата, ДанныеДляОтражения)
	
	Параметры = ПодготовитьПараметрыПоОтражениюНДФЛВУчете(ДанныеДляОтражения.УдержанныйНДФЛ, Организация, ПериодРегистрации, Дата);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаНДФЛ = Параметры.ТаблицаНДФЛ;
	
	ТаблицаНДФЛ = ДополнитьТаблицуНДФЛАналитикойБухУчета(ТаблицаНДФЛ);
		
	СформироватьПроводкиПоОтражениюНДФЛВУчете(ТаблицаНДФЛ, Реквизиты, Движения, Отказ);	
		
КонецПроцедуры

Процедура СформироватьДвиженияДепонированиеЗарплаты(Движения, Отказ, Организация, ПериодРегистрации, Дата, Депоненты)
	
	Параметры = ПодготовитьПараметрыПоОтражениюДепонентовУчете(Депоненты, Организация, ПериодРегистрации, Дата);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаЗаработнойПлаты = Параметры.ТаблицаДепонирование;
	Дополнять = Истина;
	
	СформироватьПроводкиПоОтражениюДепонированияВУчете(ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ);	
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоОтражениюЗарплатыВУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Дата)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = Дата;
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо,"
	+ "ВидОперации,"
	+ "Подразделение,"
	+ "СпособОтраженияЗарплатыВБухучете,"
	+ "Сумма,"
	////////////////+ "СчетДт,"
	+ "СчетКт,"
	+ "Налог,"
	+ "СтатьяНалоговойДекларации,"
	+ "СуммаВзносы,"
	+ "СпособОтраженияЗарплатыВБухучетеВзносы,"
	+ "СтатьяЗатратВзносы,"
	+ "СчетКтВзносы"
	;
	
	Параметры.Вставить("ТаблицаЗаработнойПлаты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПоОтражениюЕСВВУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Дата)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = Дата;
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо,"
	+ "ВидОперации,"
	+ "СпособОтраженияВБухучете,"
	+ "Налог,"
	+ "СтатьяНалоговойДекларации,"
	+ "СчетУчета,"
	+ "Сумма";
	
	Параметры.Вставить("ТаблицаЕСВ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПоОтражениюНДФЛВУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Дата)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = Дата;
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо,"
	+ "ВидОперации,"
	+ "СчетУчета,"
	+ "СпособОтраженияВБухучете,"
	+ "Сумма";
	
	Параметры.Вставить("ТаблицаНДФЛ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПоОтражениюДепонентовУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Дата)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = Дата;
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо,"
	+ "СчетУчета,"
	+ "ВидОперации,"
	+ "Сумма"
	;	
	Параметры.Вставить("ТаблицаДепонирование", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ДополнитьТаблицуЗарплатыАналитикойБухУчета(ТаблицаЗаработнойПлаты)
	
	///////////////////////////////////////
	// Описание типов для дополнения таблиц
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.СпособыОтраженияЗарплатыВРеглУчете"));
	ОписаниеТиповСпособыОтраженияЗарплатыВБухУчете =  Новый ОписаниеТипов(Массив, , );
	
	ОписаниеТиповПодразделенияОрганизаций =  БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения();
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("СпособОтраженияЗарплатыВБухУчете") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("СпособОтраженияЗарплатыВБухУчете", ОписаниеТиповСпособыОтраженияЗарплатыВБухУчете);
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("Подразделение") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("Подразделение", ОписаниеТиповПодразделенияОрганизаций);
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачисленнаяЗарплатаИВзносы", ТаблицаЗаработнойПлаты);
	Запрос.УстановитьПараметр("ВидОперацииРезерв", Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеРезерв);
	Запрос.УстановитьПараметр("СпособОтраженияРезерв", Справочники.СпособыОтраженияЗарплатыВРеглУчете.ИспользованиеРезерваОтпусков);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленнаяЗарплатаИВзносы.ФизическоеЛицо,
	|	НачисленнаяЗарплатаИВзносы.Сумма,
	|	НачисленнаяЗарплатаИВзносы.ВидОперации,
	|	НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете,
	|	НачисленнаяЗарплатаИВзносы.Подразделение,
	////////////|	НачисленнаяЗарплатаИВзносы.СчетДт,
	|	НачисленнаяЗарплатаИВзносы.СчетКт,
	|	НачисленнаяЗарплатаИВзносы.Налог,
	|	НачисленнаяЗарплатаИВзносы.СтатьяНалоговойДекларации,
	|	НачисленнаяЗарплатаИВзносы.СуммаВзносы,
	|	НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучетеВзносы,
	|	НачисленнаяЗарплатаИВзносы.СтатьяЗатратВзносы,
	|	НачисленнаяЗарплатаИВзносы.СчетКтВзносы
	|ПОМЕСТИТЬ ВТ_НачисленнаяЗарплатаИВзносы
	|ИЗ
	|	&НачисленнаяЗарплатаИВзносы КАК НачисленнаяЗарплатаИВзносы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НачисленнаяЗарплатаИВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_НачисленнаяЗарплатаИВзносы.Сумма КАК Сумма,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации КАК ВидОперации,
	//|	ВЫБОР
	//|		КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации <> &ВидОперацииРезерв 
	//|		ТОГДА ЛОЖЬ
	//|       ИНАЧЕ ПорядокОтраженияЗарплатыВБухУчете.СчетДт.НалоговыйУчет
	//|   КОНЕЦ КАК НеОтражатьВБУ,
	|   ЛОЖЬ КАК НеОтражатьВБУ,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
	|	ВТ_НачисленнаяЗарплатаИВзносы.Подразделение КАК Подразделение,
	//////////|	ВТ_НачисленнаяЗарплатаИВзносы.СчетДт КАК СчетДт,
	|	ВТ_НачисленнаяЗарплатаИВзносы.Налог,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СтатьяНалоговойДекларации,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СуммаВзносы,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучетеВзносы,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СтатьяЗатратВзносы,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СчетКтВзносы,
	|	ПорядокОтраженияЗарплатыВБухУчете.СчетДт КАК СчетДт,
	|	ПорядокОтраженияЗарплатыВБухУчете.СубконтоДт1 КАК СубконтоДт1,
	|	ПорядокОтраженияЗарплатыВБухУчете.СубконтоДт2 КАК СубконтоДт2,
	|	ПорядокОтраженияЗарплатыВБухУчете.СубконтоДт3 КАК СубконтоДт3,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СчетКт КАК СчетКт,
	|	ПорядокОтраженияЗарплатыВБухУчете.СубконтоКт1 КАК СубконтоКт1,
	|	ПорядокОтраженияЗарплатыВБухУчете.СубконтоКт2 КАК СубконтоКт2,
	|	ПорядокОтраженияЗарплатыВБухУчете.СубконтоКт3 КАК СубконтоКт3,
	|	ПорядокОтраженияЗарплатыВБухУчете.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ПорядокОтраженияЗарплатыВБухУчете.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначениеДоходовИЗатрат
	|ИЗ
	|	ВТ_НачисленнаяЗарплатаИВзносы КАК ВТ_НачисленнаяЗарплатаИВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК ПорядокОтраженияЗарплатыВБухУчете
	|		ПО (ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации <> &ВидОперацииРезерв 
	|			И ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете = ПорядокОтраженияЗарплатыВБухУчете.Ссылка)
	|		ИЛИ (ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации = &ВидОперацииРезерв 
	|			И ПорядокОтраженияЗарплатыВБухУчете.Ссылка = &СпособОтраженияРезерв)
	//|		ИЛИ (ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации = &ВидОперацииРезерв 
	//|			И  ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете = ПорядокОтраженияЗарплатыВБухУчете.Ссылка)
	|
	|
	|
	|ГДЕ ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете) 
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Функция ДополнитьТаблицуЕСВАналитикойБухУчета(ТаблицаЕСВ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаЕСВ", ТаблицаЕСВ);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЕСВ.ФизическоеЛицо,
	|	ТаблицаЕСВ.Сумма,
	|	ТаблицаЕСВ.ВидОперации,
	|	ТаблицаЕСВ.СпособОтраженияВБухУчете,
	|	ТаблицаЕСВ.Налог,
	|	ТаблицаЕСВ.СчетУчета,
	|	ТаблицаЕСВ.СтатьяНалоговойДекларации
	|ПОМЕСТИТЬ ВТТаблицаЕСВ
	|ИЗ
	|	&ТаблицаЕСВ КАК ТаблицаЕСВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЕСВ.ФизическоеЛицо,
	|	ТаблицаЕСВ.Сумма,
	|	ТаблицаЕСВ.ВидОперации,
	|	ТаблицаЕСВ.СпособОтраженияВБухУчете,
	|	ТаблицаЕСВ.Налог,
	|	ТаблицаЕСВ.СтатьяНалоговойДекларации,
	|	ВЫБОР
	|		КОГДА ТаблицаЕСВ.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|		ТОГДА ПорядокОтражения.СчетДт 
	|		ИНАЧЕ ТаблицаЕСВ.СчетУчета
	|	КОНЕЦ КАК СчетДт,
	|	ПорядокОтражения.СубконтоДт1 КАК СубконтоДт1,
	|	ПорядокОтражения.СубконтоДт2 КАК СубконтоДт2,
	|	ПорядокОтражения.СубконтоДт3 КАК СубконтоДт3,
	|	ПорядокОтражения.СчетКт КАК СчетКт,
	|	ПорядокОтражения.СубконтоКт1 КАК СубконтоКт1,
	|	ПорядокОтражения.СубконтоКт2 КАК СубконтоКт2,
	|	ПорядокОтражения.СубконтоКт3 КАК СубконтоКт3
	|ИЗ
	|	ВТТаблицаЕСВ КАК ТаблицаЕСВ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК ПорядокОтражения
	|		ПО ТаблицаЕСВ.СпособОтраженияВБухУчете = ПорядокОтражения.Ссылка
	|ГДЕ ТаблицаЕСВ.СпособОтраженияВБухУчете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете) 
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Функция ДополнитьТаблицуНДФЛАналитикойБухУчета(ТаблицаНДФЛ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНДФЛ", ТаблицаНДФЛ);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНДФЛ.ФизическоеЛицо,
	|	ТаблицаНДФЛ.Сумма,
	|	ТаблицаНДФЛ.ВидОперации,
	|	ТаблицаНДФЛ.СчетУчета,
	|	ТаблицаНДФЛ.СпособОтраженияВБухУчете
	|ПОМЕСТИТЬ ВТТаблицаНДФЛ
	|ИЗ
	|	&ТаблицаНДФЛ КАК ТаблицаНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНДФЛ.ФизическоеЛицо,
	|	ТаблицаНДФЛ.Сумма,
	|	ТаблицаНДФЛ.ВидОперации,
	|	ТаблицаНДФЛ.СпособОтраженияВБухУчете,
	|	ВЫБОР
	|		КОГДА ТаблицаНДФЛ.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|		ТОГДА ПорядокОтражения.СчетДт 
	|		ИНАЧЕ ТаблицаНДФЛ.СчетУчета
	|	КОНЕЦ КАК СчетДт,
	|	ПорядокОтражения.СубконтоДт1 КАК СубконтоДт1,
	|	ПорядокОтражения.СубконтоДт2 КАК СубконтоДт2,
	|	ПорядокОтражения.СубконтоДт3 КАК СубконтоДт3,
	|	ПорядокОтражения.СчетКт КАК СчетКт,
	|	ПорядокОтражения.СубконтоКт1 КАК СубконтоКт1,
	|	ПорядокОтражения.СубконтоКт2 КАК СубконтоКт2,
	|	ПорядокОтражения.СубконтоКт3 КАК СубконтоКт3
	|ИЗ
	|	ВТТаблицаНДФЛ КАК ТаблицаНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК ПорядокОтражения
	|		ПО ТаблицаНДФЛ.СпособОтраженияВБухУчете = ПорядокОтражения.Ссылка
	|ГДЕ ТаблицаНДФЛ.СпособОтраженияВБухУчете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете) 
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Процедура СформироватьПроводкиПоОтражениюЗарплатыВУчете(ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ)
	
	Если ТаблицаЗаработнойПлаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТаблицаНачислений   = ПодготовитьТаблицуНачислений(ТаблицаЗаработнойПлаты);
	ТаблицаВзносовСФОТ  = ПодготовитьТаблицуВзносовСФОТ(ТаблицаЗаработнойПлаты);
	////////////////////ТаблицаДепонентов          = ПодготовитьТаблицуДепонентов(Реквизиты, ТаблицаЗаработнойПлаты);
	
	МассивТаблицПоЗаработнойПлате = Новый Массив;
	МассивТаблицПоЗаработнойПлате.Добавить(ТаблицаНачислений);
	МассивТаблицПоЗаработнойПлате.Добавить(ТаблицаВзносовСФОТ);
	////////////////МассивТаблицПоЗаработнойПлате.Добавить(ТаблицаДепонентов);
	
	СодержанияПроводок = СоотвествиеСодержанияПроводок();	
	
	СчетРасчетовСПерсоналомПоОплатеТруда = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ПлательщикНалогаНаПрибыльДо2015  = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Реквизиты.Организация, Реквизиты.Период);
	
	Для Каждого ТаблицаМассива ИЗ МассивТаблицПоЗаработнойПлате Цикл
		
		Если ТаблицаМассива.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаМассива Цикл
									
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетДт)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетКт) Тогда
				// не заполнены счета и аналитика
				Продолжить;
			КонецЕсли;
						
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Сумма       = ?(СтрокаТаблицы.НеОтражатьВБУ,0,СтрокаТаблицы.Сумма);
			Проводка.Содержание  = СодержанияПроводок.Получить(СтрокаТаблицы.ВидОперации);
			
			Проводка.СчетДт = СтрокаТаблицы.СчетДт;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДт3);
						
			Проводка.СчетКт = СтрокаТаблицы.СчетКТ;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоКт3);
			
			//НАЛОГОВЫЙ УЧЕТ
			Если Проводка.СчетДт.НалоговыйУчет Тогда
				
				ХарактерЗатрат = Неопределено;
				ХарактерЗатратРБП = Неопределено;
				ЦелевоеНалоговоеНазначение = Неопределено;
				НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтрокаТаблицы, СтрокаТаблицы.СчетДт, ХарактерЗатрат,
															       	ЦелевоеНалоговоеНазначение, , 
																	СтрокаТаблицы.НалоговоеНазначение, СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат,
																	"СубконтоДт",
																	Реквизиты.Период,
																	ХарактерЗатратРБП);
																	
				Если     ХарактерЗатрат = "ОПЗ" 
					 ИЛИ ХарактерЗатрат = "Производство" 
					 ИЛИ ХарактерЗатрат = "Строительство"
					 ИЛИ ХарактерЗатрат = "ТЗР" Тогда
					 
					Если ПлательщикНДС Тогда
						Проводка.НалоговоеНазначениеДт =  ЦелевоеНалоговоеНазначение;
					Иначе
						Проводка.НалоговоеНазначениеДт =  Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
					КонецЕсли;
					
				ИначеЕсли ХарактерЗатрат = "Затраты" И ПлательщикНалогаНаПрибыльДо2015 Тогда
					
					Проводка.НалоговоеНазначениеДт =  ЦелевоеНалоговоеНазначение;			
					
				ИначеЕсли ХарактерЗатрат = "РБП" Тогда
					
					Если ХарактерЗатратРБП = "ОПЗ" 
					 ИЛИ ХарактерЗатратРБП = "Производство" 
					 ИЛИ ХарактерЗатратРБП = "Строительство"
					 ИЛИ ХарактерЗатратРБП = "ТЗР" Тогда
					 
						Если ПлательщикНДС Тогда
							Проводка.НалоговоеНазначениеДт =  ЦелевоеНалоговоеНазначение;
						Иначе
							Проводка.НалоговоеНазначениеДт =  Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
						КонецЕсли;
					
					ИначеЕсли ХарактерЗатратРБП = "Затраты" И ПлательщикНалогаНаПрибыльДо2015 Тогда
					
						Проводка.НалоговоеНазначениеДт =  ЦелевоеНалоговоеНазначение;
						
					КонецЕсли;
					
				КонецЕсли;	
				
				Если  ЗначениеЗаполнено(Проводка.НалоговоеНазначениеДт) И ПлательщикНалогаНаПрибыльДо2015
					И Проводка.НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
					И Проводка.НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					Проводка.СуммаНУДт = СтрокаТаблицы.Сумма;
				КонецЕсли;	
																		
			КонецЕсли;
			
						
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьПроводкиПоОтражениюДепонированияВУчете(ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ)
	
	Если ТаблицаЗаработнойПлаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаТаблицы Из ТаблицаЗаработнойПлаты Цикл
									
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
			
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		Проводка.Содержание  = "Депонирование";
			
		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
			
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.ФизическоеЛицо);
		
		//////БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДт2);
		//////БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДт3);
		//////			
		Проводка.СчетКт = Планысчетов.Хозрасчетный.РасчетыПоДепонентам;
		//////
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.ФизическоеЛицо);
		//////БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоКт2);
		//////БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоКт3);
			
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьПроводкиПоОтражениюЕСВВУчете(ТаблицаЕСВ, Реквизиты, Движения, Отказ)
	
	Если ТаблицаЕСВ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЕСВУдержанный   = ПодготовитьТаблицуЕСВ(ТаблицаЕСВ);
	
	СодержанияПроводок = СоотвествиеСодержанияПроводок();	
	
	СчетРасчетовСПерсоналомПоОплатеТруда = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	СчетРасчетовПоЕСВ = ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЕСВУдержанный Цикл
									
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетДт)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетКт) Тогда
			// не заполнены счета и аналитика
			Продолжить;
		КонецЕсли;
					
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		Проводка.Содержание  = СодержанияПроводок.Получить(СтрокаТаблицы.ВидОперации);
		
		Проводка.СчетДт = СтрокаТаблицы.СчетДт;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДт3);
					
		Проводка.СчетКт = СтрокаТаблицы.СчетКТ;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоКт3);
		
					
	КонецЦикла;
		
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьПроводкиПоОтражениюНДФЛВУчете(ТаблицаНДФЛ, Реквизиты, Движения, Отказ)
	
	Если ТаблицаНДФЛ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНДФЛУдержанный   = ПодготовитьТаблицуНДФЛ(ТаблицаНДФЛ);
	
	СодержанияПроводок = СоотвествиеСодержанияПроводок();	
	
	СчетРасчетовСПерсоналомПоОплатеТруда = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	СчетРасчетовПоНДФЛ = ПланыСчетов.Хозрасчетный.РасчетыПоНДФЛ;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНДФЛУдержанный Цикл
									
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетДт)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетКт) Тогда
			// не заполнены счета и аналитика
			Продолжить;
		КонецЕсли;
					
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		Проводка.Содержание  = СодержанияПроводок.Получить(СтрокаТаблицы.ВидОперации);
		
		Проводка.СчетДт = СтрокаТаблицы.СчетДт;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДт3);
					
		Проводка.СчетКт = СтрокаТаблицы.СчетКТ;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоКт3);
		
					
	КонецЦикла;
		
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьТаблицуНачислений(ТаблицаЗаработнойПлаты)
		
	ТаблицаНачисленийИУдержаний = ТаблицаЗаработнойПлаты.СкопироватьКолонки();
	
	СчетРасчетовСПерсоналомПоОплатеТруда        = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;             // 661
	ПустоеСубконто                              = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	
	ВестиУчетПоРаботникам                 		= Константы.ВедетсяУчетРасчетовПоЗарплатеПоРаботникам.Получить();	
	УчетЗарплатыИКадровСредствамиБухгалтерии 	= Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗаработнойПлаты Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоБольничные
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеРезерв
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоЗаСчетФССДоход 
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников
			Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетКт) Тогда
				НоваяСтрока.СчетКт      = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;	
			
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Дт",СтрокаТаблицы.Подразделение);
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Кт",СтрокаТаблицы.ФизическоеЛицо);
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаСвертки = "ВидОперации, Подразделение, НеОтражатьВБУ, СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат";
	
	ТаблицаНачисленийИУдержаний.Свернуть(СтрокаСвертки, "Сумма");
	
	Возврат ТаблицаНачисленийИУдержаний;
		
КонецФункции

Функция ПодготовитьТаблицуВзносовСФОТ(ТаблицаЗаработнойПлаты)
	
	ТаблицаВзносовСФОТ = ТаблицаЗаработнойПлаты.СкопироватьКолонки();
	
	Запрос= Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаЗаработнойПлаты", ТаблицаЗаработнойПлаты);
	Запрос.УстановитьПараметр("ВидОперацииРезерв", Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеРезерв);
	Запрос.УстановитьПараметр("СпособОтраженияРезерв", Справочники.СпособыОтраженияЗарплатыВРеглУчете.ИспользованиеРезерваОтпусков);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаЗаработнойПлаты.ВидОперации,
	|	ТаблицаЗаработнойПлаты.НеОтражатьВБУ,
	|   ТаблицаЗаработнойПлаты.Подразделение,
	|   ТаблицаЗаработнойПлаты.ФизическоеЛицо,
	|   ТаблицаЗаработнойПлаты.Налог,
	|   ТаблицаЗаработнойПлаты.СтатьяЗатратВзносы,
	|   ТаблицаЗаработнойПлаты.СтатьяНалоговойДекларации,
	|   ТаблицаЗаработнойПлаты.СуммаВзносы,
	|   ТаблицаЗаработнойПлаты.СчетКтВзносы,
	|   ТаблицаЗаработнойПлаты.СпособОтраженияЗарплатыВБухучетеВзносы
	|ПОМЕСТИТЬ ВТТаблицаВзносы
	|ИЗ &ТаблицаЗаработнойПлаты КАК ТаблицаЗаработнойПлаты
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаВзносы.ВидОперации,
	|	ТаблицаВзносы.НеОтражатьВБУ КАК НеОтражатьВБУ,
	|   ТаблицаВзносы.Подразделение,
	|   ТаблицаВзносы.ФизическоеЛицо,
	|   ТаблицаВзносы.Налог,
	|   ТаблицаВзносы.СтатьяЗатратВзносы,
	|   ТаблицаВзносы.СтатьяНалоговойДекларации,
	|   ТаблицаВзносы.СуммаВзносы КАК Сумма,
	|   ТаблицаВзносы.СчетКтВзносы КАК СчетКт,
	|   СпособыОтражения.СчетДт,
	|   СпособыОтражения.СубконтоДт1,
	|   СпособыОтражения.СубконтоДт2,
	|   СпособыОтражения.СубконтоДт3,
	|   СпособыОтражения.НалоговоеНазначение,
	|   СпособыОтражения.НалоговоеНазначениеДоходовИЗатрат
	|
	|ИЗ ВТТаблицаВзносы КАК ТаблицаВзносы
	|   ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтражения
	|		ПО (ТаблицаВзносы.ВидОперации <> &ВидОперацииРезерв 
	|			И ТаблицаВзносы.СпособОтраженияЗарплатыВБухучетеВзносы = СпособыОтражения.Ссылка)
	|		ИЛИ (ТаблицаВзносы.ВидОперации = &ВидОперацииРезерв И НЕ ТаблицаВзносы.НеОтражатьВБУ 
	|			И СпособыОтражения.Ссылка = &СпособОтраженияРезерв)
	|		ИЛИ (ТаблицаВзносы.ВидОперации = &ВидОперацииРезерв И ТаблицаВзносы.НеОтражатьВБУ 
	|			 И ТаблицаВзносы.СпособОтраженияЗарплатыВБухучетеВзносы = СпособыОтражения.Ссылка)
	|";
	
	ТаблицаЗаработнойПлатыВзносыФОТ = Запрос.Выполнить().Выгрузить();
	
	СчетРасчетовЕСВ        						= ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению;      // 651
	ПустоеСубконто                              = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗаработнойПлатыВзносыФОТ Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоБольничные
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеРезерв
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоЗаСчетФССДоход 
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПустаяСсылка()
			Тогда
			
			НоваяСтрока = ТаблицаВзносовСФОТ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетКт) Тогда
				НоваяСтрока.СчетКт      = СчетРасчетовЕСВ;
			КонецЕсли;
			
			Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеРезерв Тогда
				НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачислениеЕСВРезерв;
			Иначе	
				НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачислениеЕСВ;
			КонецЕсли;	
			
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Дт",СтрокаТаблицы.Подразделение);
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Дт",СтрокаТаблицы.СтатьяЗатратВзносы, Истина);
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Кт",СтрокаТаблицы.Налог);
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Кт",СтрокаТаблицы.СтатьяНалоговойДекларации);
		КонецЕсли;	
			
	КонецЦикла;		
	
	Возврат ТаблицаВзносовСФОТ;
		
КонецФункции

Функция ПодготовитьТаблицуЕСВ(ТаблицаЕСВ)
	
	ТаблицаУдержанныйЕСВ = ТаблицаЕСВ.СкопироватьКолонки();
	
	СчетРасчетовСПерсоналомПоОплатеТруда        = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;             // 661
	СчетРасчетовЕСВ        						= ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению;      // 651
	ПустоеСубконто                              = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаЕСВ Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеЕСВ Тогда
			
			НоваяСтрока = ТаблицаУдержанныйЕСВ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетКт) Тогда
				НоваяСтрока.СчетКт      = СчетРасчетовЕСВ;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетДт) Тогда
				НоваяСтрока.СчетДт      = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Дт",СтрокаТаблицы.ФизическоеЛицо);
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Кт",СтрокаТаблицы.Налог);
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Кт",СтрокаТаблицы.СтатьяНалоговойДекларации);
		КонецЕсли;	
			
	КонецЦикла;		
	
	Возврат ТаблицаУдержанныйЕСВ;
		
КонецФункции

Функция ПодготовитьТаблицуНДФЛ(ТаблицаНДФЛ)
	
	ТаблицаУдержанныйНДФЛ = ТаблицаНДФЛ.СкопироватьКолонки();
	
	СчетРасчетовСПерсоналомПоОплатеТруда        = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;             // 661
	СчетРасчетовНДФЛ        					= ПланыСчетов.Хозрасчетный.РасчетыПоНДФЛ;      // 6411
	ПустоеСубконто                              = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНДФЛ Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛ
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВоенныйСбор 
			Тогда
			
			НоваяСтрока = ТаблицаУдержанныйНДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетКт) Тогда
				НоваяСтрока.СчетКт      = СчетРасчетовНДФЛ;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетДт) Тогда
				НоваяСтрока.СчетДт      = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Дт",СтрокаТаблицы.ФизическоеЛицо);
		КонецЕсли;	
			
	КонецЦикла;		
	
	Возврат ТаблицаУдержанныйНДФЛ;
		
КонецФункции

Процедура УстановитьАвтозначениеСубконто(Данные, ДтКт, Автозначение, Замена = Ложь)
	
	Если Автозначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДтКт = "Дт" Тогда
		Счет = Данные.СчетДт;
	Иначе
		Счет = Данные.СчетКт;
	КонецЕсли;
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Для ИндексСубконто = 1 по СвойстваСчета.КоличествоСубконто Цикл
		
		ТипСубконто = СвойстваСчета["ВидСубконто" + ИндексСубконто + "ТипЗначения"];
		
		Если ТипСубконто.СодержитТип(ТипЗнч(Автозначение)) Тогда
			
			Если Замена Тогда
				Данные["Субконто"+ДтКт+ИндексСубконто] = Автозначение;
			ИначеЕсли НЕ ЗначениеЗаполнено(Данные["Субконто"+ДтКт+ИндексСубконто]) Тогда
				Данные["Субконто"+ДтКт+ИндексСубконто] = Автозначение;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
		
	
КонецПроцедуры	

Функция СоотвествиеСодержанияПроводок() 
	
	СодержанияПроводок = Новый Соответствие;	
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход,                          НСтр("ru='Начислено зарплата';uk='Нараховано зарплата'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоБольничные,          		     НСтр("ru='Начислено больничные за счет предприятия';uk='Нараховано лікарняні за рахунок підприємства'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеДоход,                 НСтр("ru='Начислено отпускные';uk='Нараховано відпускні'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеРезерв,                НСтр("ru='Начислено отпускные (за счет резерва отпусков)';uk='Нараховано відпускні (за рахунок резерву відпусток)'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход,                        НСтр("ru='Начислено доход в натуральной форме';uk='Нараховано дохід у натуральній формі'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход,                   НСтр("ru='Начислено зарплата сдельно';uk='Нараховано зарплата відрядно'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоЗаСчетФССДоход,                 НСтр("ru='Начислено за счет ФСС';uk='Нараховано за рахунок ФСС'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников,                    НСтр("ru='Начислено дивиденды';uk='Нараховано дивіденди'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛ,                                    НСтр("ru='Удержано НДФЛ';uk='Утримано ПДФО'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ВоенныйСбор,                             НСтр("ru='Удержано военный сбор';uk='Утримано військовий збір'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.УдержаниеЕСВ,                            НСтр("ru='Удержано ЕСВ';uk='Утримано ЄСВ'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачислениеЕСВ,                           НСтр("ru='Начислено ЕСВ на ФОТ';uk='Нараховано ЄСВ на ФОП'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачислениеЕСВРезерв,                     НСтр("ru='Начислено ЕСВ на ФОТ (за счет резерва отпусков)';uk='Нараховано ЄСВ на ФОП (за рахунок резерву відпусток)'"));	
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.Алименты,  								 НСтр("ru='Удержано алименты';uk='Утримано аліменти'"));	
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ИсполнительныеЛисты,                	 НСтр("ru='Удержано по исполнительным листам';uk='Утримано за виконавчими листами'"));		
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПочтовыйСбор,            			 	 НСтр("ru='Удержано почтовый сбор';uk='Утримано поштовий збір'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПогашениеЗаймов,            			 НСтр("ru='Погашение займов';uk='Погашення позик'"));	
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПроцентыПоЗайму,						 НСтр("ru='Проценты по займу';uk='Відсотки по позиці'"));	
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПрочиеУдержания,                  		 НСтр("ru='Удержано прочее';uk='Утримано інше'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.Депонирование,                           НСтр("ru='Депонирование зарплаты';uk='Депонування зарплати'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.СписаниеДепонента,                       НСтр("ru='Списание депонированной зарплаты';uk='Списання депонованої зарплати'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПрочиеРасчетыСПерсоналом,                НСтр("ru='Прочие расчеты с персоналом';uk='Інші розрахунки з персоналом'"));

	Возврат СодержанияПроводок;
	
КонецФункции	


////////////////////////////////////////////////////////////////////////////////
// УДЕРЖАНИЯ ИЗ ЗАРПЛАТЫ
//

Процедура СформироватьДвиженияУдержания(Движения, Отказ, Организация, ПериодРегистрации, Дата, ДанныеДляОтражения)
	
	Параметры = ПодготовитьПараметрыПоОтражениюУдержанийВУчете(ДанныеДляОтражения, Организация, ПериодРегистрации, Дата);
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаУдержаний = Параметры.ТаблицаУдержаний;
	
	ТаблицаУдержаний = ДополнитьТаблицуУдержанийАналитикойБухУчета(ТаблицаУдержаний);
	
	СформироватьПроводкиПоОтражениюУдержанийВУчете(ТаблицаУдержаний, Реквизиты, Движения, Отказ);	
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоОтражениюУдержанийВУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Дата)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = Дата; 
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо,"
	+ "ВидОперации,"
	+ "Подразделение,"
	+ "Контрагент,"	
	+ "СпособОтраженияВБухучете,"
	+ "СчетУчета,"
	+ "Сумма"
	;	
	Параметры.Вставить("ТаблицаУдержаний", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ДополнитьТаблицуУдержанийАналитикойБухУчета(ТаблицаУдержаний)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаУдержаний", ТаблицаУдержаний);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаУдержаний.ФизическоеЛицо,
	|	ТаблицаУдержаний.Подразделение,
	|	ТаблицаУдержаний.Сумма,
	|	ТаблицаУдержаний.ВидОперации,
	|	ТаблицаУдержаний.СпособОтраженияВБухУчете,
	|	ТаблицаУдержаний.СчетУчета,
	|	ТаблицаУдержаний.Контрагент
	|ПОМЕСТИТЬ ВТТаблицаУдержаний
	|ИЗ
	|	&ТаблицаУдержаний КАК ТаблицаУдержаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУдержаний.ФизическоеЛицо,
	|	ТаблицаУдержаний.Подразделение,
	|	ТаблицаУдержаний.Сумма,
	|	ТаблицаУдержаний.ВидОперации,
	|	ТаблицаУдержаний.СпособОтраженияВБухУчете,
	|	ТаблицаУдержаний.Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаУдержаний.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|		ТОГДА ПорядокОтражения.СчетДт 
	|		ИНАЧЕ ТаблицаУдержаний.СчетУчета
	|	КОНЕЦ КАК СчетДт,
	|	ПорядокОтражения.СубконтоДт1 КАК СубконтоДт1,
	|	ПорядокОтражения.СубконтоДт2 КАК СубконтоДт2,
	|	ПорядокОтражения.СубконтоДт3 КАК СубконтоДт3,
	|	ПорядокОтражения.СчетКт КАК СчетКт,
	|	ПорядокОтражения.СубконтоКт1 КАК СубконтоКт1,
	|	ПорядокОтражения.СубконтоКт2 КАК СубконтоКт2,
	|	ПорядокОтражения.СубконтоКт3 КАК СубконтоКт3
	|ИЗ
	|	ВТТаблицаУдержаний КАК ТаблицаУдержаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК ПорядокОтражения
	|		ПО ТаблицаУдержаний.СпособОтраженияВБухУчете = ПорядокОтражения.Ссылка
	|ГДЕ ТаблицаУдержаний.СпособОтраженияВБухУчете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете) 
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Процедура СформироватьПроводкиПоОтражениюУдержанийВУчете(ТаблицаУдержаний, Реквизиты, Движения, Отказ)
	
	Если ТаблицаУдержаний.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТаблицаУдержанийРаботников = ПодготовитьТаблицуУдержаний(ТаблицаУдержаний);
	
	СодержанияПроводок = СоотвествиеСодержанияПроводок();	
	
	Для Каждого СтрокаТаблицы Из ТаблицаУдержанийРаботников Цикл
									
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетДт)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетКт) Тогда
			// не заполнены счета и аналитика
			Продолжить;
		КонецЕсли;
					
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		Проводка.Содержание  = СодержанияПроводок.Получить(СтрокаТаблицы.ВидОперации);
		
		Проводка.СчетДт = СтрокаТаблицы.СчетДт;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДт3);
					
		Проводка.СчетКт = СтрокаТаблицы.СчетКТ;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоКт3);
		
					
	КонецЦикла;

	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьТаблицуУдержаний(ТаблицаУдержанийРаботника)
		
	ТаблицаУдержаний = ТаблицаУдержанийРаботника.СкопироватьКолонки();
	
	СчетРасчетовСПерсоналомПоОплатеТруда        = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;             // 661
	СчетРасчетовДоходы        					= ПланыСчетов.Хозрасчетный.ДругиеДоходыОтОбычнойДеятельности;    // 746
	ПустоеСубконто                              = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаУдержанийРаботника Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Алименты
		 ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ИсполнительныеЛисты
		 ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПочтовыйСбор
		 ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПогашениеЗаймов
		 ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПроцентыПоЗайму
		 ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПрочиеУдержания
		 Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетКт) Тогда
				НоваяСтрока.СчетКт      = СчетРасчетовДоходы;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетДт) Тогда
				НоваяСтрока.СчетДт      = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Дт",СтрокаТаблицы.ФизическоеЛицо);
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Кт",СтрокаТаблицы.Подразделение);
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Кт",СтрокаТаблицы.Контрагент);
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Кт",СтрокаТаблицы.ФизическоеЛицо);
		КонецЕсли;	
			
	КонецЦикла;	
		
	СтрокаСвертки = "ВидОперации, СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3";
		
	ТаблицаУдержаний.Свернуть(СтрокаСвертки, "Сумма");
	
	Возврат ТаблицаУдержаний;
		
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ВЫПЛАТА ЗАРПЛАТЫ
//

Процедура ВыполнитьДвиженияПоЗарплате( ДокументВыплаты, Движения, ПроводкиБУ="", СчетКт, СпособОплаты,	СчетОрганизации = Неопределено, Сотрудник = Неопределено, ПлатежнаяВедомость = Неопределено, СчетУчетаРасчетовПоЗП = Неопределено, ОбособленноеПодразделениеОрганизации = Неопределено, СтатьяДвиженияДенежныхСредств = Неопределено  ) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если СпособОплаты = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		Ведомости = Новый Массив;
		Ведомости.Добавить(ПлатежнаяВедомость);
		ФизическоеЛицо = Сотрудник;
		
		ВыплатаЗаработнойПлаты = ДокументВыплаты.ВыплатаЗаработнойПлаты.Выгрузить();
		Платеж = ВыплатаЗаработнойПлаты.Добавить();
		Платеж.Ведомость = ПлатежнаяВедомость;
		Платеж.СчетУчета = СчетУчетаРасчетовПоЗП;
		Платеж.СуммаКВыплате = ДокументВыплаты.СуммаДокумента;
	Иначе
		Ведомости = ДокументВыплаты.ВыплатаЗаработнойПлаты.ВыгрузитьКолонку("Ведомость");
		ВыплатаЗаработнойПлаты = ДокументВыплаты.ВыплатаЗаработнойПлаты.Выгрузить();
		ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(ДокументВыплаты, Ведомости);
	
	Запрос.УстановитьПараметр("ТаблицаВедомостей", ТаблицаВедомостей);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ВыплатаЗаработнойПлаты", ВыплатаЗаработнойПлаты);
			
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДанныеВедомостей.Ведомость КАК Ведомость,
			|	ДанныеВедомостей.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДанныеВедомостей.СчетУчета КАК СчетУчета,
			|	ДанныеВедомостей.СуммаКВыплате КАК СуммаКВыплате
			|ПОМЕСТИТЬ ВТТаблицаВедомостей
			|ИЗ
			|	&ТаблицаВедомостей КАК ДанныеВедомостей
			|;
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ведомость КАК Ведомость,
			|	ДанныеДокумента.СчетУчета КАК СчетУчета,
			|	ДанныеДокумента.СуммаКВыплате КАК СуммаКВыплате
			|ПОМЕСТИТЬ ВТВыплатаЗаработнойПлаты
			|ИЗ
			|	&ВыплатаЗаработнойПлаты КАК ДанныеДокумента
			|";
	Запрос.Выполнить();		
			
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДанныеДокумента.Ведомость КАК Ведомость,
			|	ДанныеВедомостей.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДанныеДокумента.СчетУчета КАК СчетУчета,
			|	ДанныеВедомостей.СуммаКВыплате КАК СуммаКВыплате
			|ИЗ
			|   ВТВыплатаЗаработнойПлаты КАК ДанныеДокумента
			|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|	ВТТаблицаВедомостей КАК ДанныеВедомостей
			|   ПО ДанныеВедомостей.Ведомость = ДанныеДокумента.Ведомость
			|    И ДанныеВедомостей.СчетУчета = ДанныеДокумента.СчетУчета
			|    И (ДанныеВедомостей.ФизическоеЛицо = &ФизическоеЛицо ИЛИ &ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
			|";
			
	ОплатаВедомостей = Запрос.Выполнить().Выгрузить();		
			
	Для Каждого Платеж Из ОплатаВедомостей Цикл
		ВыполнитьПроводкуВыплатыЗарплаты(Платеж, ПроводкиБУ, ДокументВыплаты.Организация, Платеж.СчетУчета, СчетКт, ДокументВыплаты.Дата, СчетОрганизации, ОбособленноеПодразделениеОрганизации, СтатьяДвиженияДенежныхСредств); 
	КонецЦикла;
	
	ВзаиморасчетыССотрудниками.ЗарегистрироватьОплатуВедомостейДокументом(ДокументВыплаты, Ложь, ОплатаВедомостей, Движения);
	
КонецПроцедуры // ВыполнитьДвиженияПоЗарплате()

Процедура	ВыполнитьПроводкуВыплатыЗарплаты(Платеж, ПроводкиБУ, Организация, СчетДт, СчетКт, Дата, СчетОрганизации = Неопределено, ОбособленноеПодразделениеОрганизации = Неопределено, СтатьяДвиженияДенежныхСредств = Неопределено )
	
	Если Платеж.СуммаКВыплате = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Проводка = ПроводкиБУ.Добавить();

	Проводка.Период      = Дата;
	Проводка.Активность  = Истина;
	Проводка.Организация = Организация;
	Проводка.Содержание  = НСтр("ru='Выплата зарплаты';uk='Виплата зарплати'",Локализация.КодЯзыкаИнформационнойБазы());
	Проводка.Сумма       = Платеж.СуммаКВыплате;

	Проводка.СчетКт      = СчетКт;
	Если ЗначениеЗаполнено(СчетОрганизации) Тогда
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "БанковскиеСчета", СчетОрганизации);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОбособленноеПодразделениеОрганизации) Тогда
    	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбособленныеПодразделенияБезОбразованияЮрЛица" ,ОбособленноеПодразделениеОрганизации);
	КонецЕсли;

	Если СтатьяДвиженияДенежныхСредств <> Неопределено Тогда
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	КонецЕсли;
	
    БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", Платеж.ФизическоеЛицо);	
				
	Проводка.СчетДт      = СчетДт;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", Платеж.ФизическоеЛицо);
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ВСПОМОГАТЕЛЬНЫХ ДАННЫХ ДЛЯ ОТРАЖЕНИЯ ЗАРПЛАТЫ В РЕГЛ. УЧЕТЕ

// Процедура дополняет таблицу выплат, полученную из подсистемы учета зарплаты
// колконками, в которых будет храниться необходимая для формирования проводок 
// информация
//
// Параметры:
//	ВыплатаЗарплаты - таблица значений
//
Процедура ПодготовитьТаблицуВыплатыЗарплаты(ВыплатаЗарплаты) Экспорт
	
	ВыплатаЗарплаты.Колонки.Добавить("Подразделение");	
	ВыплатаЗарплаты.Колонки.Добавить("СтатьяДвиженияДенежныхСредств");
	ВыплатаЗарплаты.Колонки.Добавить("БанковскийСчет");
	ВыплатаЗарплаты.Колонки.Добавить("СчетУчета");
	ВыплатаЗарплаты.Колонки.Добавить("СчетУчетаКомпенсации");
	ВыплатаЗарплаты.Колонки.Добавить("СубконтоУчетаКомпенсации1");
	ВыплатаЗарплаты.Колонки.Добавить("СубконтоУчетаКомпенсации2");
	ВыплатаЗарплаты.Колонки.Добавить("СубконтоУчетаКомпенсации3");
	ВыплатаЗарплаты.Колонки.Добавить("ПодразделениеУчетаКомпенсации");	
	ВыплатаЗарплаты.Колонки.Добавить("ИспользуетсяЭлектронныйОбмен", Новый ОписаниеТипов("Булево"));	
	
КонецПроцедуры

// Функция формирует таблицу выплаты зарплаты для передачи в подсистему УСН
//
Функция ПолучитьТаблицуВыплатыЗарплатыДляУСН(ВыплатаЗарплаты) Экспорт
	
	ВедетсяУчетРасчетовПоЗарплатеСводно   = Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Получить();
	УчетЗарплатыИКадровВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	

	ТаблицаВыплатаЗарплаты = Новый ТаблицаЗначений;
	ТаблицаВыплатаЗарплаты.Колонки.Добавить("Работник");	
	ТаблицаВыплатаЗарплаты.Колонки.Добавить("Сделка");
	ТаблицаВыплатаЗарплаты.Колонки.Добавить("КурсВзаиморасчетов");
	ТаблицаВыплатаЗарплаты.Колонки.Добавить("КратностьВзаиморасчетов");
	ТаблицаВыплатаЗарплаты.Колонки.Добавить("Сумма");
	
	Если ВедетсяУчетРасчетовПоЗарплатеСводно И УчетЗарплатыИКадровВоВнешнейПрограмме ИЛИ ВыплатаЗарплаты = Неопределено Тогда
		Возврат ТаблицаВыплатаЗарплаты;
	КонецЕсли;
		
	Для каждого СтрокаТаблицы Из ВыплатаЗарплаты Цикл
		
		НоваяСтрока = ТаблицаВыплатаЗарплаты.Добавить();
		НоваяСтрока.Работник                = СтрокаТаблицы.ФизическоеЛицо;
		НоваяСтрока.Сделка                  = Неопределено;
		НоваяСтрока.КурсВзаиморасчетов      = 1;
		НоваяСтрока.КратностьВзаиморасчетов = 1;
		НоваяСтрока.Сумма                   = СтрокаТаблицы.СуммаКВыплате;
		
	КонецЦикла;
	
	ТаблицаВыплатаЗарплаты.Свернуть("Работник, Сделка, КурсВзаиморасчетов, КратностьВзаиморасчетов", "Сумма");
	
	Возврат ТаблицаВыплатаЗарплаты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДАННЫХ О ДОКУМЕНТАХ ПОДСИСТЕМЫ ЗАРПЛАТА

Функция ПолучитьДанныеВедомостейДляОплатыТаблично(Регистратор = Неопределено, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь) Экспорт
	
	ТаблицаВедомостей = ВзаиморасчетыССотрудниками.ДанныеВедомостейДляОплатыДокументом(Регистратор, Ведомости, ФизическиеЛица, Оплаченные);
	
	Возврат ТаблицаВедомостей;
	
КонецФункции

Функция ПолучитьДанныеВедомостейДляНалогов(ПлатежнаяВедомость, СчетУчета, Субконто1, Субконто2, Субконто3) Экспорт
	
	//ТаблицаВедомостей = ВзаиморасчетыССотрудниками.ДанныеВедомостейДляОплатыДокументом(Регистратор, Ведомости, ФизическиеЛица, Оплаченные);
	Если СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоНДФЛ Тогда
		
		Возврат УчетНДФЛ.ПолучитьДанныеВедомостейДляНалогов(ПлатежнаяВедомость, СчетУчета, Субконто1, Субконто2, Субконто3);
		
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоОбязательнымПлатежам Тогда
		
		Возврат УчетНДФЛ.ПолучитьДанныеВедомостейДляНалоговВоенныйСбор(ПлатежнаяВедомость, СчетУчета, Субконто1, Субконто2, Субконто3);	
		
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению
		ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию
		ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюНаСлучайБезработицы
		ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев
		Тогда
		
		
		Возврат УчетСтраховыхВзносов.ПолучитьДанныеВедомостейДляНалогов(ПлатежнаяВедомость, СчетУчета, Субконто1, Субконто2, Субконто3);
		
	Иначе 
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция НевыплаченныеДепоненты(Регистратор, Организация, ДатаВыплаты, ФизическиеЛица = Неопределено, ДепонированоДо = Неопределено) Экспорт

	Возврат УчетДепонированнойЗарплаты.ОстатокДепонированнойЗарплаты(Регистратор, Организация, ДатаВыплаты, ФизическиеЛица, ДепонированоДо);		                
	
КонецФункции

Функция ИспользоватьЭОИсБанком(ПлатежнаяВедомость) Экспорт
	

	//Не используется
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЕСЛИ УЧЕТ ВЕДЕТСЯ ВО ВНЕШНЕЙ ПРОГРАММЕ

// Формирует движения по отражению зарплаты в бух. учете
Процедура СформироватьДвиженияОтраженияЗарплаты(ТаблицаОтраженияВУчете, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыДвиженийОтраженияЗарплаты(ТаблицаОтраженияВУчете, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Параметры.ТаблицаОтраженияВУчете.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОтраженияВУчете = Параметры.ТаблицаОтраженияВУчете;

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ПлательщикНалогаНаПрибыльДо2015  = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Реквизиты.Организация, Реквизиты.Период);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОтраженияВУчете Цикл
								
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетДт)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетКт) Тогда
			// не заполнены счета и аналитика
			Продолжить;
		КонецЕсли;
					
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = ?(СтрокаТаблицы.НеОтражатьВБУ,0,СтрокаТаблицы.Сумма);
		Проводка.Содержание  = "Отражение зарплаты в учете";
		
		Проводка.СчетДт = СтрокаТаблицы.СчетДт;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДт3);
					
		Проводка.СчетКт = СтрокаТаблицы.СчетКТ;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоКт3);
		
		//НАЛОГОВЫЙ УЧЕТ
		Если Проводка.СчетДт.НалоговыйУчет Тогда
			
			ХарактерЗатрат = Неопределено;
			ХарактерЗатратРБП = Неопределено;
			ЦелевоеНалоговоеНазначение = Неопределено;
			НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтрокаТаблицы, СтрокаТаблицы.СчетДт, ХарактерЗатрат,
														       	ЦелевоеНалоговоеНазначение, , 
																СтрокаТаблицы.НалоговоеНазначение, СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат,
																"СубконтоДт",
																Реквизиты.Период,
																ХарактерЗатратРБП);
																
			Если     ХарактерЗатрат = "ОПЗ" 
				 ИЛИ ХарактерЗатрат = "Производство" 
				 ИЛИ ХарактерЗатрат = "Строительство"
				 ИЛИ ХарактерЗатрат = "ТЗР" Тогда
				 
				Если ПлательщикНДС Тогда
					Проводка.НалоговоеНазначениеДт =  ЦелевоеНалоговоеНазначение;
				Иначе
					Проводка.НалоговоеНазначениеДт =  Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
				КонецЕсли;
				
			ИначеЕсли ХарактерЗатрат = "Затраты" И ПлательщикНалогаНаПрибыльДо2015 Тогда
				
				Проводка.НалоговоеНазначениеДт =  ЦелевоеНалоговоеНазначение;			
				
			ИначеЕсли ХарактерЗатрат = "РБП" Тогда
				
				Если ХарактерЗатратРБП = "ОПЗ" 
				 ИЛИ ХарактерЗатратРБП = "Производство" 
				 ИЛИ ХарактерЗатратРБП = "Строительство"
				 ИЛИ ХарактерЗатратРБП = "ТЗР" Тогда
				 
					Если ПлательщикНДС Тогда
						Проводка.НалоговоеНазначениеДт =  ЦелевоеНалоговоеНазначение;
					Иначе
						Проводка.НалоговоеНазначениеДт =  Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
					КонецЕсли;
				
				ИначеЕсли ХарактерЗатратРБП = "Затраты" И ПлательщикНалогаНаПрибыльДо2015 Тогда
				
					Проводка.НалоговоеНазначениеДт =  ЦелевоеНалоговоеНазначение;
					
				КонецЕсли;
				
			КонецЕсли;	
			
			Если  ЗначениеЗаполнено(Проводка.НалоговоеНазначениеДт)
				И Проводка.НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
				И Проводка.НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.Сумма;
			КонецЕсли;	
																	
		КонецЕсли;
		
					
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыДвиженийОтраженияЗарплаты(ТаблицаОтраженияВУчете, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"			// <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Организация"		// <СправочникСсылка.Организации> - организация документа
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "СчетДт,"						// <ПланСчетовСсылка.Хозрасчетный>
	+ "СубконтоДт1,"				// <> - значение аналитики 
	+ "СубконтоДт2,"				// <> - значение аналитики 
	+ "СубконтоДт3,"				// <> - значение аналитики
	+ "СчетКт,"						// <ПланСчетовСсылка.Хозрасчетный>
	+ "СубконтоКт1,"				// <> - значение аналитики 
	+ "СубконтоКт2,"				// <> - значение аналитики 
	+ "СубконтоКт3,"				// <> - значение аналитики	
	+ "Сумма,"						// <Число(15,2)>
	+ "НалоговоеНазначениеДоходовИЗатрат,"
	+ "НалоговоеНазначение,"
	+ "НеОтражатьВБУ"
	;	
	
	Параметры.Вставить("ТаблицаОтраженияВУчете", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОтраженияВУчете, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Получение данных о документах подсистемы зарплата
Функция ПолучитьДанныеВедомостей(Ведомости, ФизическиеЛица = Неопределено, ДокументСсылка, ВыплатаДепонентов = Неопределено) Экспорт
	

	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда // выплата через банк
		СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк; 
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда // выплата через банк
		СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк;
	Иначе  // выплата через кассу
		СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
	КонецЕсли;

	Возврат Документы.ВедомостьНаВыплатуЗарплаты.ДанныеВедомостей(Ведомости, СпособВыплаты, ФизическиеЛица);
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// УСТАНОВКА И ПОЛУЧЕНИЕ ОТДЕЛЬНЫХ НАСТРОЕК УЧЕТА ЗАРПЛАТЫ

Процедура УстановитьНастройкиУчетаЗарплаты(ВестиУчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт
	
	Константы.ИспользоватьНачислениеЗарплаты.Установить(НЕ ВестиУчетЗарплатыИКадровВоВнешнейПрограмме);
	
	
КонецПроцедуры

Процедура СоздатьПараметрыУчетаЗарплаты(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.НастройкиУчетаЗарплаты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Запись = НаборЗаписей.Добавить();
		Запись.Организация = Организация;
		
		Запись.СпособОкругления = Справочники.СпособыОкругленияПриВыплатеЗарплаты.БезОкругления;
		Запись.ОсновнаяКатегорияЗастрахованныхЛиц = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникНаОбщихОснованиях;
				
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры

Функция ВедетсяКадровыйУчет() Экспорт
	
	Возврат Константы.ИспользоватьКадровыйУчет.Получить();
		
КонецФункции

Процедура УстановитьНастройкиКадровогоУчета(КадровыйУчет = Неопределено, УчетЗарплатыИКадровСредствамиБухгалтерии = Неопределено) Экспорт
	
	Если УчетЗарплатыИКадровСредствамиБухгалтерии = Неопределено Тогда
		УчетЗарплатыИКадровСредствамиБухгалтерии = Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить();
	КонецЕсли;
	
	Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		Константы.ИспользоватьКадровыйУчет.Установить(КадровыйУчет);
	Иначе
		Константы.ИспользоватьКадровыйУчет.Установить(Ложь);
	КонецЕсли;
		
КонецПроцедуры

Функция ИспользованиеРезерваОтпусков(Организация) Экспорт
	
	НаборЗаписей = РегистрыСведений.НастройкиУчетаЗарплаты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	Иначе	
		Возврат НаборЗаписей[0].ИспользованиеРезерваОтпусков;
		
	КонецЕсли;

	
КонецФункции

Функция СпособОкругления(Организация) Экспорт
	
	НаборЗаписей = РегистрыСведений.НастройкиУчетаЗарплаты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	Иначе	
		Возврат НаборЗаписей[0].СпособОкругления;
		
	КонецЕсли;

	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ КАДРОВЫХ ДАННЫХ

Функция ПолучитьФизическоеЛицо(Объект) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") или ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ФизическоеЛицо = Объект;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Сотрудники") или ТипОбъекта = Тип("СправочникОбъект.Сотрудники") Тогда
		ФизическоеЛицо = Объект.ФизическоеЛицо;
	Иначе
		ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ФизическоеЛицо;
	
КонецФункции
	
Функция ДанныеФизическихЛиц(Организация = Неопределено, ФизическиеЛица, ДатаСреза, ФИОКратко = Истина, РезультатТаблично = Ложь) Экспорт
	
	ПоГруппе = Ложь;
	Если ТипЗнч(ФизическиеЛица) = Тип("Массив") Тогда
		ПоГруппе = Истина;
	КонецЕсли;
	
	СписокКадровыхДанных = "Фамилия, Имя, Отчество, ФамилияИО, ФИОПолные, 
	|ДокументВид, ДокументСерия, ДокументНомер, ДокументДатаВыдачи, ДокументКемВыдан, 
	|ДокументКодПодразделения, ДокументПредставление";
	
	КадровыеДанныеФизЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическиеЛица, СписокКадровыхДанных, ДатаСреза);
	
	Если Организация <> Неопределено Тогда
		ТаблицаСотрудников = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ФизическиеЛица, Истина, Организация, ДатаСреза); 
		
		Если ТаблицаСотрудников.Количество() <> 0 Тогда
			
			Если ПоГруппе Тогда
				Сотрудники = ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
			Иначе
				Сотрудники = ТаблицаСотрудников[0].Сотрудник;
			КонецЕсли;
			
			СписокКадровыхДанных = "ТабельныйНомер, Подразделение, Должность, ФизическоеЛицо";
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, СписокКадровыхДанных, ДатаСреза); 
		Иначе
			КадровыеДанныеСотрудников = Неопределено;	
		КонецЕсли;
		
	Иначе
		КадровыеДанныеСотрудников = Неопределено;	
	КонецЕсли;
	
	Если РезультатТаблично Тогда
		
		ТабРезультат = Новый ТаблицаЗначений();
		ТабРезультат.Колонки.Добавить("Фамилия");
		ТабРезультат.Колонки.Добавить("Имя");
		ТабРезультат.Колонки.Добавить("Отчество");
		ТабРезультат.Колонки.Добавить("Представление");
		ТабРезультат.Колонки.Добавить("ВидДокумента");
		ТабРезультат.Колонки.Добавить("Серия");
		ТабРезультат.Колонки.Добавить("Номер");
		ТабРезультат.Колонки.Добавить("ДатаВыдачи");
		ТабРезультат.Колонки.Добавить("КемВыдан");
		ТабРезультат.Колонки.Добавить("КодПодразделения");
		ТабРезультат.Колонки.Добавить("ПредставлениеДокумента");
		
		ТабРезультат.Колонки.Добавить("ТабельныйНомер");
		ТабРезультат.Колонки.Добавить("Должность");
		ТабРезультат.Колонки.Добавить("ПодразделениеОрганизации");
		ТабРезультат.Колонки.Добавить("Сотрудник");
		
	Иначе
		
		Результат = Новый Структура("Фамилия, Имя, Отчество, Представление,
		|ТабельныйНомер, Должность, ПодразделениеОрганизации,
		|ВидДокумента, Серия, Номер,
		|ДатаВыдачи, КемВыдан, КодПодразделения,
		|ПредставлениеДокумента, Сотрудник");
		
	КонецЕсли;
	
	Для Каждого ДанныеФизЛиц ИЗ КадровыеДанныеФизЛиц Цикл
		
		Если РезультатТаблично Тогда
			Результат = ТабРезультат.Добавить();
		Иначе
			Если КадровыеДанныеФизЛиц.Индекс(ДанныеФизЛиц) > 0 Тогда
				Прервать;
			КонецЕсли;			
		КонецЕсли;
				
		Результат.Фамилия  = ДанныеФизЛиц.Фамилия;
		Результат.Имя      = ДанныеФизЛиц.Имя;
		Результат.Отчество = ДанныеФизЛиц.Отчество;
		Если ФИОКратко Тогда
			Результат.Представление = ДанныеФизЛиц.ФамилияИО;
		Иначе
			Результат.Представление = ДанныеФизЛиц.ФИОПолные;
		КонецЕсли;
		Результат.ВидДокумента           = ДанныеФизЛиц.ДокументВид;
		Результат.Серия                  = ДанныеФизЛиц.ДокументСерия;
		Результат.Номер                  = ДанныеФизЛиц.ДокументНомер;
		Результат.ДатаВыдачи             = ДанныеФизЛиц.ДокументДатаВыдачи;
		Результат.КемВыдан               = ДанныеФизЛиц.ДокументКемВыдан;
		Результат.КодПодразделения       = ДанныеФизЛиц.ДокументКодПодразделения;
		Результат.ПредставлениеДокумента = ДанныеФизЛиц.ДокументПредставление;
		
		Если КадровыеДанныеСотрудников <> Неопределено Тогда
			СтруктураОтбора = Новый Структура("ФизическоеЛицо", ДанныеФизЛиц.ФизическоеЛицо);
			МассивСведений = КадровыеДанныеСотрудников.НайтиСтроки(СтруктураОтбора);
			Если МассивСведений.Количество() <> 0 Тогда
				Результат.ТабельныйНомер           = МассивСведений[0].ТабельныйНомер;
				Результат.Должность                = МассивСведений[0].Должность;
				Результат.ПодразделениеОрганизации = МассивСведений[0].Подразделение;
				Результат.Сотрудник                = МассивСведений[0].Сотрудник;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РезультатТаблично Тогда
		Возврат ТабРезультат;
	Иначе
		Возврат Результат;
	КонецЕсли;
		
КонецФункции

Процедура ПолучитьТаблицуСотрудников(ТаблицаФизическихЛиц) Экспорт
	
	ТаблицаФизическихЛиц.Колонки.Добавить("Сотрудник",                            Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаФизическихЛиц.Колонки.Добавить("СотрудникКод",                         Новый ОписаниеТипов("Строка"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ПодразделениеСотрудника",              Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ПодразделениеСотрудникаКод",           Новый ОписаниеТипов("Строка"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ПредставлениеПодразделенияСотрудника", Новый ОписаниеТипов("Строка"));
	
	СписокКадровыхДанных = "ТабельныйНомер, Подразделение";
	Для Каждого СтрокаТаблицы ИЗ ТаблицаФизическихЛиц Цикл
		ТаблицаСотрудников = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СтрокаТаблицы.ФизическоеЛицо, Истина, СтрокаТаблицы.Организация, СтрокаТаблицы.Дата); 
		Если ТаблицаСотрудников.Количество() <> 0 Тогда			
			Сотрудник = ТаблицаСотрудников[0].Сотрудник;
			СтрокаТаблицы.Сотрудник = Сотрудник;
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, СписокКадровыхДанных, СтрокаТаблицы.Дата); 
			Если КадровыеДанныеСотрудника <> Неопределено Тогда
				Подразделение = КадровыеДанныеСотрудника[0].Подразделение;
				СтрокаТаблицы.ПодразделениеСотрудника = Подразделение;				
				СтрокаТаблицы.СотрудникКод =  КадровыеДанныеСотрудника[0].ТабельныйНомер;
				Если ЗначениеЗаполнено(Подразделение) Тогда
					СтрокаТаблицы.ПодразделениеСотрудникаКод = Подразделение.Код;
					Если ЗначениеЗаполнено(Подразделение.НаименованиеПолное) Тогда
						СтрокаТаблицы.ПредставлениеПодразделенияСотрудника = Подразделение.НаименованиеПолное;
					Иначе
						СтрокаТаблицы.ПредставлениеПодразделенияСотрудника = Подразделение.Наименование;
					КонецЕсли;
				КонецЕсли;				
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла
		
КонецПроцедуры

// Возвращает признак необходимости начислять зарплату
// для данной организации в указанный период
//
// Параметры:
//		Организация - СправочникСсылка.Организации
//		Период      - Дата
//
// Возвращаемое значение:
//		Булево
//
Функция НеобходимоНачислятьЗарплату(Организация, Период) Экспорт
	
	ЭтоФизЛицо	= Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	УчетЗарплатыИКадровСредствамиБухгалтерии = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии");
	Если НЕ УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПолученияСотрудниковОрганизаций = Новый Структура("Подразделение,СписокФизическихЛиц");
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("Организация", Организация);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("КадровыеДанные", "");
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОтбиратьПоГоловнойОрганизации", Ложь);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("НачалоПериода", '00010101');
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОкончаниеПериода", КонецМесяца(Период));
	
	ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Возврат ТаблицаСотрудников.Количество() > 0;
	
КонецФункции

Функция ПолучитьДокументНачисленияЗарплаты(МесяцНачисления, Организация) Экспорт
	
	ДокументНачисленияЗарплаты = Неопределено;
	Попытка
		ДокументНачисленияЗарплаты = РасчетЗарплаты.ДокументНачисленияЗарплаты(МесяцНачисления, Организация);
	Исключение
		ШаблонСообщения = НСтр("ru='Не удалось записать документ';uk='Не вдалося записати документ'");		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ШаблонСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
	КонецПопытки;
	
	Возврат ДокументНачисленияЗарплаты;
	
КонецФункции

Процедура СформироватьКадровыеПриказы() Экспорт
	
	КадровыйУчетБазовый.СформироватьКадровыеПриказы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ОТЧЕТНОСТИ

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ВАРИАНТАМИ ОТЧЕТОВ

// Определяет разделы, в которых доступна панель отчетов.
//
// Параметры:
//   Разделы (Массив) из (ОбъектМетаданных)
//
// Описание:
//   В Разделы необходимо добавить метаданные подсистем тех разделов,
//   в которых размещены команды вызова панелей отчетов.
//
// Например:
//	Разделы.Добавить(Метаданные.Подсистемы.ИмяПодсистемы);
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	
	Разделы.Добавить(Метаданные.Подсистемы.ЗарплатаИКадры.Подсистемы.КадровыйУчет);
	Разделы.Добавить(Метаданные.Подсистемы.ЗарплатаИКадры.Подсистемы.Зарплата);
		
КонецПроцедуры
