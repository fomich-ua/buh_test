////////////////////////////////////////////////////////////////////////////////
// Подсистема "Выгрузка загрузка данных".
//
////////////////////////////////////////////////////////////////////////////////

// Процедуры и функции данного модуля обеспечивают выгрузку и загрузку настроек,
// хранящихся в настройках конфигурации.
//

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выгружает настройки пользователей информационной базы.
// Записывает навигационные ссылки в файл, для последующей замены ссылок.
//
// Параметры:
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//
Процедура ВыгрузитьНастройкиПользователейИнформационнойБазы(Контейнер) Экспорт
	
	ВыгрузитьПлатформеннныеНастройкиПользователей(Контейнер);
	ЗаписатьНавигационныеСсылкиИзбранного(Контейнер);
	
КонецПроцедуры

// Вызывается при регистрации произвольных обработчиков загрузки данных.
//
// Параметры: ТаблицаОбработчиков - ТаблицаЗначений, в данной процедуре требуется
//  дополнить эту таблицу значений информацией о регистрируемых произвольных
//  обработчиках загрузки данных. Колонки:
//    ОбъектМетаданных - ОбъектМетаданных, при загрузке данных которого должен
//      вызываться регистрируемый обработчик,
//    Обработчик - ОбщийМодуль, общий модуль, в котором реализован произвольный
//      обработчик загрузки данных. Набор экспортных процедур, которые должны
//      быть реализованы в обработчике, зависит от установки значений следующих
//      колонок таблицы значений,
//    Версия - Строка - номер версии интерфейса обработчиков выгрузки / загрузки данных,
//      поддерживаемого обработчиком,
//    ПередСопоставлениемСсылок - Булево, флаг необходимости вызова обработчика перед
//      сопоставлением ссылок (в исходной ИБ и в текущей), относящихся к данному объекту
//      метаданных. Если присвоено значение Истина - в общем модуле обработчика должна
//      быть реализована экспортируемая процедура ПередСопоставлениемСсылок(),
//      поддерживающая следующие параметры:
//        Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//          контейнера, используемый в процессе загрузки данных. Подробнее см. комментарий
//          к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//        ОбъектМетаданных - ОбъектМетаданных, перед сопоставлением ссылок которого
//          был вызван обработчик,
//        СтандартнаяОбработчка - Булево. Если процедуре ПередСопоставлениемСсылок()
//          установить значение данного параметра равным Ложь, вместо стандартного
//          сопоставления ссылок (поиск объектов в текущей ИБ с теми же значениями
//          естественного ключа, которые были выгружены из ИБ-источника) будет
//          вызвана функция СопоставитьСсылки() общего модуля, в процедуре
//          ПередСопоставлениемСсылок() которого значение параметра СтандартнаяОбработка
//          было установлено равным Ложь.
//          Параметры функции СопоставитьСсылки():
//            Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//              контейнера, используемый в процессе загрузки данных. Подробнее см. комментарий
//              к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера,
//            ТаблицаИсходныхСсылок - ТаблицаЗначений, содержащая информацию о ссылках,
//              выгруженных из исходной ИБ. Колонки:
//                ИсходнаяСсылка - ЛюбаяСсылка, ссылка объекта исходной ИБ, которую требуется
//                  сопоставить c ссылкой в текущей ИБ,
//                Остальные колонки равным полям естественного ключа объекта, которые в
//                  процессе выгрузки данных были переданы в функцию
//                  ВыгрузкаЗагрузкаДанныхИнформационнойБазы.ТребуетсяСопоставитьСсылкуПриЗагрузке()
//          Возвращаемое значение функции СпосотавитьСсылки() - ТаблицаЗначений, колонки:
//            ИсходнаяСсылка - ЛюбаяСсылка, ссылка объекта, выгруженная из исходной ИБ,
//            Ссылка - ЛбюбаяСсылка, сопоставленная исходной ссылка в текущей ИБ.
//        Отказ - Булево. Если в процедуре ПередСопоставлениемСсылок() установить значение
//          данного параметра равным Истина - сопоставление ссылок, соответствующих
//          текущему объекту метаданных, выполняться не будет.
//    ПередЗагрузкойТипа - Булево, флаг необходимости вызова обработчика перед
//      загрузкой всех объектов данных, относящихся к данному объекту
//      метаданных. Если присвоено значение Истина - в общем модуле обработчика должна
//      быть реализована экспортируемая процедура ПередЗагрузкойТипа(),
//      поддерживающая следующие параметры:
//        Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//          контейнера, используемый в процессе загрузки данных. Подробнее см. комментарий
//          к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//        ОбъектМетаданных - ОбъектМетаданных, перед загрузкой всех данных которого
//          был вызван обработчик,
//        Отказ - Булево. Если в процедуре ПередЗагрузкойТипа() установить значение данного
//          параметра равным Истина - загрузка всех объектов данных соответствующих текущему
//          объекту метаданных выполняться не будет.
//    ПередЗагрузкойОбъекта - Булево, флаг необходимости вызова обработчика перед
//      загрузкой объекта данных, относящихся к данному объекту
//      метаданных. Если присвоено значение Истина - в общем модуле обработчика должна
//      быть реализована экспортируемая процедура ПередЗагрузкойОбъекта(),
//      поддерживающая следующие параметры:
//        Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//          контейнера, используемый в процессе загрузки данных. Подробнее см. комментарий
//          к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//        Объект - КонстантаМенеджерЗначения.*, СправочниеОбъект.*, ДокументОбъект.*,
//          БизнесПроцессОбъект.*, ЗадачаОбъект.*, ПланСчетовОбъект.*, ПланОбменаОбъект.*,
//          ПланВидовХарактеристикОбъект.*, ПланВидовРасчетаОбъект.*, РегистрСведенийНаборЗаписей.*,
//          РегистрНакопленияНаборЗаписей.*, РегистрБухгалтерииНаборЗаписей.*,
//          РегистрРасчетаНаборЗаписей.*, ПоследовательностьНаборЗаписей.*, ПерерасчетНаборЗаписей.* -
//          объект данных информационной базы, перед загрузкой которого был вызван обработчик.
//          Значение, переданное в процедуру ПередЗагрузкойОбъекта() в качестве значения параметра
//          Объект может быть модифицировано внутри процедуры обработчика ПередЗагрузкойОбъекта().
//        Артефакты - Массив(ОбъектXDTO) - дополнительные данные, логически неразрывно связанные
//          с объектом данных, но не являющиеся его частью. Сформированы в экспортируемых процедурах
//          ПередВыгрузкойОбъекта() обработчиков выгрузки данных (см. комментарий к процедуре
//          ПриРегистрацииОбработчиковВыгрузкиДанных(). Каждый артефакт должен являться XDTO-объектом,
//          для типа которого в качестве базового типа исполоьзуется абстрактный XDTO-тип
//          {http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1}Artefact. Допускается использовать XDTO-пакеты,
//          помимо изначально поставляемых в составе подсистемы ВыгрузкаЗагрузкаДанных.
//        Отказ - Булево. Если в процедуре ПередЗагрузкойОбъекта() установить значение данного
//          параметра равным Истина - загрузка объекта данных выполняться не будет.
//    ПослеЗагрузкиОбъекта - Булево, флаг необходимости вызова обработчика после
//      загрузки объекта данных, относящихся к данному объекту
//      метаданных. Если присвоено значение Истина - в общем модуле обработчика должна
//      быть реализована экспортируемая процедура ПослеЗагрузкиОбъекта(),
//      поддерживающая следующие параметры:
//        Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//          контейнера, используемый в процессе загрузки данных. Подробнее см. комментарий
//          к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//        Объект - КонстантаМенеджерЗначения.*, СправочниеОбъект.*, ДокументОбъект.*,
//          БизнесПроцессОбъект.*, ЗадачаОбъект.*, ПланСчетовОбъект.*, ПланОбменаОбъект.*,
//          ПланВидовХарактеристикОбъект.*, ПланВидовРасчетаОбъект.*, РегистрСведенийНаборЗаписей.*,
//          РегистрНакопленияНаборЗаписей.*, РегистрБухгалтерииНаборЗаписей.*,
//          РегистрРасчетаНаборЗаписей.*, ПоследовательностьНаборЗаписей.*, ПерерасчетНаборЗаписей.* -
//          объект данных информационной базы, после загрузки которого был вызван обработчик.
//        Артефакты - Массив(ОбъектXDTO) - дополнительные данные, логически неразрывно связанные
//          с объектом данных, но не являющиеся его частью. Сформированы в экспортируемых процедурах
//          ПередВыгрузкойОбъекта() обработчиков выгрузки данных (см. комментарий к процедуре
//          ПриРегистрацииОбработчиковВыгрузкиДанных(). Каждый артефакт должен являться XDTO-объектом,
//          для типа которого в качестве базового типа исполоьзуется абстрактный XDTO-тип
//          {http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1}Artefact. Допускается использовать XDTO-пакеты,
//          помимо изначально поставляемых в составе подсистемы ВыгрузкаЗагрузкаДанных.
//    ПослеЗагрузкиТипа - Булево, флаг необходимости вызова обработчика после
//      загрузки всех объектов данных, относящихся к данному объекту
//      метаданных. Если присвоено значение Истина - в общем модуле обработчика должна
//      быть реализована экспортируемая процедура ПослеЗагрузкиТипа(),
//      поддерживающая следующие параметры:
//        Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//          контейнера, используемый в процессе загрузки данных. Подробнее см. комментарий
//          к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//        ОбъектМетаданных - ОбъектМетаданных, после загрузки всех объектов которого
//          был вызван обработчик.
//
Процедура ПриРегистрацииОбработчиковЗагрузкиДанных(ТаблицаОбработчиков) Экспорт
	
	НовыйОбработчик = ТаблицаОбработчиков.Добавить();
	НовыйОбработчик.Обработчик = ВыгрузкаЗагрузкаНастроекПользователей;
	НовыйОбработчик.ПриЗаменеСсылок = Истина;
	НовыйОбработчик.Версия = ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ВерсияОбработчиков1_0_0_1();
	
КонецПроцедуры

// Выполняемые действия при замене ссылок.
//
// Параметры:
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//	СоответствиеСсылок - см. параметр "СловарьЗамен" процедуры "ОбновитьСловарьСопоставленияСсылок" общего модуля "ВыгрузкаЗагрузкаДанныхИнформационнойБазы".
//
Процедура ПриЗаменеСсылок(Контейнер, СоответствиеСсылок) Экспорт
	
	ПодменитьСсылкиВФайлеСИзбранным(Контейнер, СоответствиеСсылок);
	
КонецПроцедуры

// Загружает настройки пользователей информационной базы.
//
// Параметры:
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//
Процедура ЗагрузитьНастройкиПользователейИнформационнойБазы(Контейнер) Экспорт
	
	ЗагрузитьНастройкиПользователейСУчетомМодифицированногоИзбранного(Контейнер);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выгрузка настроек

// Выгружает все платформенные настройки пользователей информационной базы.
//
// Параметры:
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//
Процедура ВыгрузитьПлатформеннныеНастройкиПользователей(Контейнер)
	
	ВыгрузитьНастройкиПользователей(Контейнер, "ХранилищеОбщихНастроек");
	ВыгрузитьНастройкиПользователей(Контейнер, "ХранилищеСистемныхНастроек", Ложь);
	ВыгрузитьНастройкиПользователей(Контейнер, "ХранилищеПользовательскихНастроекОтчетов");
	ВыгрузитьНастройкиПользователей(Контейнер, "ХранилищеВариантовОтчетов");
	ВыгрузитьНастройкиПользователей(Контейнер, "ХранилищеНастроекДанныхФорм");
	
	Если ТехнологияСервисаИнтеграцияСБСП.ЭтоПлатформа83БезРежимаСовместимости() Тогда
		ВыгрузитьНастройкиПользователей(Контейнер, "ХранилищеПользовательскихНастроекДинамическихСписков");
	КонецЕсли;
	
КонецПроцедуры

// Выгружает платформенные настройки пользователей информационной базы.
//
// Параметры:
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//	ИмяХранилищаНастроек - Строка - имя хранилища настроек.
//	ИсключатьПроверку - Булево - Истина, если исключать проверкеу того, хранятся ли данные настройки в справочнике или другом метаданном.
//
Процедура ВыгрузитьНастройкиПользователей(Контейнер, Знач ИмяХранилищаНастроек, Знач ИсключатьПроверку = Истина)
	
	Если ИсключатьПроверку Тогда 
		Если Метаданные[ИмяХранилищаНастроек] <> Неопределено Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяФайла = Контейнер.СоздатьФайл(ВыгрузкаЗагрузкаДанныхСлужебный.UserSettings(), ИмяХранилищаНастроек);
	
	ПотокЗаписи = Новый ЗаписьXML();
	ПотокЗаписи.ОткрытьФайл(ИмяФайла);
	
	ХранилищеНастроек = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме(ИмяХранилищаНастроек);
	
	ТаблицаНастроек     = ОпределитьТаблицуНастроек();
	КоличествоЭлементов = 0;
	ОбщееКоличествоЭлементов = 0;
	
	ВыборкаНастроек = ХранилищеНастроек.Выбрать();
	Пока ВыборкаНастроек.Следующий() Цикл 
		
		Массив = Новый Массив;
		
		КоличествоЭлементов = КоличествоЭлементов + 1;
		Попытка
			Настройки = ВыборкаНастроек.Настройки;
			ТестоваяЗапись = Новый ЗаписьXML;
			ТестоваяЗапись.УстановитьСтроку();
			СериализаторXDTO.ЗаписатьXML(ТестоваяЗапись, Настройки);
			ПодменаНастройки = Неопределено;
		Исключение
			ПодменаНастройки = Новый ХранилищеЗначения(Настройки);
		КонецПопытки;
		ТестоваяЗапись.Закрыть();
		
		Если КоличествоЭлементов >= МаксимальныйРазмерВыгружаемойТаблицыЗначений() Тогда 
			
			ОбщееКоличествоЭлементов = ОбщееКоличествоЭлементов + КоличествоЭлементов;
			ВыгрузкаЗагрузкаДанныхСлужебный.ЗаписатьОбъектВПоток(Новый Структура("Хранилище, Таблица", ИмяХранилищаНастроек, ТаблицаНастроек), ПотокЗаписи);
			КоличествоЭлементов = 1;
			ТаблицаНастроек.Очистить();
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНастроек.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНастроек);
		
		Если ПодменаНастройки <> Неопределено Тогда 
			НоваяСтрока.Настройки = ПодменаНастройки;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщееКоличествоЭлементов = ОбщееКоличествоЭлементов + КоличествоЭлементов;
	ВыгрузкаЗагрузкаДанныхСлужебный.ЗаписатьОбъектВПоток(Новый Структура("Хранилище, Таблица", ИмяХранилищаНастроек, ТаблицаНастроек), ПотокЗаписи);
	Контейнер.УстановитьКоличествоОбъектов(ИмяФайла, ОбщееКоличествоЭлементов);
	
	ПотокЗаписи.Закрыть();
	
	КоличествоЭлементов = 1;
	ТаблицаНастроек.Очистить();
	
КонецПроцедуры

// Определяет таблицу значений, в которую будут сериализоваться настройки пользователей.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений.
//
Функция ОпределитьТаблицуНастроек()
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("КлючОбъекта",   Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("КлючНастроек",  Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Настройки");
	Таблица.Колонки.Добавить("Пользователь",  Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Возврат Таблица;
	
КонецФункции

// Определяет максимальный размер таблицы значений. в которую сериализуются настройки.
//
// Возвращаемое значение:
//	Число - размер записей в таблице значений.
//
Функция МаксимальныйРазмерВыгружаемойТаблицыЗначений()
	
	Возврат 10000;
	
КонецФункции

// Записывает навигационные ссылки избранного в файл.
//
// Параметры:
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//
Процедура ЗаписатьНавигационныеСсылкиИзбранного(Контейнер)
	
	ИмяФайла = Контейнер.ПолучитьФайлИзКаталога(ВыгрузкаЗагрузкаДанныхСлужебный.UserSettings(), "ХранилищеСистемныхНастроек");
	Если ИмяФайла = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СоответствиеНавигационныхСсылок = Новый Соответствие;
	
	ПотокЧтения = Новый ЧтениеXML();
	ПотокЧтения.ОткрытьФайл(ИмяФайла);
	ПотокЧтения.ПерейтиКСодержимому();
	
	Пока ПотокЧтения.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		
		ТаблицаСНастройками = ВыгрузкаЗагрузкаДанныхСлужебный.ПрочитатьОбъектИзПотока(ПотокЧтения).Таблица;
		
		Для Каждого Настройка Из ТаблицаСНастройками Цикл 
			
			Если ТипЗнч(Настройка.Настройки) = Тип("ХранилищеЗначения") Тогда 
				Настройки = Настройка.Настройки.Получить();
			Иначе
				Настройки = Настройка.Настройки;
			КонецЕсли;
			
			ОписаниеНастроек = Новый ОписаниеНастроек;
			ОписаниеНастроек.Представление = Настройка.Представление;
			
			Если ТипЗнч(Настройки) = Тип("ИзбранноеРаботыПользователя") Тогда 
				
				ЗаписатьНавигационныеСсылкиИзбранногоВСоответствие(СоответствиеНавигационныхСсылок, Настройки, Настройка.Пользователь);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИмяФайла = Контейнер.СоздатьПроизвольныйФайл("xml", "1cFresh\History");
	ВыгрузкаЗагрузкаДанныхСлужебный.ЗаписатьОбъектВФайл(СоответствиеНавигационныхСсылок, ИмяФайла);
	Контейнер.УстановитьКоличествоОбъектов(ИмяФайла, СоответствиеНавигационныхСсылок.Количество());
	
КонецПроцедуры

// Для пользователя записывается список навигационных ссылок в соответствие.
//
// Параметры:
//	СоответствиеНавигационныхСсылок - Соответствие:
//		Ключ - Строка - имя пользователя.
//		Значение - Массив - массив строк с навигационными ссылками.
//
Процедура ЗаписатьНавигационныеСсылкиИзбранногоВСоответствие(СоответствиеНавигационныхСсылок, Знач Настройки, Знач Пользователь)
	
	Если Настройки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	
	Для Каждого ЭлементИзбранного Из Настройки Цикл 
		МассивСсылок.Добавить(ЭлементИзбранного.НавигационнаяСсылка);
	КонецЦикла;
	
	СоответствиеНавигационныхСсылок.Вставить(Пользователь, МассивСсылок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Загрузка настроек

// Загружает настройки пользователей.
// Читает соответствия с навигационными ссылками.
//
// Параметры:
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//
Процедура ЗагрузитьНастройкиПользователейСУчетомМодифицированногоИзбранного(Контейнер) Экспорт
	
	ПутьКФайлу = Контейнер.ПолучитьПроизвольныйФайл("1cFresh\History");
	СоответствиеСНавигационнымиСсылками = ВыгрузкаЗагрузкаДанныхСлужебный.ПрочитатьОбъектИзФайла(ПутьКФайлу);
	
	ФайлыНастроек = Контейнер.ПолучитьФайлыИзКаталога(ВыгрузкаЗагрузкаДанныхСлужебный.UserSettings());
	
	Для Каждого ФайлНастроек Из ФайлыНастроек Цикл 
		
		ЗагрузитьНастройкиПользователей(Контейнер, ФайлНастроек, СоответствиеСНавигационнымиСсылками);
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает настройки пользователей.
//
// Параметры:
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//
Процедура ЗагрузитьНастройкиПользователей(Знач Контекст, Знач ПутьКФайлу, Знач СоответствиеСНавигационнымиСсылками)
	
	ПотокЧтения = Новый ЧтениеXML();
	ПотокЧтения.ОткрытьФайл(ПутьКФайлу);
	ПотокЧтения.ПерейтиКСодержимому();
	
	Пока ПотокЧтения.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		
		СохраненныеНастройки = ВыгрузкаЗагрузкаДанныхСлужебный.ПрочитатьОбъектИзПотока(ПотокЧтения);
		МенеджерХранилища = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме(СохраненныеНастройки.Хранилище);
		ТаблицаСНастройками = СохраненныеНастройки.Таблица;
		
		ЗагрузитьНастройкиИзТаблицы(МенеджерХранилища, ТаблицаСНастройками, СоответствиеСНавигационнымиСсылками);
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает настройки пользователей из таблицы значений.
//
// Параметры:
//	МенеджерХранилища - СтандартноеХранилищеНастроекМенеджер - менеджер хранилища.
//	ТаблицаСНастройками - ТаблицаЗначений - таблица с настройками.
//	СоответствиеСНавигационнымиСсылками - см . "ЗаписатьНавигационныеСсылкиИзбранногоВСоответствие"
//
Процедура ЗагрузитьНастройкиИзТаблицы(Знач МенеджерХранилища, Знач ТаблицаСНастройками, Знач СоответствиеСНавигационнымиСсылками)
	
	Для Каждого Настройка Из ТаблицаСНастройками Цикл 
		
		Если ТипЗнч(Настройка.Настройки) = Тип("ХранилищеЗначения") Тогда 
			Настройки = Настройка.Настройки.Получить();
		Иначе
			Настройки = Настройка.Настройки;
		КонецЕсли;
		
		ОписаниеНастроек = Новый ОписаниеНастроек;
		ОписаниеНастроек.Представление = Настройка.Представление;
		
		Если ТипЗнч(Настройки) = Тип("ИзбранноеРаботыПользователя") Тогда 
			
			ПодменитьНавигационныеСсылки(Настройка.Пользователь, Настройки, СоответствиеСНавигационнымиСсылками);
			
		КонецЕсли;
		
		МенеджерХранилища.Сохранить(Настройка.КлючОбъекта, Настройка.КлючНастроек, Настройки, ОписаниеНастроек, Настройка.Пользователь);
		
	КонецЦикла;
	
КонецПроцедуры

// Подменяет навигационные ссылки.
//
// Параметры:
//	Пользователь - Строка - имя пользователя.
//	Настройки - Настройки - настройки.
//	СоответствиеСНавигационнымиСсылками - см. "ЗаписатьНавигационныеСсылкиИзбранногоВСоответствие"
//
Процедура ПодменитьНавигационныеСсылки(Знач Пользователь, Знач Настройки, Знач СоответствиеСНавигационнымиСсылками)
	
	МассивСсылок = СоответствиеСНавигационнымиСсылками.Получить(Пользователь);
	Если МассивСсылок = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Итерация = 0 По МассивСсылок.Количество() - 1 Цикл 
		
		Настройки[Итерация].НавигационнаяСсылка = МассивСсылок[Итерация];
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Замена ссылок в избранном

// Подменяет навигационные ссылки.
// 
// Параметры:
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//	ОбщееСоответствиеСсылок - см. параметр "СловарьЗамен" процедуры "ОбновитьСловарьСопоставленияСсылок" общего модуля "ВыгрузкаЗагрузкаДанныхИнформационнойБазы".
//	
Процедура ПодменитьСсылкиВФайлеСИзбранным(Контейнер, Знач ОбщееСоответствиеСсылок)
	
	ПутьКФайлу = Контейнер.ПолучитьПроизвольныйФайл("1cFresh\History");
	
	Соответствие = ВыгрузкаЗагрузкаДанныхСлужебный.ПрочитатьОбъектИзФайла(ПутьКФайлу);
	
	ПодмененноеСоответствие = Новый Соответствие;
	
	ИмяКолонки = ВыгрузкаЗагрузкаДанныхСлужебный.ИмяКолонкиСИсходнойСсылкой(Контейнер);
	
	Для Каждого ТекущееСоотвествие Из Соответствие Цикл 
		
		МассивПодмененных = Новый Массив;
		Пользователь = ТекущееСоотвествие.Ключ;
		
		Для Каждого НавигационнаяСсылка Из ТекущееСоотвествие.Значение Цикл 
			
			ПодменаНавигационныхСсылок(НавигационнаяСсылка, ОбщееСоответствиеСсылок, ИмяКолонки);
			
			МассивПодмененных.Добавить(НавигационнаяСсылка);
			
		КонецЦикла;
		
		ПодмененноеСоответствие.Вставить(Пользователь, МассивПодмененных);
		
	КонецЦикла;
	
	ВыгрузкаЗагрузкаДанныхСлужебный.ЗаписатьОбъектВФайл(ПодмененноеСоответствие, ПутьКФайлу);
	
КонецПроцедуры

// Процесс подмены навигационной ссылки.
//
// Параметры:
//	НавигационнаяСсылка - Строка - навигационная ссылка.
//	ОбщееСоответствиеСсылок - см. параметр "СловарьЗамен" процедуры "ОбновитьСловарьСопоставленияСсылок" общего модуля "ВыгрузкаЗагрузкаДанныхИнформационнойБазы".
//	ИмяКолонки - Строка - имя колонки.
//
Процедура ПодменаНавигационныхСсылок(Знач НавигационнаяСсылка, Знач ОбщееСоответствиеСсылок, Знач ИмяКолонки)
	
	ПолноеИмяметаданных = ПолноеИмяМетаданныхИзНавигационнойСсылки(НавигационнаяСсылка);
	Если ПолноеИмяметаданных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаСИдентификатором = ПолучитьСтрокуИдентификатора(НавигационнаяСсылка);
	Если СтрокаСИдентификатором = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПриведенныйИдентификатор = ПолучитьУникальныйИдентификаторИзСтроки(СтрокаСИдентификатором);
	Если ПриведенныйИдентификатор = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТаблицаССылками = ОбщееСоответствиеСсылок.Получить(ПолноеИмяметаданных);
	Если ТаблицаССылками = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Фильтр = Новый Структура(ИмяКолонки, ПриведенныйИдентификатор);
	МассивСтрок = ТаблицаССылками.НайтиСтроки(Фильтр);
	Если МассивСтрок.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл 
		
		ИдентификаторСсылки = СтрокаТаблицы.Ссылка.УникальныйИдентификатор();
		ПриведеннаяСтрока = ПолучитьСтрокуИзИдентификатора(ИдентификаторСсылки);
		Если ПриведеннаяСтрока = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НавигационнаяСсылка = СтрЗаменить(НавигационнаяСсылка, СтрокаСИдентификатором, ПриведеннаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает полное имя метаданных из навигационной ссылки.
//
// Параметры:
//	НавигационнаяСсылка - Строка - навигационная ссылка.
//
// Возвращаемое значение:
//	Строка - полное имя метаданных.
//
Функция ПолноеИмяМетаданныхИзНавигационнойСсылки(Знач НавигационнаяСсылка)
	
	НачалоТипа = "e1cib/data/";
	ПозицияНачала = Найти(НавигационнаяСсылка, НачалоТипа);
	Если ПозицияНачала = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СрезСтроки = Сред(НавигационнаяСсылка, ПозицияНачала + СтрДлина(НачалоТипа));
	Разделитель = "?";
	ПозицияРазделителя = Найти(СрезСтроки, Разделитель);
	Если ПозицияРазделителя = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	НомерНачала = 1;
	Возврат Сред(СрезСтроки, НомерНачала, ПозицияРазделителя - НомерНачала)
	
КонецФункции

// Возвращает строковое представление идентификатора навигационной ссылки.
//
// Параметры:
//	НавигационнаяСсылка - Строка - навигационная ссылка.
//
// Возвращаемое значение:
//	Строка - строковое представление идентификатора.
//
Функция ПолучитьСтрокуИдентификатора(Знач НавигационнаяСсылка)
	
	ИмяПараметраСсылки = "ref=";
	ПозицияПараметра = Найти(НавигационнаяСсылка, ИмяПараметраСсылки);
	Если ПозицияПараметра = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СрезСтроки = Сред(НавигационнаяСсылка, ПозицияПараметра + СтрДлина(ИмяПараметраСсылки), 32);
	
	Если СтрДлина(СрезСтроки) <> 32 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СрезСтроки;
	
КонецФункции

// Возвращает уникальный идентификатор из представления уникального идентификатора в навигационной ссылке.
//
// Параметры:
//	НавигационнаяСсылка - Строка - навигационная ссылка.
//
// Возвращаемое значение:
//	Строка - уникальный идентификатор.
//
Функция ПолучитьУникальныйИдентификаторИзСтроки(Знач ПриведеннаяСсылка)
	
	ПерваяЧасть    = Сред(ПриведеннаяСсылка, 25, 8);
	ВтораяЧасть    = Сред(ПриведеннаяСсылка, 21, 4);
	ТретьяЧасть    = Сред(ПриведеннаяСсылка, 17, 4);
	ЧетвертаяЧасть = Сред(ПриведеннаяСсылка, 1,  4);
	ПятаяЧасть     = Сред(ПриведеннаяСсылка, 5,  12);
	
	СклеенаяСтрока = ПерваяЧасть + "-" + ВтораяЧасть + "-" + ТретьяЧасть + "-" + ЧетвертаяЧасть + "-" + ПятаяЧасть;
	
	Если Не ТехнологияСервисаИнтеграцияСБСП.ЭтоУникальныйИдентификатор(СклеенаяСтрока) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СклеенаяСтрока;
	
КонецФункции

// Возвращает строковое представления уникального идентификатора в навигационной ссылке из уникального идентификатора.
//
// Параметры:
//	НавигационнаяСсылка - Строка - навигационная ссылка.
//
// Возвращаемое значение:
//	Строка - строковое представления уникального идентификатора.
//
Функция ПолучитьСтрокуИзИдентификатора(Знач ИдентификаторСсылки)
	
	ИдентификаторСсылки = Строка(ИдентификаторСсылки);
	
	Возврат Сред(ИдентификаторСсылки, 20, 4)
		+ Сред(ИдентификаторСсылки, 25)
		+ Сред(ИдентификаторСсылки, 15, 4)
		+ Сред(ИдентификаторСсылки, 10, 4)
		+ Сред(ИдентификаторСсылки, 1, 8);
	
КонецФункции
