////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность в модели сервиса".
// Серверные процедуры и функции общего назначения:
// - Поддержка профилей безопасности
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Вызывается при обработке запросов на использование внешних ресурсов.
// 
// Параметры:
//  Идентификаторы - Массив(УникальныйИдентфиикатор), идентификаторы запросов, которые требуется применить,
//  ФормаВладелец - УправляемаяФорма, форма, которая должна блокироваться до окончания применения разрешений,
//  ОповещениеОЗакрытии - ОписаниеОповещения, которое будет вызвано при успешном предоставлении разрешений.
//  СтандартнаяОбработка - Булево, флаг выполнения стандартной обработки применения разрешений на использование
//    внешних ресурсов (подключение к агенту сервера через COM-соединение или сервер администрирования с
//    запросом параметров подключения к кластеру у текущего пользователя). Может быть установлен в значение Ложь
//    внутри обработчика события, в этом случае стандартная обработка завершения сеанса выполняться не будет.
//
Процедура ПриОбработкеЗапросовНаИспользованиеВнешнихРесурсов(Знач ИдентификаторыЗапросов, ФормаВладелец, ОповещениеОЗакрытии, СтандартнаяОбработка) Экспорт
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().РазделениеВключено Тогда
		
		НачатьИнициализациюЗапросаРазрешенийНаИспользованиеВнешнихРесурсов(ИдентификаторыЗапросов, ФормаВладелец, ОповещениеОЗакрытии, Ложь);
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьИнициализациюЗапросаРазрешенийНаИспользованиеВнешнихРесурсов(Знач Идентификаторы, ФормаВладелец, ОповещениеОЗакрытии, РежимПроверки = Ложь) Экспорт
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ОтображатьПомощникНастройкиРазрешений Тогда
		
		Если ФормаВладелец <> Неопределено Тогда
			АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ФормаВладелец.УникальныйИдентификатор);
		Иначе
			АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
		КонецЕсли;
		
		Состояние = СостояниеЗапросаРазрешенийНаИспользованиеВнешнихРесурсов();
		Состояние.АдресХранилища = АдресХранилища;
		Состояние.ИдентификаторыЗапросов = Идентификаторы;
		Состояние.ОписаниеОповещения = ОповещениеОЗакрытии;
		Состояние.ФормаВладелец = ФормаВладелец;
		Состояние.РежимПроверки = РежимПроверки;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("АдресХранилища", АдресХранилища);
		ПараметрыФормы.Вставить("Идентификаторы", Идентификаторы);
		ПараметрыФормы.Вставить("РежимПроверки", Состояние.РежимПроверки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеИнициализацииЗапросаРазрешенийНаИспользованиеВнешнихРесурсов",
			НастройкаРазрешенийНаИспользованиеВнешнихРесурсовВМоделиСервисаКлиент,
			Состояние);
		
		ОткрытьФорму(
			"Обработка.НастройкаРазрешенийНаИспользованиеВнешнихРесурсовВМоделиСервиса.Форма.ИнициализацияЗапросаРазрешений",
			ПараметрыФормы,
			ФормаВладелец,
			,
			,
			,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	Иначе
		
		ЗавершитьНастройкуРазрешенийНаИспользованиеВнешнихРесурсовАсинхронно(ОповещениеОЗакрытии);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеИнициализацииЗапросаРазрешенийНаИспользованиеВнешнихРесурсов(Результат, Состояние) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ДоступноИспользованиеРазделенныхДанных Тогда
			
			ИмяФормы = "Обработка.НастройкаРазрешенийНаИспользованиеВнешнихРесурсовВМоделиСервиса.Форма.ЗапросРазрешенийУАдминистратораАбонента";
			
		Иначе
			
			ИмяФормы = "Обработка.НастройкаРазрешенийНаИспользованиеВнешнихРесурсовВМоделиСервиса.Форма.ЗапросРазрешенийУАдминистратораСервиса";
			
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("АдресХранилища", Состояние.АдресХранилища);
		ПараметрыФормы.Вставить("РежимПроверки", Состояние.РежимПроверки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеНастройкиРазрешенийНаИспользованиеВнешнихРесурсов",
			НастройкаРазрешенийНаИспользованиеВнешнихРесурсовВМоделиСервисаКлиент,
			Состояние);
		
		ОткрытьФорму(
			ИмяФормы,
			ПараметрыФормы,
			Состояние.ФормаВладелец,
			,
			,
			,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ПрерватьНастройкуРазрешенийНаИспользованиеВнешнихРесурсовАсинхронно(Состояние.ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеНастройкиРазрешенийНаИспользованиеВнешнихРесурсов(Результат, Состояние) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ЗавершитьНастройкуРазрешенийНаИспользованиеВнешнихРесурсовАсинхронно(Состояние.ОписаниеОповещения);
		
	Иначе
		
		ПрерватьНастройкуРазрешенийНаИспользованиеВнешнихРесурсовАсинхронно(Состояние.ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

//

// Асинхронно (по отношению к коду, из которого вызывался мастер) выполняет обработку описания оповещения,
// которое изначально было передано из формы, для которой мастер открывался в пседо-модальном режиме, возвращая
// код возврата ОК.
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения, которое было передано из вызывающего кода.
//
Процедура ЗавершитьНастройкуРазрешенийНаИспользованиеВнешнихРесурсовАсинхронно(Знач ОписаниеОповещения)
	
	ОповещениеПриПримененииЗапросовНаИспользованиеВнешнихРесурсов = ОписаниеОповещения;
	ПодключитьОбработчикОжидания("ЗавершитьНастройкуРазрешенийНаИспользованиеВнешнихРесурсовВМоделиСервиса", 0.1, Истина);
	
КонецПроцедуры

// Асинхронно (по отношению к коду, из которого вызывался мастер) выполняет обработку описания оповещения,
// которое изначально было передано из формы, для которой мастер открывался в пседо-модальном режиме, возвращая
// код возврата Отмена.
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения, которое было передано из вызывающего кода.
//
Процедура ПрерватьНастройкуРазрешенийНаИспользованиеВнешнихРесурсовАсинхронно(Знач ОписаниеОповещения)
	
	ОповещениеПриПримененииЗапросовНаИспользованиеВнешнихРесурсов = ОписаниеОповещения;
	ПодключитьОбработчикОжидания("ПрерватьНастройкуРазрешенийНаИспользованиеВнешнихРесурсовВМоделиСервиса", 0.1, Истина);
	
КонецПроцедуры

// Синхронно (по отношению к коду, из которого вызывался мастер) выполняет обработку описания оповещения,
// которое изначально было передано из формы, для которой мастер открывался в псевдо-модальном режиме.
//
// Параметры:
//  КодВозврата - КодВозвратаДиалога.
//
Процедура ЗавершитьНастройкуРазрешенийНаИспользованиеВнешнихРесурсовСинхронно(Знач КодВозврата) Экспорт
	
	ОповещениеОЗакрытии = ОповещениеПриПримененииЗапросовНаИспользованиеВнешнихРесурсов;
	ОповещениеПриПримененииЗапросовНаИспользованиеВнешнихРесурсов = Неопределено;
	Если ОповещениеОЗакрытии <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, КодВозврата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Конструктор структуры, которая используется для хранения состояния работы мастера
// настройки разрешений на использование внешних ресурсов.
//
// Возвращаемое значение: Структура - описание полей см. в теле функции.
//
Функция СостояниеЗапросаРазрешенийНаИспользованиеВнешнихРесурсов()
	
	Результат = Новый Структура();
	
	// Идентификаторы запросов на использование внешних ресурсов, которые должны быть
	// предоставлены - Массив(УникальныйИдентификатор).
	Результат.Вставить("ИдентификаторыЗапросов", Новый Массив());
	
	// Оригинальное описание оповещения, которое должно быть вызвано после того, как запрос
	// разрешений будет применен.
	Результат.Вставить("ОписаниеОповещения", Неопределено);
	
	// Адрес во временном хранилище, по которому размещаются данные, передаваемые между формами
	Результат.Вставить("АдресХранилища", "");
	
	// Форма, из которой первоначально было инициализировано применение запросов на использование
	// внешних ресурсов
	Результат.Вставить("ФормаВладелец");
	
	// Режим проверки - признак завершения операции, в рамках которой предоставлялись новые разрешения
	// в профилях безопасности (например, в процессе записи элемента справочника были предоставлены разрешения
	// в профилях безопасности, а дальнейшая запись элемента справочника не была завершена).
	Результат.Вставить("РежимПроверки", Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

