#Область СлужебныйПрограммныйИнтерфейс

// Возвращает режим исполнения внешнего модуля в модели сервиса.
//
// Параметры:
//  ВнешнийМодуль - ЛюбаяСсылка,
//
// Возвращаемое значение - Строка - режим исполнения внешнего модуля.
//
Функция РежимИсполненияВнешнегоМодуля(Знач ВнешнийМодуль) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			Менеджер = РегистрыСведений.РежимыПодключенияВнешнихМодулейОбластейДанных.СоздатьМенеджерЗаписи();
			Менеджер.ВнешнийМодуль = ВнешнийМодуль;
			Менеджер.Прочитать();
			Если Менеджер.Выбран() Тогда
				Возврат Менеджер.БезопасныйРежим;
			Иначе
				Если ПолучитьФункциональнуюОпцию("ИспользуютсяПрофилиБезопасности") Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Для внешнего модуля %1 не определен режим подключения!';uk='Для зовнішнього модуля %1 не визначений режим підключення!'"), ВнешнийМодуль);
				Иначе
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Возврат РаботаВБезопасномРежимеСлужебный.РежимПодключенияВнешнегоМодуля(ВнешнийМодуль);
		КонецЕсли;
		
	Иначе
		ВызватьИсключение НСтр("ru='Функция не предназначена для вызова в информационной базе, в которой выключено разделение по областям данных!';uk='Функція не призначена для виклику в інформаційній базі, в якій вимкнено поділ по областях даних!'");
	КонецЕсли;
	
КонецФункции

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов"].Добавить(
		"РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииИсключенийПоискаСсылок"].Добавить(
		"РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПроверкеВозможностиНастройкиПрофилейБезопасности"].Добавить(
		"РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриЗапросеНаАдминистрированиеРазрешенийИспользованияВнешнихРесурсов"].Добавить(
		"РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриЗапросеРазрешенийНаИспользованиеВнешнихРесурсов"].Добавить(
		"РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриРасчетеДельтыИзмененийНаИспользованиеВнешнихРесурсов"].Добавить(
		"РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПримененииЗапросовНаИспользованиеВнешнихРесурсов"].Добавить(
		"РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПослеОбработкиЗапросовНаИспользованиеВнешнихРесурсов"].Добавить(
		"РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
	
	СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса\ПриЗаполненииТаблицыПараметровИБ"].Добавить(
		"РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
	
	СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями\РегистрацияИнтерфейсовПринимаемыхСообщений"].Добавить(
		"РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ВыгрузкаЗагрузкаДанных") Тогда
		СерверныеОбработчики["ТехнологияСервиса.ВыгрузкаЗагрузкаДанных\ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки"].Добавить(
			"РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
	КонецЕсли;
	
	// КЛИЕНТСКИЕ СОБЫТИЯ
	
	КлиентскиеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОбработкеЗапросовНаИспользованиеВнешнихРесурсов"].Добавить(
		"НастройкаРазрешенийНаИспользованиеВнешнихРесурсовВМоделиСервисаКлиент");
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
// используя в качестве ключей названия подсистем.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура: 
//	- Ключи = Названия подсистем. 
//	- Значения = Массивы названий поддерживаемых версий.
//
// Пример реализации:
//
//	// СервисПередачиФайлов
//	МассивВерсий = Новый Массив;
//	МассивВерсий.Добавить("1.0.1.1");	
//	МассивВерсий.Добавить("1.0.2.1"); 
//	СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//	// Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	Если РаботаВБезопасномРежимеСлужебный.ВозможноИспользованиеПрофилейБезопасности() Тогда
		МассивВерсий = Новый Массив;
		МассивВерсий.Добавить("1.0.0.1");
		СтруктураПоддерживаемыхВерсий.Вставить("SecurityProfileCompatibilityMode", МассивВерсий);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет массив списком имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Параметры:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Процедура ПриДобавленииИсключенийПоискаСсылок(Массив) Экспорт
	
	Массив.Добавить(Метаданные.РегистрыСведений.ЗапросыАдминистрированияРазрешенийИспользованияВнешнихРесурсовОбластейДанных.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных.ПолноеИмя());
	
	Массив.Добавить(Метаданные.РегистрыСведений.РежимыПодключенияВнешнихМодулейОбластейДанных.ПолноеИмя());
	
	Массив.Добавить(Метаданные.РегистрыСведений.РазрешенияПереходаВПривилегированныйРежимОбластейДанных.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.РазрешенныеИнтернетРесурсыОбластейДанных.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.РазрешенныеКаталогиФайловойСистемыОбластейДанных.ПолноеИмя());
	
КонецПроцедуры

// Вызывается при проверке возможности настройки профилей безопасности
//
// Параметры:
//  Отказ - Булево. Если для информационной базы недоступно использование профилей безопасности -
//    значение данного параметра нужно установить равным Истина.
//
Процедура ПриПроверкеВозможностиНастройкиПрофилейБезопасности(Отказ) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		// В модели сервиса управление настройкой профилей безопасности выполняется централизованно
		// из менеджера сервиса.
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании запроса на администрирование разрешений использования внешних ресурсов.
//
// Параметры:
//  ВнешнийМодуль - ЛюбаяСсылка,
//  Операция - ПеречислениеСсылка.ОперацииСПрофилямиБезопасности,
//  СтандартнаяОбработка - Булево, флаг выполнения стандартной обработки создания запроса на администрирование
//    использования внешних ресурсов.
//  Результат - УникальныйИдентификатор - идентификатор запроса (в том случае, если внутри обработчика
//    значение параметра СтандартнаяОбработка установлено в значение Ложь).
//
Процедура ПриЗапросеНаАдминистрированиеРазрешенийИспользованияВнешнихРесурсов(Знач ВнешнийМодуль, Знач Операция, СтандартнаяОбработка, Результат) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Обработки.НастройкаРазрешенийНаИспользованиеВнешнихРесурсовВМоделиСервиса.ПриЗапросеНаАдминистрированиеРазрешенийИспользованияВнешнихРесурсов(
			ВнешнийМодуль, Операция, СтандартнаяОбработка, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании запроса на использование внешних ресурсов.
//
// Параметры:
//  Владелец - ЛюбаяСсылка - владелец запрашиваемых разрешений на использование внешних ресурсов,
//  РежимЗамещения - Булево - флаг замещения ранее предоставленных разрешений по владельцу,
//  ДобавляемыеРазрешения - Массив(ОбъектXDTO) - массив добавляемых разрешений,
//  УдаляемыеРазрешения - Массив(ОбъектXDTO) - массив удаляемых разрешений,
//  СтандартнаяОбработка - Булево, флаг выполнения стандартной обработки создания запроса на использование
//    внешних ресурсов.
//  Результат - УникальныйИдентификатор - идентификатор запроса (в том случае, если внутри обработчика
//    значение параметра СтандартнаяОбработка установлено в значение Ложь).
//
Процедура ПриЗапросеРазрешенийНаИспользованиеВнешнихРесурсов(Знач Владелец, Знач РежимЗамещения, Знач ДобавляемыеРазрешения = Неопределено, Знач УдаляемыеРазрешения = Неопределено, СтандартнаяОбработка, Результат) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Обработки.НастройкаРазрешенийНаИспользованиеВнешнихРесурсовВМоделиСервиса.ПриЗапросеРазрешенийНаИспользованиеВнешнихРесурсов(
			Владелец, РежимЗамещения, ДобавляемыеРазрешения, УдаляемыеРазрешения, СтандартнаяОбработка, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при применении запросов на использование внешних ресурсов.
//
// Параметры:
//  ИдентификаторыЗапросов - Массив(УникальныйИдентификатор) - массив идентификаторов запросов,
//  СтандартнаяОбработка - Булево, флаг выполнения стандартной обработки расчета дельты,
//
Процедура ПриПримененииЗапросовНаИспользованиеВнешнихРесурсов(Знач ИдентификаторыЗапросов, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Обработки.НастройкаРазрешенийНаИспользованиеВнешнихРесурсовВМоделиСервиса.ПриПримененииЗапросовНаИспользованиеВнешнихРесурсов(
			ИдентификаторыЗапросов, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после обработки запросов на использование внешних ресурсов.
//
// Параметры:
//  ИдентификаторыЗапросов - Массив(УникальныйИдентификатор) - массив идентификаторов запросов,
//  РежимВосстановления - Булево, флаг вызова для запросов восстановления разрешений в кластере после
//    отказа от записи объектов, для которых требовались разрешения на использование внешних ресурсов,
//  СтандартнаяОбработка - Булево, флаг выполнения стандартной обработки,
//
Процедура ПослеОбработкиЗапросовНаИспользованиеВнешнихРесурсов(Знач ИдентификаторыЗапросов, Знач РежимВосстановления, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Обработки.НастройкаРазрешенийНаИспользованиеВнешнихРесурсовВМоделиСервиса.ПослеОбработкиЗапросовНаИспользованиеВнешнихРесурсов(
			ИдентификаторыЗапросов, РежимВосстановления, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует список параметров ИБ.
//
// Параметры:
// ТаблицаПараметров - ТаблицаЗначений - таблица описания параметров.
// Описание состав колонок - см. РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ()
//
Процедура ПриЗаполненииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИспользуютсяПрофилиБезопасности");
		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ПрофильБезопасностиИнформационнойБазы");
		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АвтоматическиНастраиватьРазрешенияВПрофиляхБезопасности");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданный массив общими модулями, которые являются обработчиками интерфейсов
//  принимаемых сообщений
//
// Параметры:
//  МассивОбработчиков - массив
//
Процедура РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков) Экспорт
	
	МассивОбработчиков.Добавить(СообщенияКонтрольУправленияРазрещениямиИнтерфейс);
	
КонецПроцедуры

// Заполняет массив типов, исключаемых из выгрузки и загрузки данных.
//
// Параметры:
//  Типы - Массив(Типы).
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.РегистрыСведений.ЗапросыАдминистрированияРазрешенийИспользованияВнешнихРесурсовОбластейДанных);
	Типы.Добавить(Метаданные.РегистрыСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных);
	Типы.Добавить(Метаданные.РегистрыСведений.РазрешенияПереходаВПривилегированныйРежимОбластейДанных);
	Типы.Добавить(Метаданные.РегистрыСведений.РазрешенныеИнтернетРесурсыОбластейДанных);
	Типы.Добавить(Метаданные.РегистрыСведений.РазрешенныеКаталогиФайловойСистемыОбластейДанных);
	Типы.Добавить(Метаданные.РегистрыСведений.РежимыПодключенияВнешнихМодулейОбластейДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОчисткаНеактуальныхЗапросовНаИспользованиеВнешнихРесурсов() Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Запросы.Идентификатор КАК Идентификатор,
		|	Запросы.ВнешнийМодуль КАК ВнешнийМодуль,
		|	Запросы.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных КАК Запросы
		|ГДЕ
		|	Запросы.МоментВремени <= &ДатаЗапроса";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаЗапроса", ТекущаяУниверсальнаяДата() - 3600); // Время жизни запроса - час
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Ключ = РегистрыСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных.СоздатьКлючЗаписи(
				Новый Структура("Идентификатор, ВнешнийМодуль, Владелец", Выборка.Идентификатор, Выборка.ВнешнийМодуль, Выборка.Владелец));
			ЗаблокироватьДанныеДляРедактирования(Ключ);
			
		Исключение
			
			// Обработка исключения не требуется.
			// Ожидаемое исключение - попытка удалить ту же запись регистра из другого сеанса.
			ОтменитьТранзакцию();
			Продолжить;
			
		КонецПопытки;
		
		Менеджер = РегистрыСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсовОбластейДанных.СоздатьМенеджерЗаписи();
		Менеджер.Идентификатор = Выборка.Идентификатор;
		Менеджер.Прочитать();
		Если Менеджер.Выбран() Тогда
			Менеджер.Удалить();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Запросы.Идентификатор КАК Идентификатор,
		|	Запросы.ВнешнийМодуль КАК ВнешнийМодуль
		|ИЗ
		|	РегистрСведений.ЗапросыАдминистрированияРазрешенийИспользованияВнешнихРесурсовОбластейДанных КАК Запросы
		|ГДЕ
		|	Запросы.МоментВремени <= &ДатаЗапроса";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаЗапроса", ТекущаяУниверсальнаяДата() - 3600); // Время жизни запроса - час
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Ключ = РегистрыСведений.ЗапросыАдминистрированияРазрешенийИспользованияВнешнихРесурсовОбластейДанных.СоздатьКлючЗаписи(
				Новый Структура("Идентификатор, ВнешнийМодуль", Выборка.Идентификатор, Выборка.ВнешнийМодуль));
			ЗаблокироватьДанныеДляРедактирования(Ключ);
			
		Исключение
			
			// Обработка исключения не требуется.
			// Ожидаемое исключение - попытка удалить ту же запись регистра из другого сеанса.
			ОтменитьТранзакцию();
			Продолжить;
			
		КонецПопытки;
		
		Менеджер = РегистрыСведений.ЗапросыАдминистрированияРазрешенийИспользованияВнешнихРесурсовОбластейДанных.СоздатьМенеджерЗаписи();
		Менеджер.Идентификатор = Выборка.Идентификатор;
		Менеджер.Прочитать();
		Если Менеджер.Выбран() Тогда
			Менеджер.Удалить();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти