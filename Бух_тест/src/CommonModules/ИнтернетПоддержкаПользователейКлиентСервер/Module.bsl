
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает версию подсистемы ИнтернетПоддержкаПользователей.
// Возвращаемое значение:
//	Строка - версия текущей библиотеки.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "2.1.1.1";
	
КонецФункции

// Возвращает версию поддерживаемого бибилотекой API
// взаимодействия с серверной частью.
//
// Возвращаемое значение:
//	Строка - версия поддерживаемого библиотекой API
//
Функция ВерсияAPIВзаимодействия() Экспорт
	
	Возврат "1.0.1.1";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции для работы с веб-сервисом интернет-поддержки

// Возвращает URL веб-сервиса интернет-поддержки пользователей.
//
// Возвращаемое значение:
//	Строка - URL веб-сервиса ИПП.
//
Функция ИмяWSОпределения() Экспорт
	
	Возврат "https://webits.1c.ru/services/WebItsSimpleService?wsdl";
	
КонецФункции

// Определение имени URI веб-сервиса ИПП.
//
// Возвращаемое значение:
//	Строка - URI сервиса.
//
Функция ИмяURIСервиса() Экспорт
	
	Возврат "https://ws.webits.onec.ru";
	
КонецФункции

// Возвращает структуру-описатель ресурса интернет-поддержки пользователей.
// Используется для заполнения разрешений доступа к внешним ресурсам.
//
// Возвращаемое значение:
// Структура - описание ресурса интернет-поддержки пользователей:
//	* Протокол - Строка - протокол соединения (http или https);
//	* Адрес    - Строка - адрес сервера;
//	* Порт     - Число  - порт на сервере интернет-поддержки;
//	* Описание - Строка - строковое описание ресурса;
//
Функция ОписаниеРесурсаИнтернетПоддержки() Экспорт
	
	Возврат Новый Структура("Протокол, Адрес, Порт, Описание",
		"HTTPS",
		"webits.1c.ru",
		443,
		НСтр("ru='Интернет-поддержка пользователей';uk='Інтернет-підтримка користувачів'"));
	
КонецФункции

// Возвращает структуру с полями-параметрами, передаваемыми в процедуры
// ИнтернетПоддержкаПользователейСерверПереопределяемый.ПриОпределенииДанныхПользователяИнтернетПоддержки()
// и ИнтернетПоддержкаПользователейСерверПереопределяемый.ПриАвторизацииПользователяВИнтернетПоддержке()
//
// Возвращаемое значение:
// Структура - с полями-параметрами:
//	* Логин  - Строка - логин пользователя;
//	* Пароль - Строка - пароль пользователя;
//
Функция НовыйДанныеПользователяИнтернетПоддержки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Логин" , "");
	Результат.Вставить("Пароль", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Сервисные процедуры и функции интернет-поддержки пользователей

// Проверка возможности запуска интернет-поддержки в соответствии с параметрами
// и местом (кнопкой) запуска. Возвращает управляющую структуру, описывающую
// действия, которые необходимо выполнить.
//
// Параметры:
//	МестоЗапуска - Строка - место запуска (имя кнопки) механизма ИПП;
//	ПараметрыИнтернетПоддержки - Структура - параметры работы механизма
//		интернет-поддержки (см. функцию
//		ИнтернетПоддержкаПользователейВызовСервера.ПараметрыИнтернетПоддержки()).
//
// Возвращаемое значение:
// Структура - если запуск в текущем режиме работы запрещен:
//	* Действие  - Строка - действие, которое необходимо выполнить;
//	* Сообщение - Строка - если выполнение действия подразумевает показ сообщения
//						   пользователю;
// Неопределено - если запуск разрешен.
//
Функция ОпределитьВозможностьЗапускаПоМестуИПараметрам(МестоЗапуска, ПараметрыИнтернетПоддержки) Экспорт
	
	// Проверка возможности запуска
	ЭтоЗапускПриСтартеПрограммы = (МестоЗапуска = "systemStartNew");
	
	Если ПараметрыИнтернетПоддержки.ИспользоватьИнтернетПоддержку <> Истина Тогда
		
		Если ЭтоЗапускПриСтартеПрограммы Тогда
			Возврат Новый Структура("Действие", "Возврат");
		Иначе
			Результат = Новый Структура("Действие,Сообщение", "ПоказатьСообщение", "");
			Если ПараметрыИнтернетПоддержки.ИспользоватьИнтернетПоддержку = Ложь Тогда
				Результат.Сообщение = НСтр("ru='Использование интернет-поддержки пользователей запрещено в текущем режиме работы.';uk='Використання інтернет-підтримки користувачів заборонено в поточному режимі роботи.'");
			Иначе
				Результат.Сообщение = НСтр("ru='Использование интернет-поддержки пользователей неопределено для текущего режима работы.';uk='Використання інтернет-підтримки користувачів визначено для поточного режиму роботи.'");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПараметрыИнтернетПоддержки.ЗапускРазрешен Тогда
		Если ЭтоЗапускПриСтартеПрограммы Тогда
			Возврат Новый Структура("Действие", "Возврат");
		Иначе
			Результат = Новый Структура("Действие, Сообщение",
				"ПоказатьСообщение",
				НСтр("ru='Недостаточно прав для запуска интернет-поддержки пользователей.';uk='Недостатньо прав для запуску інтернет-підтримки користувачів.'"));
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПараметрыИнтернетПоддержки.ИспользоватьИнформационноеОкно
		И МестоЗапуска = "handStartNew" Тогда
		
		Результат = Новый Структура("Действие, Сообщение",
			"ПоказатьСообщение",
			НСтр("ru='Использование монитора интернет-поддержки пользователей"
"запрещено в текущем режиме работы.';uk='Використання монітора інтернет-підтримки користувачів"
"заборонено в поточному режимі роботи.'"));
		Возврат Результат;
		
	КонецЕсли;
	
	Если ЭтоЗапускПриСтартеПрограммы И НЕ ПараметрыИнтернетПоддержки.ЗапускатьПриСтарте Тогда
		Возврат Новый Структура("Действие", "Возврат");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Если Не ВебКлиент Тогда

// Проверка доступности сервиса интернет-поддержки пользователей посредством
// вызова метода isReady().
//
// Параметры:
//	ОписаниеСервисаИПП - Структура - описатель соединения с веб-сервисом ИПП:
//		см. функцию НовыйОписаниеСервисаИПП().
//
// Возвращаемое значение:
//	Булево - Истина, если сервис доступен, Ложь - если при обращении к сервису
//		возникло исключение;
//	Строка - описание причины недоступности сервиса, возвращенной сервисом;
//
Функция ЕстьДоступКВебCервису(ОписаниеСервисаИПП) Экспорт
	
	Попытка
		
		ОтветСервера = СервисИПП_IsReady(ОписаниеСервисаИПП);
		
		Если НРег(СокрЛП(ОтветСервера)) = "ready" Тогда
			Возврат Истина;
		Иначе
			Возврат ОтветСервера;
		КонецЕсли;
		
	Исключение
		
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

// Проверка, зарегистрирована ли конфигурация в сервисе интернет-поддержки
// пользователей.
//
// Параметры:
//	ИмяКонфигурации - Строка - имя текущей конфигурации;
//	ОшибкаДоступаКВебСервису - Булево - в параметре возвращается значение Истина,
//		если в процессе обращения к веб-сервису возникло исключение, ошибка
//		записывается в журнал регистрации;
//	ОписаниеСервисаИПП - Структура - описатель сервиса ИПП (см. функцию
//		НовыйОписаниеСервисаИПП());
//	ПараметрыИПП - Структура - параметры для работы с сервисом ИПП, полученные
//		ранее;
//
// Возвращаемое значение:
//	Булево - Истина, если конфигурация зарегистрирована в сервисе ИПП,
//		Ложь - если конфигурация не зарегистрирована или возникло исключение
//		при обращении к сервису ИПП.
//
Функция КонфигурацияЗарегистрированаВСервисеИПП(
	Знач ИмяКонфигурации = Неопределено,
	ОшибкаОбращенияКВебСервису = Ложь,
	ОписаниеСервисаИПП = Неопределено,
	ПараметрыИПП = Неопределено) Экспорт
	
	Если ИмяКонфигурации = Неопределено Тогда
		Если ТипЗнч(ПараметрыИПП) <> Тип("Структура")
			ИЛИ НЕ ПараметрыИПП.Свойство("ИмяКонфигурации", ИмяКонфигурации) Тогда
			// В подсистеме ИПП из всех мест вызова данной функции передается имя конфигурации,
			// но для универсальности выполняется попытка определить имя конфигурации,
			// если не передано.
			ИмяКонфигурации = ИнтернетПоддержкаПользователейВызовСервера.ИмяКонфигурации();
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		
		Если ОписаниеСервисаИПП = Неопределено Тогда
			ОписаниеСервисаИПП = НовыйОписаниеСервисаИПП(, ПараметрыИПП);
		КонецЕсли;
		
		// В качестве параметра метода передается имя конфигурации
		ОтветСервера = СервисИПП_isConfigurationSupported(
			ИмяКонфигурации,
			ОписаниеСервисаИПП);
		
		Возврат (ОтветСервера = Истина ИЛИ ОтветСервера = "true");
		
	Исключение
		ОшибкаОбращенияКВебСервису = Истина;
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с веб-сервисом интернет-поддержки
// пользователей на "низком уровне".

// Формирует описание веб-сервиса из WSDL-документа для дальнейшей работы
// с веб-сервисом ИПП.
//
// Параметры:
// АдресWSDL - Строка, Неопределено - URL расположения WSDL-документа;
//		Если не задан, тогда используется ИмяWSОпределения();
// СетевыеПараметрыИПП - Структура - сетевые параметры интернет-поддержки:
//		(см. ИнтернетПоддержкаПользователейВызовСервера.СетевыеПараметрыИнтернетПоддержки());
// КэшWSDLОписаний - Соответствие, Неопределено - кэш WSDL-описаний сервисов;
//		используется для сохранения WSDL-описаний в процессе взаимодействия с
//		сервисами ИПП. Ключ - URL WSDL-документа, значение - Строка - адрес
//		текста WSDL-описания во временном хранилище;
//
// Возвращаемое значение:
// Структура - описание соединения с сервисом ИПП:
//	* АдресWSDL - Строка - URL WSDL-документа;
//	* ТаймаутСети - Число - таймаут сетевого соединения;
//	* ФабрикаXDTO - ФабрикаXDTO - Фабрика XDTO веб-сервиса;
//	* URIСервиса - Строка - URI веб-сервиса ИПП;
//	* СоединениеПорта - HTTPСоединение - соединение с портом сервиса
//		для выполнения вызовов методов веб-сервиса;
//	* ПутьПорта - Строка - путь порта на сервере;
//	
Функция НовыйОписаниеСервисаИПП(
	АдресWSDL = Неопределено,
	СетевыеПараметры = Неопределено,
	КэшWSDLОписаний = Неопределено) Экспорт
	
	Если АдресWSDL = Неопределено Тогда
		АдресWSDL = ИмяWSОпределения();
	КонецЕсли;
	
	Результат = Новый Структура("АдресWSDL", АдресWSDL);
	
	Если СетевыеПараметры = Неопределено Тогда
		СетевыеПараметры = ИнтернетПоддержкаПользователейВызовСервера.СетевыеПараметрыИнтернетПоддержки();
	КонецЕсли;
	
	Результат.Вставить("ТаймаутСети", СетевыеПараметры.ТаймаутСети);
	
	ТекстWSDL     = Неопределено;
	АдресОписания = Неопределено;
	Если КэшWSDLОписаний <> Неопределено Тогда
		АдресОписания = КэшWSDLОписаний.Получить(АдресWSDL);
		Если АдресОписания <> Неопределено Тогда
			ТекстWSDL = ПолучитьИзВременногоХранилища(АдресОписания);
		КонецЕсли;
	КонецЕсли;
	
	НастройкиПрокси = Неопределено;
	СетевыеПараметры.Свойство("ПараметрыПроксиСервера", НастройкиПрокси);
	
	Если ТипЗнч(НастройкиПрокси) = Тип("Строка") Тогда
		НастройкиПрокси = ПолучитьИзВременногоХранилища(НастройкиПрокси);
	КонецЕсли;
	
	Если ТекстWSDL = Неопределено Тогда
		
		// Получение и разбор WSDL-документа
		ПараметрыПолученияWSDL = НовыйПараметрыПолученияДокумента(АдресWSDL);
		
		Если НастройкиПрокси = Неопределено Тогда
		#Если Клиент Тогда
			ИнтернетПоддержкаПользователейКлиентПереопределяемый.НастройкиПроксиСервера(НастройкиПрокси);
		#Иначе
			ИнтернетПоддержкаПользователейСерверПереопределяемый.НастройкиПроксиСервера(НастройкиПрокси);
		#КонецЕсли
		КонецЕсли;
		
		ИнтернетПрокси = СформироватьПрокси(НастройкиПрокси,
			?(ПараметрыПолученияWSDL.БезопасноеСоединение, "https", "http"));
		
		HTTP = Новый HTTPСоединение(
			ПараметрыПолученияWSDL.Сервер,
			ПараметрыПолученияWSDL.Порт,
			ПараметрыПолученияWSDL.ИмяПользователя,
			ПараметрыПолученияWSDL.Пароль,
			ИнтернетПрокси,
			Результат.ТаймаутСети,
			?(ПараметрыПолученияWSDL.БезопасноеСоединение,
				Новый(Тип("ЗащищенноеСоединениеOpenSSL")),
				Неопределено));
		
		Попытка
			
			HTTPЗапрос = Новый HTTPЗапрос(ПараметрыПолученияWSDL.Путь);
			Ответ = HTTP.Получить(HTTPЗапрос);
			ТекстWSDL = Ответ.ПолучитьТелоКакСтроку();
			
		Исключение
			ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при создании описания веб-сервиса."
"Не удалось получить WSDL-описание с сервера интернет-поддержки пользователей (%1): ';uk='Помилка при створенні опису веб-сервісу."
"Не вдалося отримати WSDL-опис з сервера інтернет-підтримки користувачів (%1): '"),
				"%1",
				АдресWSDL)
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
		
	КонецЕсли;
	
	Если КэшWSDLОписаний <> Неопределено И АдресОписания = Неопределено Тогда
		// Помещение описания WSDL во временное хранилище
		АдресОписания = ПоместитьВоВременноеХранилище(ТекстWSDL, Новый УникальныйИдентификатор);
		КэшWSDLОписаний.Вставить(АдресWSDL, АдресОписания);
		// Данные из временного хранилища удаляются при завершении бизнес-процесса
		// интернет-поддержки пользователей
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстWSDL);
	
	ПостроительDOM = Новый ПостроительDOM;
	Попытка
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	Исключение
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при создании описания веб-сервиса (%1)."
"Ошибка чтения WSDL-описания веб-сервиса интернет-поддержки пользователей: ';uk='Помилка при створенні опису веб-сервісу (%1)."
"Помилка читання WSDL-опису веб-сервісу інтернет-підтримки користувачів: '"),
				"%1",
				АдресWSDL)
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	// Создание фабрики XDTO веб-сервиса ИПП
	
	УзлыСхемы = ДокументDOM.ПолучитьЭлементыПоИмени("wsdl:types");
	Если УзлыСхемы.Количество() = 0 Тогда
		
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при создании описания веб-сервиса (%1)."
"Ошибка чтения WSDL-описания веб-сервиса интернет-поддержки пользователей: ';uk='Помилка при створенні опису веб-сервісу (%1)."
"Помилка читання WSDL-опису веб-сервісу інтернет-підтримки користувачів: '"),
				"%1",
				АдресWSDL)
			+ Символы.ПС
			+ НСтр("ru='Отсутствует элемент описания типов данных (<wsdl:types ...>).';uk='Відсутній елемент опису типів даних (<wsdl:types ...>).'");
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	УзелОписанияСхемы = УзлыСхемы[0].ПервыйДочерний;
	Если УзелОписанияСхемы = Неопределено Тогда
		
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при создании описания веб-сервиса (%1)."
"Ошибка чтения WSDL-описания веб-сервиса интернет-поддержки пользователей: ';uk='Помилка при створенні опису веб-сервісу (%1)."
"Помилка читання WSDL-опису веб-сервісу інтернет-підтримки користувачів: '"),
				"%1",
				АдресWSDL)
			+ НСтр("ru='Отсутствует элемент описания типов данных (<xs:schema ...>)';uk='Відсутній елемент опису типів даних (<xs:schema ...>)'");
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ПостроительСхемы = Новый ПостроительСхемXML;
	
	Попытка
		СхемаДанныхСервиса = ПостроительСхемы.СоздатьСхемуXML(УзелОписанияСхемы);
	Исключение
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при создании описания веб-сервиса (%1)."
"Ошибка при создании схемы данных из WSDL-описания веб-сервиса интернет-поддержки пользователей: ';uk='Помилка при створенні опису веб-сервісу (%1)."
"Помилка при створенні схеми даних з WSDL-опису веб-сервісу інтернет-підтримки користувачів: '"),
				"%1",
				АдресWSDL)
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	НаборСхем = Новый НаборСхемXML;
	НаборСхем.Добавить(СхемаДанныхСервиса);
	
	Попытка
		ФабрикаСервиса = Новый ФабрикаXDTO(НаборСхем);
	Исключение
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при создании описания веб-сервиса (%1)."
"Ошибка при создании фабрики XDTO из WSDL-описания веб-сервиса интернет-поддержки пользователей: ';uk='Помилка при створенні опису веб-сервісу (%1)."
"Помилка при створенні фабрики XDTO з WSDL-опису веб-сервісу інтернет-підтримки користувачів: '"),
				"%1",
				АдресWSDL)
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	// Определение параметров подключения к порту сервиса
	
	КорневойЭлемент = ДокументDOM.ПервыйДочерний;
	
	Результат.Вставить("ФабрикаXDTO", ФабрикаСервиса);
	
	URIСервиса = ЗначениеАтрибутаУзлаDOM(КорневойЭлемент, "targetNamespace");
	Если НЕ ЗначениеЗаполнено(URIСервиса) Тогда
		
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при создании описания веб-сервиса (%1)."
"Ошибка чтения WSDL-описания веб-сервиса интернет-поддержки пользователей: ';uk='Помилка при створенні опису веб-сервісу (%1)."
"Помилка читання WSDL-опису веб-сервісу інтернет-підтримки користувачів: '"),
				"%1",
				АдресWSDL)
			+ НСтр("ru='Отсутствует URI пространства имен в WSDL-описании.';uk='Відсутній URI простору імен в WSDL-описі.'");
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Результат.Вставить("URIСервиса", URIСервиса);
	
	// Определение адреса порта веб-сервиса
	УзлыСервисов = КорневойЭлемент.ПолучитьЭлементыПоИмени("wsdl:service");
	Если УзлыСервисов.Количество() = 0 Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при создании описания веб-сервиса (%1)."
"Ошибка чтения WSDL-описания веб-сервиса интернет-поддержки пользователей: ';uk='Помилка при створенні опису веб-сервісу (%1)."
"Помилка читання WSDL-опису веб-сервісу інтернет-підтримки користувачів: '"),
				"%1",
				АдресWSDL)
			+ НСтр("ru='Отсутствует описание веб-сервисов в WSDL-описании (<wsdl:service ...>).';uk='Відсутній опис веб-сервісів WSDL-описі (<wsdl:service ...>).'");
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	УзелСервиса = УзлыСервисов[0];
	
	ИмяСервиса = ЗначениеАтрибутаУзлаDOM(УзелСервиса, "name");
	
	УзлыПортов = УзелСервиса.ПолучитьЭлементыПоИмени("wsdl:port");
	
	Если УзлыПортов.Количество() = 0 Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при создании описания веб-сервиса (%1)."
"Ошибка чтения WSDL-описания веб-сервиса интернет-поддержки пользователей: ';uk='Помилка при створенні опису веб-сервісу (%1)."
"Помилка читання WSDL-опису веб-сервісу інтернет-підтримки користувачів: '"),
				"%1",
				АдресWSDL)
			+ НСтр("ru='Отсутствует описание портов в WSDL-описании (<wsdl:port ...>).';uk='Відсутній опис портів в WSDL-описі (<wsdl:port ...>).'");
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	УзелПорта = УзлыПортов[0];
	ИмяПорта  = ЗначениеАтрибутаУзлаDOM(УзелПорта, "name");
	
	Если НЕ ЗначениеЗаполнено(ИмяПорта) Тогда
		
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при создании описания веб-сервиса (%1)."
"Ошибка чтения WSDL-описания веб-сервиса интернет-поддержки пользователей: ';uk='Помилка при створенні опису веб-сервісу (%1)."
"Помилка читання WSDL-опису веб-сервісу інтернет-підтримки користувачів: '"),
				"%1",
				АдресWSDL)
			+ СтрЗаменить(НСтр("ru='Не удалось определить имя порта сервиса (%1).';uk=""Не вдалося визначити ім'я порту сервісу (%1)."""),
				"%1",
				ИмяСервиса);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	АдресПорта = Неопределено;
	УзлыАдреса = УзелПорта.ПолучитьЭлементыПоИмени("soap:address");
	Если УзлыАдреса.Количество() > 0 Тогда
		АдресПорта = ЗначениеАтрибутаУзлаDOM(УзлыАдреса[0], "location");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресПорта) Тогда
		
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при создании описания веб-сервиса (%1)."
"Ошибка чтения WSDL-описания веб-сервиса интернет-поддержки пользователей: ';uk='Помилка при створенні опису веб-сервісу (%1)."
"Помилка читання WSDL-опису веб-сервісу інтернет-підтримки користувачів: '"),
				"%1",
				АдресWSDL)
			+ СтрЗаменить(НСтр("ru='Не удалось определить URL заданного порта сервиса (%1).';uk='Не вдалося визначити URL заданого порту сервісу (%1).'"),
				"%1",
				ИмяПорта);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	// Создание подключения к порту веб-сервиса
	ПараметрыПодключенияКПорту = НовыйПараметрыПолученияДокумента(АдресПорта);
	
	ИнтернетПрокси = СформироватьПрокси(НастройкиПрокси,
		?(ПараметрыПодключенияКПорту.БезопасноеСоединение, "https", "http"));
	
	СоединениеПорта = Новый HTTPСоединение(
		ПараметрыПодключенияКПорту.Сервер,
		ПараметрыПодключенияКПорту.Порт,
		ПараметрыПодключенияКПорту.ИмяПользователя,
		ПараметрыПодключенияКПорту.Пароль,
		ИнтернетПрокси,
		Результат.ТаймаутСети,
		?(ПараметрыПодключенияКПорту.БезопасноеСоединение,
			Новый(Тип("ЗащищенноеСоединениеOpenSSL")),
			Неопределено));
	
	Результат.Вставить("ИнтернетПрокси"            , ИнтернетПрокси);
	Результат.Вставить("НастройкиПроксиСервера"    , НастройкиПрокси);
	Результат.Вставить("ПараметрыПодключенияКПорту", ПараметрыПодключенияКПорту);
	Результат.Вставить("СоединениеПорта"           , СоединениеПорта);
	Результат.Вставить("ПутьПорта"                 , ПараметрыПодключенияКПорту.Путь);
	
	Если НЕ СетевыеПараметры.Свойство("ДублированиеВКВТелеЗапроса") Тогда
		Результат.Вставить("ДублированиеВКВТелеЗапроса", ДублированиеВКВТелеЗапроса());
	Иначе
		Результат.Вставить("ДублированиеВКВТелеЗапроса", СетевыеПараметры.ДублированиеВКВТелеЗапроса);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Изменяет таймаут обращения к сервису в текущем соединении с сервисом ИПП.
//
// Параметры:
//	ОписаниеСервисаИПП - Структура - см. функцию НовыйОписаниеСервисаИПП();
//	ЗначениеТаймаута - Число - значение устанавливаемого таймаута в секундах;
//
Процедура ИзменитьТаймаутОбращения(ОписаниеСервисаИПП, ЗначениеТаймаута) Экспорт
	
	ОписаниеСервисаИПП.ТаймаутСети = ЗначениеТаймаута;
	
	// Назначить таймаут в HTTP-соединии возможно только
	// в конструкторе, поэтому необходимо повторно создать
	// подключение порта
	
	ПараметрыПодключенияКПорту = ОписаниеСервисаИПП.ПараметрыПодключенияКПорту;
	СоединениеПорта = Новый HTTPСоединение(
		ПараметрыПодключенияКПорту.Сервер,
		ПараметрыПодключенияКПорту.Порт,
		ПараметрыПодключенияКПорту.ИмяПользователя,
		ПараметрыПодключенияКПорту.Пароль,
		ОписаниеСервисаИПП.ИнтернетПрокси,
		ЗначениеТаймаута,
		?(ПараметрыПодключенияКПорту.БезопасноеСоединение,
			Новый(Тип("ЗащищенноеСоединениеOpenSSL")),
			Неопределено));
	
	ОписаниеСервисаИПП.СоединениеПорта = СоединениеПорта;
	
КонецПроцедуры

// Прокси-функция для вызова метода isReady() веб-сервиса ИПП
//
// Параметры:
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
// Строка - значение, возвращенное методом isReady() веб-сервиса ИПП;
//
Функция СервисИПП_isReady(ОписаниеСервисаИПП) Экспорт
	
	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();
	ТекстКонверта  = ТекстВКонвертеSOAP(ЗаписьКонверта);
	
	Попытка
		ТелоОтвета = ОтправитьЗапросSOAP(ТекстКонверта, ОписаниеСервисаИПП);
	Исключение
		
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции isReady сервиса (%1): ';uk='Помилка при виклику операції isReady сервісу (%1): '"),
			"%1",
			ОписаниеСервисаИПП.АдресWSDL)
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП("isReadyResponse", ОписаниеСервисаИПП);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции isReady сервиса (%1)."
"Не удалось определить тип корневого свойства isReadyResponse.';uk='Помилка при виклику операції isReady сервісу (%1)."
"Не вдалося визначити тип кореневої властивості isReadyResponse.'"),
			"%1",
			ОписаниеСервисаИПП.АдресWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Попытка
		Значение = ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаИПП, ТипОбъекта);
	Исключение
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции isReady сервиса (%1).';uk='Помилка при виклику операції isReady сервісу (%1).'"),
			"%1",
			ОписаниеСервисаИПП.АдресWSDL)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru='Тело запроса:';uk='Тіло запиту:'")
			+ Символы.ПС
			+ ТекстКонверта;
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		
		// Возвращено описание исключения SOAP
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции isReady сервиса (%1)."
"Ошибка SOAP: ';uk='Помилка при виклику операції isReady сервісу (%1)."
"Помилка SOAP: '"),
			"%1",
			ОписаниеСервисаИПП.АдресWSDL)
			+ ОписаниеИсключенияSOAPВСтроку(Значение);
		
		ВызватьИсключение ТекстИсключения;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ЗначениеXDTO") Тогда
		Возврат Значение.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Прокси-функция для вызова метода isConfigurationSupported() веб-сервиса ИПП.
//
// Параметры:
// ИмяКонфигурации - Строка - имя текущей конфигурации;
// ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
// Булево - значение, возвращенное методом isConfigurationSupported()
//		веб-сервиса ИПП;
//
Функция СервисИПП_isConfigurationSupported(ИмяКонфигурации, ОписаниеСервисаИПП) Экспорт
	
	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();
	
	ТипЗначенияСвойства = ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП("isConfigurationSupported",
		ОписаниеСервисаИПП);
	
	Если ТипЗначенияСвойства = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции isConfigurationSupported сервиса (%1)."
"Не удалось определить тип корневого свойства isConfigurationSupported.';uk='Помилка при виклику операції isConfigurationSupported сервісу (%1)."
"Не вдалося визначити тип кореневого властивості isConfigurationSupported.'"),
			"%1",
			ОписаниеСервисаИПП.АдресWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ЗначениеXDTO = ОписаниеСервисаИПП.ФабрикаXDTO.Создать(ТипЗначенияСвойства, ИмяКонфигурации);
	
	ОписаниеСервисаИПП.ФабрикаXDTO.ЗаписатьXML(ЗаписьКонверта,
		ЗначениеXDTO,
		"isConfigurationSupported",
		,
		ФормаXML.Элемент,
		НазначениеТипаXML.Явное);
	
	ТекстКонверта = ТекстВКонвертеSOAP(ЗаписьКонверта);
	
	Попытка
		ТелоОтвета = ОтправитьЗапросSOAP(ТекстКонверта, ОписаниеСервисаИПП);
	Исключение
		
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции isConfigurationSupported сервиса (%1): ';uk='Помилка при виклику операції isConfigurationSupported сервісу (%1): '"),
			"%1",
			ОписаниеСервисаИПП.АдресWSDL)
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП("isConfigurationSupportedResponse", ОписаниеСервисаИПП);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции isConfigurationSupported сервиса (%1)."
"Не удалось определить тип корневого свойства isConfigurationSupportedResponse.';uk='Помилка при виклику операції isConfigurationSupported сервісу (%1)."
"Не вдалося визначити тип кореневого властивості isConfigurationSupportedResponse.'"),
			"%1",
			ОписаниеСервисаИПП.АдресWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Попытка
		Значение = ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаИПП, ТипОбъекта);
	Исключение
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции isConfigurationSupported сервиса (%1).';uk='Помилка при виклику операції isConfigurationSupported сервісу (%1).'"),
			"%1",
			ОписаниеСервисаИПП.АдресWSDL)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru='Тело запроса:';uk='Тіло запиту:'")
			+ Символы.ПС
			+ ТекстКонверта;
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") Тогда
		Возврат Значение.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Прокси-функция для вызова метода process() веб-сервиса ИПП.
//
// Параметры:
//	ПараметрыЗапроса - ОбъектXDTO - параметры запроса метода process();
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
//	ОбъектXDTO - значение, возвращенное методом process() веб-сервиса ИПП;
//
Функция СервисИПП_process(ПараметрыЗапроса, ОписаниеСервисаИПП) Экспорт
	
	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();
	
	ЗаписьКонверта.ЗаписатьНачалоЭлемента("m:processRequest");
	ЗаписьКонверта.ЗаписатьАтрибут("xmlns:m", ОписаниеСервисаИПП.URIСервиса);
	
	ОписаниеСервисаИПП.ФабрикаXDTO.ЗаписатьXML(
		ЗаписьКонверта,
		ПараметрыЗапроса,
		"parameters",
		,
		ФормаXML.Элемент,
		НазначениеТипаXML.Явное);
	
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </m:processRequest>
	
	ТекстКонверта = ТекстВКонвертеSOAP(ЗаписьКонверта);
	
	Попытка
		ТелоОтвета = ОтправитьЗапросSOAP(ТекстКонверта, ОписаниеСервисаИПП);
	Исключение
		
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции process сервиса (%1): ';uk='Помилка при виклику операції process сервісу (%1): '"),
			"%1",
			ОписаниеСервисаИПП.АдресWSDL)
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП("processResponse", ОписаниеСервисаИПП);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции process сервиса (%1)."
"Не удалось определить тип корневого свойства processResponse.';uk='Помилка при виклику операції process сервісу (%1)."
"Не вдалося визначити тип кореневої властивості processResponse.'"),
			"%1",
			ОписаниеСервисаИПП.АдресWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Попытка
		Значение = ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаИПП, ТипОбъекта);
	Исключение
		
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции process сервиса (%1).';uk='Помилка при виклику операції process сервісу (%1).'"),
			"%1",
			ОписаниеСервисаИПП.АдресWSDL)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru='Тело запроса:';uk='Тіло запиту:'")
			+ Символы.ПС
			+ ТекстКонверта;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		Возврат Значение.commands;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Прокси-функция для вызова метода sendmailtonet() веб-сервиса ИПП
//
// Параметры:
//	ПараметрыЗапроса - ОбъектXDTO - параметры запроса метода sendmailtonet();
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
//	ОбъектXDTO - значение, возвращенное методом process() веб-сервиса ИПП;
//
Функция СервисИПП_sendmailtonet(ПараметрыЗапроса, ОписаниеСервисаИПП) Экспорт
	
	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();
	
	ОписаниеСервисаИПП.ФабрикаXDTO.ЗаписатьXML(
		ЗаписьКонверта,
		ПараметрыЗапроса,
		"sendmailParams",
		ОписаниеСервисаИПП.URIСервиса,
		ФормаXML.Элемент,
		НазначениеТипаXML.Явное);
	
	ТекстКонверта = ТекстВКонвертеSOAP(ЗаписьКонверта);
	
	Попытка
		ТелоОтвета = ОтправитьЗапросSOAP(ТекстКонверта, ОписаниеСервисаИПП);
	Исключение
		
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции sendmailtonet сервиса (%1). ';uk='Помилка при виклику операції sendmailtonet сервісу (%1). '"),
			"%1",
			ОписаниеСервисаИПП.АдресWSDL)
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП("processResponse", ОписаниеСервисаИПП);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции sendmailtonet сервиса (%1)."
"Не удалось определить тип корневого свойства processResponse.';uk='Помилка при виклику операції sendmailtonet сервісу (%1)."
"Не вдалося визначити тип кореневого властивості processResponse.'"),
			"%1",
			ОписаниеСервисаИПП.АдресWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Попытка
		Значение = ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаИПП, ТипОбъекта);
	Исключение
		
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции process сервиса (%1).';uk='Помилка при виклику операції process сервісу (%1).'"),
			"%1",
			ОписаниеСервисаИПП.АдресWSDL)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru='Тело запроса:';uk='Тіло запиту:'")
			+ Символы.ПС
			+ ТекстКонверта;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		Возврат Значение.commands;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает строковое значение атрибута узла DOM-документа.
//
// Параметры:
//	УзелDOM - УзелDOM - узел DOM-документа;
//	ИмяАтрибута - Строка - полное имя атрибута;
//	ЗначениеЕслиНеНайдено - Произвольный - значение, которое необходимо
//		возвратить, если атрибут не найден;
//
// Возвращаемое значение:
//	Строка - строковое значение атрибута узла;
//
Функция ЗначениеАтрибутаУзлаDOM(УзелDOM, ИмяАтрибута, ЗначениеЕслиНеНайдено = Неопределено)
	
	Атрибут = УзелDOM.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Возврат ЗначениеЕслиНеНайдено;
	Иначе
		Возврат Атрибут.Значение;
	КонецЕсли;
	
КонецФункции

// Возвращает тип значения корневого свойства пакета фабрики XDTO
// веб-сервиса ИПП.
//
// Параметры:
//	ИмяСвойства - Строка - имя корневого свойства;
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
//	ТипЗначенияXDTO, ТипОбъектаXDTO, Неопределено - возвращаемый тип корневого
//		свойства, Неопределено - если корневое свойство отсутствует.
//
Функция ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП(ИмяСвойства, ОписаниеСервисаИПП)
	
	Пакет            = ОписаниеСервисаИПП.ФабрикаXDTO.Пакеты.Получить(ОписаниеСервисаИПП.URIСервиса);
	КорневоеСвойство = Пакет.КорневыеСвойства.Получить(ИмяСвойства);
	Если КорневоеСвойство = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат КорневоеСвойство.Тип;
	КонецЕсли;
	
КонецФункции

// Формирует объект тип ЗаписьXML с записанными SOAP-заголовками;
//
// Возвращаемое значение:
//	ЗаписьXML - объект записи XML с записанными SOAP-заголовками;
//
Функция НовыйЗаписьКонвертаSOAP()
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Envelope");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:soap", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Header");
	ЗаписьXML.ЗаписатьКонецЭлемента(); // </soap:Header>
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Body");
	
	Возврат ЗаписьXML;
	
КонецФункции

// Финализирует запись конверта SOAP и возвращает текст конверта.
//
// Параметры:
//	ЗаписьКонверта - ЗаписьXML - объект, в который выполнялась запись конверта;
//
// Возвращаемое значение:
//	Строка - текст конверта SOAP;
//
Функция ТекстВКонвертеSOAP(ЗаписьКонверта)
	
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </soap:Body>
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </soap:Envelope>
	
	Возврат ЗаписьКонверта.Закрыть();
	
КонецФункции

// Отправку SOAP-конверта веб-сервису ИПП и получение ответного SOAP-конверта.
//
// Параметры:
//	ТекстКонверта - Строка - текст конверта-запроса;
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
//	Строка - текст SOAP-конверта-ответа;
//
Функция ОтправитьЗапросSOAP(ТекстКонверта, ОписаниеСервисаИПП)
	
	ПараметрыКонструктора = Новый Массив;
	ПараметрыКонструктора.Добавить(ОписаниеСервисаИПП.ПутьПорта);
	HTTPЗапрос = Новый(Тип("HTTPЗапрос"), ПараметрыКонструктора);
	HTTPЗапрос.Заголовки["Content-Type"] = "text/xml;charset=UTF-8";
	
	Если ОписаниеСервисаИПП.ДублированиеВКВТелеЗапроса Тогда
		ТекстКонверта = СтрЗаменить(ТекстКонверта, Символы.ВК + Символы.ПС, Символы.ПС);
	КонецЕсли;
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстКонверта);
	
	Попытка
		HTTPОтвет = ОписаниеСервисаИПП.СоединениеПорта.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ТекстИсключения = НСтр("ru='Ошибка сетевого соединения при отправке запроса.';uk=""Помилка мережевого з'єднання при відправці запиту.""")
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Возврат ТелоОтвета;
	
КонецФункции

// Чтение объекта или значения в ответном SOAP-конверте в
// соответствии с фабрикой типов XDTO веб-сервиса.
//
// Параметры:
//	ТелоОтвета - Строка - телов SOAP-конверта-ответа;
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//	ТипЗначения - ТипЗначенияXDTO, ТипОбъектаXDTO - тип читаемого значения;
//
// Возвращаемое значение:
//	ЗначениеXDTO, ОбъектXDTO - прочитанный ответ сервиса.
//
Функция ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаИПП, ТипЗначения)
	
	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	Попытка
		
		// Переход к телу ответа
		Пока ЧтениеОтвета.Имя <> "soap:Body" Цикл
			ЧтениеОтвета.Прочитать();
		КонецЦикла;
		
		// Переход к описанию объекта ответа
		ЧтениеОтвета.Прочитать();
		
	Исключение
		
		ТекстИсключения = НСтр("ru='Ошибка чтения ответа SOAP: ';uk='Помилка читання відповіді SOAP: '")
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ Символы.ПС
			+ НСтр("ru='Тело ответа:';uk='Тіло відповіді:'")
			+ Символы.ПС
			+ ТелоОтвета;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента
		И ВРег(ЧтениеОтвета.Имя) = "SOAP:FAULT" Тогда
		// Это исключение веб-сервиса
		Попытка
			ДеталиИсключения = ПрочитатьОписаниеИсключенияСервиса(ЧтениеОтвета);
		Исключение
			
			ТекстИсключения = НСтр("ru='Ошибка чтения ответа SOAP: ';uk='Помилка читання відповіді SOAP: '")
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				+ Символы.ПС
				+ НСтр("ru='Тело ответа:';uk='Тіло відповіді:'")
				+ Символы.ПС
				+ ТелоОтвета;
			
			ВызватьИсключение ТекстИсключения;
			
		КонецПопытки;
		
		ТекстИсключения = НСтр("ru='Ошибка SOAP-Сервера при обработке запроса: ';uk='Помилка SOAP-Сервера при обробці запиту: '")
			+ ОписаниеИсключенияSOAPВСтроку(ДеталиИсключения);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Попытка
		Значение = ОписаниеСервисаИПП.ФабрикаXDTO.ПрочитатьXML(ЧтениеОтвета, ТипЗначения);
	Исключение
		
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка чтения объекта (%1) в конверте SOAP: ';uk=""Помилка читання об'єкта (%1) у конверті SOAP: """),
				"%1",
				Строка(ТипЗначения))
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ Символы.ПС
			+ НСтр("ru='Тело ответа:';uk='Тіло відповіді:'")
			+ Символы.ПС
			+ ТелоОтвета;
			
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

// Если в ответном SOAP-конверте содержится описание ошибки,
// то выполняется чтение описания ошибки.
//
// Параметры:
//	ЧтениеОтвета - ЧтениеXML - объект, используемый для чтения
//		ответного SOAP-конверта. На момент вызова спозиционирован на описании
//		исключения SOAP;
//
// Возвращаемое значение:
// Структура - описание исключения SOAP-сервера:
//	* FaultCode - Строка - код ошибки;
//	* FaultString - Строка - строковое описание ошибки;
//	* FaultActor - Строка - источник ошибки;
//
Функция ПрочитатьОписаниеИсключенияСервиса(ЧтениеОтвета)
	
	ОписаниеИсключения = Новый Структура("FaultCode, FaultString, FaultActor", "", "", "");
	
	Пока НЕ (ВРег(ЧтениеОтвета.Имя) = "SOAP:BODY" И ЧтениеОтвета.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
		
		Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяУзлаВРег = ВРег(ЧтениеОтвета.Имя);
			
			Если ИмяУзлаВРег = "FAULTCODE"
				ИЛИ ИмяУзлаВРег = "FAULTSTRING"
				ИЛИ ИмяУзлаВРег = "FAULTACTOR" Тогда
				
				ЧтениеОтвета.Прочитать(); // Прочитать текст узла
				
				Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.Текст Тогда
					ОписаниеИсключения[ИмяУзлаВРег] = ЧтениеОтвета.Значение;
				КонецЕсли;
				
				ЧтениеОтвета.Прочитать(); // Прочитать конец элемента
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЧтениеОтвета.Прочитать() Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОписаниеИсключения;
	
КонецФункции

// Преобразование структуры-описателя исключения SOAP
// в строку для пользовательского представления;
//
// Параметры:
//	ИсключениеSOAP - Структура - см. ПрочитатьОписаниеИсключенияСервиса();
//
// Возвращаемое значение:
//	Строка - пользовательское представление исключения SOAP;
//
Функция ОписаниеИсключенияSOAPВСтроку(ИсключениеSOAP)
	
	Результат = "";
	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultCode) Тогда
		Результат = ИсключениеSOAP.FaultCode;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultString) Тогда
		Результат = Результат
			+ ?(ПустаяСтрока(Результат), "", " - ")
			+ ИсключениеSOAP.FaultString;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultActor) Тогда
		Результат = Результат + ?(ПустаяСтрока(Результат), "", Символы.ПС + НСтр("ru='Источник ошибки: ';uk='Джерело помилки: '"))
			+ ИсключениеSOAP.FaultActor;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// При использовании версии платформы 1С:Предприятия версии ниже
// 8.3.3.714 дублируется символ Символы.ВК
// в теле HTTP-запроса при использовании метода
// HTTPЗапрос.УстановитьТелоИзСтроки().
//
// Параметры:
//	ВерсияПриложения - Строка - версия приложения 1С:Предприятия;
//
// Возвращаемое значение:
//	Булево - Истина, если символ Символы.ВК дублируется в теле запроса;
//
Функция ДублированиеВКВТелеЗапроса(ВерсияПриложения = Неопределено) Экспорт
	
	Если ВерсияПриложения = Неопределено Тогда
		СисИнфо = Новый СистемнаяИнформация;
		ВерсияПриложения = СисИнфо.ВерсияПриложения;
	КонецЕсли;
	
	Возврат (СравнитьВерсии(ВерсияПриложения, "8.3.3.715") = -1);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общего назначения для работы с Интернет

// Формирует объект ИнтернетПрокси по передаваемым параметрам прокси-сервера.
//
// Параметры:
// НастройкаПроксиСервера - Соответствие - параметры прокси-сервера:
//	* ИспользоватьПрокси - Булево - использовать ли прокси-сервер;
//	* НеИспользоватьПроксиДляЛокальныхАдресов - Булево - использовать
//			прокси-сервер для локальных адресов;
//	* ИспользоватьСистемныеНастройки - Булево - использовать системные
//			настройки прокси-сервера;
//	* Сервер - Строка - адрес прокси-сервера;
//	* Порт - Число - порт прокси-сервера;
//	* Пользователь - Строка - имя пользователя для прокси-сервере;
//	* Пароль - Строка - пароль пользователя;
//	* Протокол - Строка - протокол, для которого необходимо сформировать прокси;
//
// Возвращаемое значение:
//	ИнтернетПрокси - сформированный объект ИнтернетПрокси;
//
Функция СформироватьПрокси(НастройкаПроксиСервера, Знач Протокол)
	
	Протокол = НРег(СокрЛП(Протокол));
	Если ПустаяСтрока(Протокол) Тогда
		Протокол = "http";
	КонецЕсли;
	
	Если НастройкаПроксиСервера = Неопределено Тогда
		// Системные установки прокси-сервера
		Прокси = Новый ИнтернетПрокси(Ложь);
	Иначе
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		Если ИспользоватьПрокси <> Истина Тогда
			// Не использовать прокси-сервер
			Прокси = Новый ИнтернетПрокси(Ложь);
		Иначе
			Если ИспользоватьСистемныеНастройки Тогда
				// Системные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
				
				ПроксиПоПротоколу = Неопределено;
				
				// Установка прокси по конкретным протоколам, если настройки заданы
				ДополнительныеНастройки = НастройкаПроксиСервера.Получить("ДополнительныеНастройкиПрокси");
				Если ДополнительныеНастройки <> Неопределено Тогда
					ПроксиПоПротоколу = ДополнительныеНастройки[Протокол];
				КонецЕсли;
				
				Если ПроксиПоПротоколу = Неопределено Тогда
					
					СерверПоУмолчанию = НастройкаПроксиСервера["Сервер"];
					ПортПоУмолчанию   = НастройкаПроксиСервера["Порт"];
					
					Если ЗначениеЗаполнено(СерверПоУмолчанию) Тогда
						// Установка прокси по умолчанию
						ПроксиПоПротоколу = Новый Структура("Адрес,Порт", СерверПоУмолчанию, ПортПоУмолчанию);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПроксиПоПротоколу = Неопределено Тогда
					Возврат Новый ИнтернетПрокси(Ложь);
				КонецЕсли;
				
				// Настройки прокси-сервера, заданные вручную
				Прокси = Новый ИнтернетПрокси;
				Прокси.Установить(Протокол, ПроксиПоПротоколу.Адрес, ПроксиПоПротоколу.Порт);
				
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
				Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
				Прокси.Пароль       = НастройкаПроксиСервера["Пароль"];
				
				АдресаИсключений = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляАдресов");
				Если ТипЗнч(АдресаИсключений) = Тип("Массив") Тогда
					Для каждого АдресИсключения Из АдресаИсключений Цикл
						Прокси.НеИспользоватьПроксиДляАдресов.Добавить(АдресИсключения);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//    
//     <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>
//               \______________/ \___________/
//                      |               |
//           	   авторизация     имя сервера
//               \____________________________/ \________________________/
//                              |                            |
//                       строка соединения            путь на сервере
//
// Возвращаемое значение:
//  Структура:
//             Схема         - Строка;
//             Логин         - Строка; 
//             Пароль        - Строка;
//             ИмяСервера    - Строка;
//             Хост          - Строка; 
//             Порт          - Строка; 
//             ПутьНаСервере - Строка;
//
Функция СтруктураURI(Знач СтрокаURI)
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", Порт);
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Раскладывает URL веб-документа на необходимые параметры.
// Параметры:
//	URL (Строка) - URL веб-документа;
//
// Возвращаемое значение:
//	Структура со свойствами-значениями;
//
Функция НовыйПараметрыПолученияДокумента(URL)
	
	Результат    = Новый Структура;
	СтруктураURL = СтруктураURI(URL);
	
	Результат.Вставить("Сервер", СтруктураURL.Хост);
	Результат.Вставить("Путь"  , СтруктураURL.ПутьНаСервере);
	
	Если ПустаяСтрока(СтруктураURL.Схема) Тогда
		Результат.Вставить("БезопасноеСоединение", Ложь);
	Иначе
		Результат.Вставить("БезопасноеСоединение", (ВРег(СтруктураURL.Схема) = "HTTPS"));
	КонецЕсли;
	
	Если ПустаяСтрока(СтруктураURL.Порт) Тогда
		Результат.Вставить("Порт", ?(Результат.БезопасноеСоединение, 443, 80));
	Иначе
		Результат.Вставить("Порт", Число(СтруктураURL.Порт));
	КонецЕсли;
	
	Результат.Вставить("ИмяПользователя",
		?(ПустаяСтрока(СтруктураURL.Логин),
			Неопределено,
			СтруктураURL.Логин));
	
	Результат.Вставить("Пароль",
		?(ПустаяСтрока(СтруктураURL.Пароль),
			Неопределено,
			СтруктураURL.Пароль));
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для преобразования команд сервиса во внутренние структуры

// Преобразует ответ операции process() сервиса ИПП в последовательность команд
// во внутреннем представлении.
//
// Параметры:
// ОсновныеПараметры - Структура - основные параметры контекста взаимодействия;
// ОтветСервера - ОбъектXDTO - ответ сервиса, возвращенный операцией process();
// КонтекстОбработчика - - Структура - контекст клиент-серверного обработчика
//		команд (см. функцию НовыйКонтекстОбработчикаКоманд());
//
// Возвращаемое значение:
//	Массив - массив команд сервиса во внутреннем представлении.
//
Функция СтруктурироватьОтветСервера(
	ОсновныеПараметры,
	ОтветСервера,
	КонтекстОбработчика) Экспорт
	
	МассивОтвета = Новый Массив;
	
	Попытка
		
		Для каждого КомандаСервера Из ОтветСервера.command Цикл
			
			СтруктураКоманды = Неопределено;
			
			ИмяТекКоманды = НРег(СокрЛП(КомандаСервера.name));
			
			Если ИмяТекКоманды = "ui.open" Тогда
				СтруктураКоманды = СтруктурироватьОткрытиеФормы(
					ОсновныеПараметры,
					КомандаСервера);
					
			ИначеЕсли ИмяТекКоманды = "store.put" Тогда
				СтруктураКоманды = СтруктурироватьЗаписьПараметров(
					ОсновныеПараметры,
					КомандаСервера);
			
			ИначеЕсли ИмяТекКоманды = "check.updatehash" Тогда
				СтруктураКоманды = СтруктурироватьПроверкуХэшаОбновления(КомандаСервера);
				
			ИначеЕсли ИмяТекКоманды = "store.get" Тогда
				СтруктураКоманды = СтруктурироватьЧтениеПараметров(КомандаСервера);
				
			ИначеЕсли ИмяТекКоманды = "store.delete" Тогда
				СтруктураКоманды = СтруктурироватьУдалениеПараметров(КомандаСервера);
				
			ИначеЕсли ИмяТекКоманды = "ui.close" Тогда
				СтруктураКоманды = СтруктурироватьЗакрытиеФормы(
				ОсновныеПараметры,
				КомандаСервера);
				
			ИначеЕсли ИмяТекКоманды = "status.set" Тогда
				СтруктураКоманды = СтруктурироватьУстановкуСтатусаИПП(КомандаСервера);
				
			ИначеЕсли ИмяТекКоманды = "system.halt" Тогда
				СтруктураКоманды = СтруктурироватьОстановкуМеханизма(КомандаСервера);
				
			ИначеЕсли ИмяТекКоманды = "launchservice" Тогда
				СтруктураКоманды = СтруктурироватьОтветСервераОПереходеБизнеспроцесса(КомандаСервера);
				
			ИначеЕсли ИмяТекКоманды = "performtheaction" Тогда
				ДобавитьКомандыВыполненияЗаданногоДействия(
					ОсновныеПараметры,
					КонтекстОбработчика,
					МассивОтвета,
					КомандаСервера);
					
			ИначеЕсли ИмяТекКоманды = "setcodesregion" Тогда
				СтруктураКоманды = СтруктурироватьЗаписьПараметров(
					ОсновныеПараметры,
					КомандаСервера);
				
			ИначеЕсли ИмяТекКоманды = "message.show" ИЛИ ИмяТекКоманды = "question.show" Тогда
				СтруктураКоманды = СтруктурироватьСообщениеИлиВопросПользователю(КомандаСервера);
				
			ИначеЕсли ИмяТекКоманды = "input.field" Тогда
				СтруктураКоманды = СтруктурироватьВводДанных(КомандаСервера);
				
			ИначеЕсли ИмяТекКоманды = "store.putorganizations" Тогда
				СтруктураКоманды = СтруктурироватьЗаписьОрганизацийПользователя(КомандаСервера);
				
			ИначеЕсли ИмяТекКоманды = "store.putadressclassifier" Тогда
				СтруктураКоманды = СтруктурироватьЗаписьАдресногоКлассификатора(КомандаСервера);
			
			КонецЕсли;
			
			Если СтруктураКоманды <> Неопределено Тогда
				СтруктураКоманды.Вставить("ИмяКоманды", ИмяТекКоманды);
				МассивОтвета.Добавить(СтруктураКоманды);
			КонецЕсли;
			
			Если КонтекстОбработчика.ПроизошлаОшибка Тогда
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
		
		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru='Неизвестная ошибка. См. подробности в журнале регистрации.';uk='Невідома помилка. См. подробиці в журналі реєстрації.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Если МассивОтвета.Количество() > 0 Тогда
		
		Для каждого СтруктураКоманды Из МассивОтвета Цикл
			СтруктураКоманды.ИмяКоманды = НРег(СокрЛП(СтруктураКоманды.ИмяКоманды));
		КонецЦикла;
		
		Возврат МассивОтвета;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Преобразование команд "Сообщение пользователю" и "Вопрос пользователю" во
// внутреннее представление.
//
Функция СтруктурироватьСообщениеИлиВопросПользователю(КомандаСервера) Экспорт
	
	СтруктураКоманды = Новый Структура;
	
	СписокКнопок = Новый СписокЗначений;
	ОписаниеТекКнопкиОтвета = Новый Структура;
	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл
		
		ИмяТекПараметра = НРег(СокрЛП(Параметр.name));
		
		Если ИмяТекПараметра = "caption" Тогда
			СтруктураКоманды.Вставить("Заголовок", Строка(Параметр.value));
			
		ИначеЕсли ИмяТекПараметра = "formmessage"
			ИЛИ ИмяТекПараметра = "messagetext" Тогда
			СтруктураКоманды.Вставить("ТекстСообщения", Строка(Параметр.value));
			
		ИначеЕсли ИмяТекПараметра = "messagetype" ИЛИ ИмяТекПараметра = "questiontype" Тогда
			СтруктураКоманды.Вставить("Тип", НРег(СокрЛП(Строка(Параметр.value))));
			
		ИначеЕсли ИмяТекПараметра = "button" Тогда
			СписокКнопок.Добавить(НРег(СокрЛП(Строка(Параметр.value))));
			
		ИначеЕсли ИмяТекПараметра = "buttonvalue" Тогда
			ОписаниеТекКнопкиОтвета.Вставить("ЗначениеКнопки", Строка(Параметр.value));
			
		ИначеЕсли ИмяТекПараметра = "buttontext" Тогда
			ОписаниеТекКнопкиОтвета.Вставить("ТекстКнопки", Строка(Параметр.value));
			
		КонецЕсли;
		
		Если ОписаниеТекКнопкиОтвета.Свойство("ЗначениеКнопки")
			И ОписаниеТекКнопкиОтвета.Свойство("ТекстКнопки") Тогда
			// Если получено описание очередной кнопки, тогда добавить ее в список кнопок
			СписокКнопок.Добавить(
				ОписаниеТекКнопкиОтвета.ЗначениеКнопки,
				ОписаниеТекКнопкиОтвета.ТекстКнопки);
			ОписаниеТекКнопкиОтвета = новый Структура;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ СтруктураКоманды.Свойство("Заголовок") ИЛИ ПустаяСтрока(СтруктураКоманды.Заголовок) Тогда
		СтруктураКоманды.Вставить("Заголовок", НСтр("ru='Интернет-поддержка пользователей';uk='Інтернет-підтримка користувачів'"));
	КонецЕсли;
	
	Если СписокКнопок.Количество() > 0 Тогда
		СтруктураКоманды.Вставить("Кнопки", СписокКнопок);
	КонецЕсли;
	
	Возврат СтруктураКоманды;
	
КонецФункции

// Преобразование команды "Ввод данных" во внутреннее представление.
//
Функция СтруктурироватьВводДанных(КомандаСервера) Экспорт
	
	СтруктураКоманды = Новый Структура;
	
	Если КомандаСервера.parameters = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл
		
		ИмяТекПараметра = НРег(СокрЛП(Параметр.name));
		
		Если ИмяТекПараметра = "caption" Тогда
			ПараметрыФормы.Вставить("ТекстЗаголовка", Строка(Параметр.value));
			
		ИначеЕсли ИмяТекПараметра = "explanationtext" Тогда
			ПараметрыФормы.Вставить("ПоясняющийТекст", Строка(Параметр.value));
			
		ИначеЕсли ИмяТекПараметра = "datatype" Тогда
			ПараметрыФормы.Вставить("ТипДанных", Строка(Параметр.value));
			
		ИначеЕсли ИмяТекПараметра = "precision" Тогда
			ПараметрыФормы.Вставить("ТочностьЧисла", Строка(Параметр.value));
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураКоманды.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат СтруктураКоманды;
	
КонецФункции

// Преобразование команды "performtheaction" во внутреннее представление.
//
Процедура ДобавитьКомандыВыполненияЗаданногоДействия(
	СтруктураПараметровСтартовойФормы,
	КонтекстОбработчика,
	МассивОтвета,
	КомандаСервера) Экспорт
	
	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл
		
		ИмяПараметра = НРег(СокрЛП(Параметр.name));
		Если ИмяПараметра = "action" Тогда
			
			СтруктураКоманды = Новый Структура("ИмяКоманды", "performtheaction." + НРег(СокрЛП(Параметр.value)));
			МассивОтвета.Добавить(СтруктураКоманды);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Преобразование команды "Записать параметры" во внутреннее представление.
//
Функция СтруктурироватьЗаписьПараметров(СтруктураПараметровСтартовойФормы, КомандаСервера) Экспорт
	
	СтруктураКоманды = Новый Структура;
	
	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	
	Для каждого Параметр из КомандаСервера.parameters.parameter Цикл
		СтруктураПараметра = Новый Структура("Имя, БизнесПроцесс, Значение, ОбластьВидимости",
												СокрЛП(Параметр.name),
												СокрЛП(Параметр.bp),
												СокрЛП(Параметр.value),
												СокрЛП(Параметр.type));
		
		МассивПараметров.Добавить(СтруктураПараметра);
	КонецЦикла;
	
	СтруктураКоманды.Вставить("Параметры" , МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);
	
	Возврат СтруктураКоманды;
	
КонецФункции

// Преобразование команды "Проверить хэш обновления информационного окна" во
// внутреннее представление.
//
Функция СтруктурироватьПроверкуХэшаОбновления(КомандаСервера) Экспорт
	
	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураКоманды = Новый Структура;
	СтруктураКоманды.Вставить("ИмяКоманды"   , "check.updatehash");
	СтруктураКоманды.Вставить("ХэшОбновления", КомандаСервера.parameters.parameter[0].value);
	
	Возврат СтруктураКоманды;
	
КонецФункции

// Преобразование команды "Прочитать параметры" во внутреннее представление.
//
Функция СтруктурироватьЧтениеПараметров(КомандаСервера) Экспорт
	
	СтруктураКоманды = Новый Структура;
	
	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	
	Для каждого Параметр из КомандаСервера.parameters.parameter Цикл
		
		Если НРег(СокрЛП(Параметр.type)) = "startup" Тогда
			СтруктураПараметра = Новый Структура("Имя, ОбластьВидимости",
				СокрЛП(Параметр.name),
				СокрЛП(Параметр.type));
		Иначе
			СтруктураПараметра = Новый Структура("Имя, БизнесПроцесс, ОбластьВидимости",
				СокрЛП(Параметр.name),
				СокрЛП(Параметр.bp),
				СокрЛП(Параметр.type));
		КонецЕсли;
		
		МассивПараметров.Добавить(СтруктураПараметра);
		
	КонецЦикла;
	
	СтруктураКоманды.Вставить("Параметры", 	МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);
	
	Возврат СтруктураКоманды;
	
КонецФункции

// Преобразование команды "Удалить параметры" во внутреннее представление.
//
Функция СтруктурироватьУдалениеПараметров(КомандаСервера) Экспорт
	
	СтруктураКоманды = Новый Структура;
	
	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	
	Для каждого Параметр из КомандаСервера.parameters.parameter Цикл
	
		СтруктураПараметра = Новый Структура("Имя, ОбластьВидимости",
			СокрЛП(Параметр.name),
			СокрЛП(Параметр.type));
		
		МассивПараметров.Добавить(СтруктураПараметра);
		
	КонецЦикла;
	
	СтруктураКоманды.Вставить("Параметры" , МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);
	
	Возврат СтруктураКоманды;
	
КонецФункции

// Преобразование команды "Установить статус" во внутреннее представление.
//
Функция СтруктурироватьУстановкуСтатусаИПП(КомандаСервера) Экспорт
	
	СтруктураКоманды = Новый Структура;
	
	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Параметр из КомандаСервера.parameters.parameter Цикл
		
		Если НРег(СокрЛП(Параметр.name)) = "color" Тогда
			СтруктураКоманды.Вставить("Цвет", СокрЛП(Параметр.value));
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);
	
	Возврат СтруктураКоманды;
	
КонецФункции

// Преобразование команды "Открыть форму" во внутреннее представление.
//
Функция СтруктурироватьОткрытиеФормы(СтруктураПараметровСтартовойФормы, КомандаСервера) Экспорт
	
	СтруктураКоманды = Новый Структура;
	
	Для каждого Параметр из КомандаСервера.parameters.parameter Цикл 
		
		Если НРег(СокрЛП(Параметр.name)) = "indexform" Тогда
			ПараметрыФормы = ПараметрыВнутреннейФормы(
				СтруктураПараметровСтартовойФормы,
				СокрЛП(Параметр.value));
			
			Если ПараметрыФормы.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			СтруктураКоманды.Вставить("ПараметрыФормы", ПараметрыФормы);
		КонецЕсли;
		
		Если НРег(СокрЛП(Параметр.name)) = "caption" Тогда
			СтруктураКоманды.Вставить("Заголовок", СокрЛП(Параметр.value));
		КонецЕсли;
		
		Если НРег(СокрЛП(Параметр.name)) = "text" Тогда
			СтруктураКоманды.Вставить("Текст", СокрЛП(Параметр.value));
		КонецЕсли;
		
		Если НРег(СокрЛП(Параметр.name)) = "formmessage" Тогда
			СтруктураКоманды.Вставить("Текст", СокрЛП(Параметр.value));
		КонецЕсли;
		
		Если НРег(СокрЛП(Параметр.name)) = "url" Тогда
			СтруктураКоманды.Вставить("УРЛ", СокрЛП(Параметр.value));
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураКоманды.Количество() > 0 Тогда
		СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name); 
		Возврат СтруктураКоманды;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Преобразование команды "Закрыть форму" во внутреннее представление.
//
Функция СтруктурироватьЗакрытиеФормы(СтруктураПараметровСтартовойФормы, КомандаСервера) Экспорт
	
	СтруктураКоманды = Новый Структура;
	
	Для каждого Параметр из КомандаСервера.parameters.parameter Цикл 
		
		Если НРег(СокрЛП(Параметр.name)) = "indexform" Тогда
			ПараметрыФормы = ПараметрыВнутреннейФормы(СтруктураПараметровСтартовойФормы, СокрЛП(Параметр.value));
			
			Если ПараметрыФормы.Количество() = 0 Тогда 
				Возврат Неопределено;
			КонецЕсли;
			
			СтруктураКоманды.Вставить("ПараметрыФормы", ПараметрыФормы);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураКоманды.Количество() > 0 Тогда 
		СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);
		Возврат СтруктураКоманды;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Вспомогательная функция для формирования параметров внутренней формы при
// выполнении команды "Открыть внутреннюю форму" и "Закрыть внутреннюю форму".
//
Функция ПараметрыВнутреннейФормы(СтруктураПараметровСтартовойФормы, ИндексФормы) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	Если ИндексФормы = "1" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ОбщаяАвторизация");
		
	ИначеЕсли ИндексФормы = "2" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ОбщаяРегНомер");
		
	ИначеЕсли ИндексФормы = "4" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ПинКод");
		
	ИначеЕсли ИндексФормы = "7" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "РегистрационныеДанные");
		
	ИначеЕсли ИндексФормы = "9" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ОбращениеКАдминистратору");
		
	ИначеЕсли ИндексФормы = "13" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ВосстановлениеПароля");
		
	ИначеЕсли ИндексФормы = "17" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "РегистрацияПрограммногоПродукта");
		
	ИначеЕсли ИндексФормы = "18" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "РегистрацияНовогоПользователя");
		
	ИначеЕсли ИндексФормы = "19" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ДополнительнаяИнформация");
		
	ИначеЕсли ИндексФормы = "-1" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "Стартовая");
		
	ИначеЕсли ИндексФормы = "100" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "Последняя");
		
	ИначеЕсли ИндексФормы = "c20" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ДействиеНеПоддерживается");
		
	ИначеЕсли ИндексФормы = "bh1" Тогда
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Интернет-поддержка пользователей';uk='Інтернет-підтримка користувачів'"));
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ВсплывающаяПодсказка");
		
	ИначеЕсли ИндексФормы = "f2" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ИнтернетПоддержкаПродуктаНеОказывается");
		
	ИначеЕсли ИндексФормы = "f3" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ОтправкаЭлектронногоПисьма");
		
	ИначеЕсли ИндексФормы = "f4" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ОбщаяАвторизация");
		
	ИначеЕсли ИндексФормы = "f5" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ВосстановлениеПароля");
		
	ИначеЕсли ИндексФормы = "f6" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ОбщаяРегНомер");
		
	ИначеЕсли ИндексФормы = "f7" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ОбщаяПинкод");
		
	ИначеЕсли ИндексФормы = "f8" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "РегистрацияПрограммногоПродукта");
		
	ИначеЕсли ИндексФормы = "f9" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "РегистрацияНовогоПользователя");
		
	ИначеЕсли ИндексФормы = "f10" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ДополнительнаяИнформация");
		
	ИначеЕсли ИндексФормы = "f11" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "АвторизацияУпрощенная");
		
		
	Иначе
		
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", Неопределено);
		
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Преобразование команды "Остановить механизм" во внутреннее представление.
//
Функция СтруктурироватьОстановкуМеханизма(КомандаСервера) Экспорт
	
	СтруктураКоманды = Новый Структура;
	
	МассивПараметров = Новый Массив;
	Попытка
		
		Если КомандаСервера.parameters <> Неопределено
			И КомандаСервера.parameters.parameter.Количество() > 0 Тогда
			
			Для каждого Параметр из КомандаСервера.parameters.parameter Цикл 
				
				СтруктураПараметра = Неопределено;
				
				Если НРег(СокрЛП(Параметр.name)) = "errorcode" Тогда 
					СтруктураПараметра = Новый Структура("errorCode", СокрЛП(Параметр.value));
					МассивПараметров.Добавить(СтруктураПараметра);
				КонецЕсли;
				
				Если СтруктураПараметра <> Неопределено Тогда
					МассивПараметров.Добавить(СтруктураПараметра);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	СтруктураКоманды.Вставить("Параметры" , МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);
	
	Возврат СтруктураКоманды;
	
КонецФункции

// Преобразование команды "Изменить бизнес-процесс" во внутреннее представление.
//
Функция СтруктурироватьОтветСервераОПереходеБизнеспроцесса(КомандаСервера) Экспорт
	
	СтруктураКоманды = Новый Структура;
	
	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	
	Для каждого Параметр из КомандаСервера.parameters.parameter Цикл
		
		СтруктураПараметра = Новый Структура(Параметр.name, Параметр.value);
		МассивПараметров.Добавить(СтруктураПараметра);
		
	КонецЦикла;
	
	СтруктураКоманды.Вставить("Параметры" , МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name); 
	
	Возврат СтруктураКоманды;
	
КонецФункции

// Преобразование команды "Записать адресный классификатор" во
// внутреннее представление.
//
Функция СтруктурироватьЗаписьАдресногоКлассификатора(КомандаСервера) Экспорт
	
	Если КомандаСервера.parameters = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураКоманды = Новый Структура;
	
	СписокСтран  = Новый СписокЗначений;
	РегионыСтран = Новый Соответствие;
	
	ПараметрыКоманды = КомандаСервера.parameters.parameter;
	
	Если ПараметрыКоманды.Количество() > 0 Тогда
		ПараметрыСписокСтран = ПараметрыКоманды[0].parameters.parameter;
	Иначе
		ПараметрыСписокСтран = Неопределено;
	КонецЕсли;
	
	Если ПараметрыСписокСтран <> Неопределено Тогда
		
		Для каждого Параметр Из ПараметрыСписокСтран Цикл
			
			ИмяТекПараметра = НРег(СокрЛП(Параметр.name));
			Если ИмяТекПараметра = "country" Тогда
				
				НазваниеСтраны       = Строка(Параметр.value);
				ВложенныеПараметры   = Параметр.parameters.parameter;
				ИдентификаторСтраны  = Неопределено;
				СписокРегионовСтраны = Новый СписокЗначений;
				
				Если ВложенныеПараметры = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Для каждого ВложенныйПараметр Из ВложенныеПараметры Цикл
					
					ИмяТекВлПараметра = НРег(СокрЛП(ВложенныйПараметр.name));
					Если ИмяТекВлПараметра = "id" Тогда
						
						ИдентификаторСтраны = Строка(ВложенныйПараметр.value);
						
					ИначеЕсли ИмяТекВлПараметра = "region" Тогда
						
						НазваниеРегиона            = Строка(ВложенныйПараметр.value);
						ВложенныеПараметрыРегионов = ВложенныйПараметр.parameters.parameter;
						ИдентификаторРегиона       = Неопределено;
						
						Если ВложенныеПараметрыРегионов = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Для каждого ВлПараметрРегиона Из ВложенныеПараметрыРегионов Цикл
							ИмяТекВлПараметраРегиона = НРег(СокрЛП(ВлПараметрРегиона.name));
							Если ИмяТекВлПараметраРегиона = "id" Тогда
								ИдентификаторРегиона = Строка(ВлПараметрРегиона.value);
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ИдентификаторРегиона <> Неопределено Тогда
							СписокРегионовСтраны.Добавить(ИдентификаторРегиона, НазваниеРегиона);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ИдентификаторСтраны <> Неопределено Тогда
					СписокСтран.Добавить(ИдентификаторСтраны, НазваниеСтраны);
					СписокРегионовСтраны.Вставить(0, "-1", НСтр("ru='<не выбран>';uk='<не вибрано>'"));
					РегионыСтран[ИдентификаторСтраны] = СписокРегионовСтраны;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокСтран.Вставить(0, "-1", НСтр("ru='<не выбрана>';uk='<не вказано>'"));
	
	СтруктураКоманды.Вставить("Страны"      , СписокСтран);
	СтруктураКоманды.Вставить("РегионыСтран", РегионыСтран);
	
	Возврат СтруктураКоманды;
	
КонецФункции

// Преобразование команды "Записать данные организаций" во внутреннее
// представление.
//
Функция СтруктурироватьЗаписьОрганизацийПользователя(КомандаСервера) Экспорт
	
	Если КомандаСервера.parameters = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураКоманды = Новый Структура;
	
	СписокОрганизаций = Новый СписокЗначений;
	ДанныеОрганизаций = Новый Соответствие;
	ПараметрыКоманды  = КомандаСервера.parameters.parameter;
	
	ПараметрыСписокОрганизаций = Неопределено;
	Если ПараметрыКоманды.Количество() > 0 Тогда
		ВложенныеПараметрыОбъект = ПараметрыКоманды[0].parameters;
		Если ВложенныеПараметрыОбъект <> Неопределено Тогда
			ПараметрыСписокОрганизаций = ВложенныеПараметрыОбъект.parameter;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыСписокОрганизаций <> Неопределено Тогда
		
		Для каждого Параметр Из ПараметрыСписокОрганизаций Цикл
			
			ИмяТекПараметра = НРег(СокрЛП(Параметр.name));
			Если ИмяТекПараметра = "organization" Тогда
				
				НазваниеОрганизации      = Строка(Параметр.value);
				ИдентификаторОрганизации = Неопределено;
				ДанныеТекОрганизации     = Новый Структура;
				
				Если Параметр.parameters = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ВложенныеПараметры = Параметр.parameters.parameter;
				
				Для каждого ВложенныйПараметр Из ВложенныеПараметры Цикл
					
					ИмяТекВлПараметра = НРег(СокрЛП(ВложенныйПараметр.name));
					Если ИмяТекВлПараметра = "id" Тогда
						ИдентификаторОрганизации = Строка(ВложенныйПараметр.value);
					Иначе
						ДанныеТекОрганизации.Вставить(ИмяТекВлПараметра, Строка(ВложенныйПараметр.value));
					КонецЕсли;
					
				КонецЦикла;
				
				Если ИдентификаторОрганизации <> Неопределено Тогда
					СписокОрганизаций.Добавить(ИдентификаторОрганизации, НазваниеОрганизации);
					ДанныеТекОрганизации.Вставить("НазваниеОрганизации", НазваниеОрганизации);
					ДанныеОрганизаций[ИдентификаторОрганизации] = ДанныеТекОрганизации;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокОрганизаций.Вставить(0, "-1", НСтр("ru='<добавить новую организацию>';uk='<додати нову організацію>'"));
	
	СтруктураКоманды.Вставить("СписокОрганизаций", СписокОрганизаций);
	СтруктураКоманды.Вставить("ДанныеОрганизаций", ДанныеОрганизаций);
	
	Возврат СтруктураКоманды;
	
КонецФункции

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для обработки команд сервиса

// Выполнение команды "Записать параметры".
//
Процедура ВыполнениеКомандыЗаписьПараметров(КСКонтекст, СтруктураКоманды, КонтекстОбработчика) Экспорт
	
	Если ТипЗнч(СтруктураКоманды) = Тип("Структура") Тогда
		ЗаписываемыеПараметры = СтруктураКоманды.Параметры;
	Иначе
		ЗаписываемыеПараметры = СтруктураКоманды;
	КонецЕсли;
	
	ОбщиеСтартовыеПараметры = Новый Соответствие; // Параметры, записываемые в РС
	Для каждого Параметр Из ЗаписываемыеПараметры Цикл
		
		// Сохранение параметров как сессионных
		ЗаписатьПараметрКонтекста(
			КСКонтекст,
			Параметр.Имя,
			Параметр.Значение,
			Параметр.ОбластьВидимости,
			ОбщиеСтартовыеПараметры);
		
	КонецЦикла;
	
	Если ОбщиеСтартовыеПараметры.Количество() > 0 Тогда
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОбщиеСтартовыеПараметрыВРСИПП(ОбщиеСтартовыеПараметры);
		ЛогинАвторизованногоПользователя = ОбщиеСтартовыеПараметры.Получить("login");
		Если ЛогинАвторизованногоПользователя <> Неопределено Тогда
			КонтекстОбработчика.ДопСвойства.Вставить("ИзмененЛогинПользователя",
				ЛогинАвторизованногоПользователя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполнение команды "Прочитать параметры". Выполняется чтение параметров
// и отправка их сервису посредством вызова метода process().
//
Процедура ВыполнениеКомандыПрочитатьПараметры(
	КонтекстВзаимодействия,
	СтруктураКоманды,
	КонтекстОбработчика,
	ВыполнениеНаСервере) Экспорт
	
	МассивПараметров = СтруктураКоманды.Параметры;
	ПараметрыЗапроса = Новый Массив;
	
	КСКонтекст        = КонтекстВзаимодействия.КСКонтекст;
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	Для каждого Параметр Из МассивПараметров Цикл
		
		Если Параметр.Имя = "session_id" Тогда
			НомерСессииУжеЕсть = Истина;
		КонецЕсли;
		
		ЗначениеПараметра = ЗначениеСессионногоПараметра(КСКонтекст, Параметр.Имя);
		
		ПередаваемыйПапаметр = Новый Структура("Имя, Значение, БизнесПроцесс, ОбластьВидимости",
			Параметр.Имя,
			ЗначениеПараметра,
			ОсновныеПараметры.ИмяWSОпределения,
			Параметр.ОбластьВидимости);
		
		ПараметрыЗапроса.Добавить(ПередаваемыйПапаметр);
		
	КонецЦикла;
	
	ДобавитьСессионныеПараметрыКЗапросу(КСКонтекст, , ПараметрыЗапроса);
	
	Если ВыполнениеНаСервере Тогда
		ИнтернетПоддержкаПользователейВызовСервера.ДобавитьКомандыСервиса(
			ОсновныеПараметры,
			ПараметрыЗапроса,
			КонтекстОбработчика);
	Иначе
		#Если Клиент Тогда
		// Обратиться к веб-сервису за командами, и записать их в стек команд
		ИнтернетПоддержкаПользователейКлиент.ДобавитьКомандыСервиса(
			КонтекстВзаимодействия,
			ПараметрыЗапроса,
			КонтекстОбработчика);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Выполнение команды "Записать адресный классификатор".
//
Процедура ЗаписатьАдресныйКлассификатор(КСКонтекст, СтруктураКоманды) Экспорт
	
	КСКонтекст.КонтекстРегистрации.Вставить("Страны"      , СтруктураКоманды.Страны);
	КСКонтекст.КонтекстРегистрации.Вставить("РегионыСтран", СтруктураКоманды.РегионыСтран);
	
КонецПроцедуры

// Выполнение команды "Записать данные организаций".
//
Процедура ЗаписатьСписокОрганизаций(КСКонтекст, СтруктураКоманды) Экспорт
	
	КСКонтекст.КонтекстРегистрации = Новый Структура;
	КСКонтекст.КонтекстРегистрации.Вставить("СписокОрганизаций", СтруктураКоманды.СписокОрганизаций);
	КСКонтекст.КонтекстРегистрации.Вставить("ДанныеОрганизаций", СтруктураКоманды.ДанныеОрганизаций);
	
КонецПроцедуры

// Выполнение команды "Записать коды регионов в сессионные параметры".
//
Процедура СохранитьВПараметрахКодыРегионов(КСКонтекст, Знач СтруктураКоманды) Экспорт
	
	МассивПараметров = СтруктураКоманды.Параметры;
	СписокКодов      = Новый СписокЗначений;
	
	Для каждого Параметр Из МассивПараметров Цикл
		
		// Именем параметра служит код
		// Значением - наименование региона
		// Выбирать удобнее по названию региона - поэтому замена
		СписокКодов.Добавить(
			Параметр.Имя,
			Параметр.Имя + " - " + Параметр.Значение);
		
	КонецЦикла;
	
	ЗаписатьПараметрКонтекста(КСКонтекст, "codesRegionED", СписокКодов);
	
КонецПроцедуры

// Возвращает тип команды - клиентская или серверная.
//
// Параметры:
// СтруктураКоманды - Структура - сервиса ИПП во внутреннем представлении.
//
// Возвращаемое значение:
// Число - тип команды: -1 - неизвестный тип команды, 0 - выполняется на
//		сервере, 1 - выполняется на клиенте.
//
Функция ТипКоманды(СтруктураКоманды, ОбращениеССервера) Экспорт
	
	Если СтруктураКоманды = Неопределено Тогда
		Возврат -1; // Неизвестный тип команды
	КонецЕсли;
	
	ИмяКоманды = НРег(СокрЛП(СтруктураКоманды.ИмяКоманды));
	
	Если ИмяКоманды = "store.put"
		ИЛИ ИмяКоманды = "store.get"
		ИЛИ ИмяКоманды = "store.delete"
		ИЛИ ИмяКоманды = "launchservice"
		ИЛИ ИмяКоманды = "setcodesregion"
		ИЛИ ИмяКоманды = "store.putorganizations"
		ИЛИ ИмяКоманды = "store.putadressclassifier" Тогда
		
		Возврат ?(ОбращениеССервера, 0, 1);
		
	ИначеЕсли ИмяКоманды = "performtheaction.findcertificatefingerprint"
		ИЛИ ИмяКоманды = "performtheaction.getinformationaboutorganization"
		ИЛИ ИмяКоманды = "performtheaction.getcertificate"
		ИЛИ ИмяКоманды = "check.updatehash" Тогда
		
		Возврат 0;
		
	ИначеЕсли СтруктураКоманды.ИмяКоманды = "ui.open"
		ИЛИ СтруктураКоманды.ИмяКоманды = "ui.close"
		ИЛИ СтруктураКоманды.ИмяКоманды = "performtheaction.decode"
		ИЛИ СтруктураКоманды.ИмяКоманды = "message.show"
		ИЛИ СтруктураКоманды.ИмяКоманды = "question.show"
		ИЛИ СтруктураКоманды.ИмяКоманды = "input.field"
		ИЛИ СтруктураКоманды.ИмяКоманды = "system.halt" Тогда
		
		Возврат 1;
		
	Иначе
		
		Возврат -1;
		
	КонецЕсли;
	
КонецФункции

// Функция создает и возвращает описатель контекста обработчика команд сервиса.
//
// Возвращаемое значение:
// Структура - структура со свойствами:
//	* Команды - Массив - стек команд сервиса во внутреннем представлении;
//	* ВыполнитьОстановку - Булево - если Истина, то требуется выполнить
//		остановку механизма ИПП;
//	* ПроизошлаОшибка - Булево - в процессе цикла обращения к веб-сервису ИПП
//		произошла ошибка;
//	* ПолноеОписаниеОшибки - Строка - полное описание ошибки для журнала
//		регистрации;
//	* ПользовательскоеОписаниеОшибки - Строка - представление ошибки
//		для пользователя;
//	* ДействияПриОшибкеДляСервера - Массив - массив элементов типа Строка -
//		имена действий, которые необходимо выполнить на сервере 1С:Предприятия;
//	ДействиеПриОшибкеДляКлиента - Строка - действие, которое нужно выполнить на
//		стороне клиента 1С:Предприятия при возникновении ошибки;
//	* ДопСвойства - Структура - структура с дополнительными данными обработчика
//		команд;
//
Функция НовыйКонтекстОбработчикаКоманд() Экспорт
	
	КонтекстОбработчика = Новый Структура;
	КонтекстОбработчика.Вставить("Команды"                       , Новый Массив);
	КонтекстОбработчика.Вставить("ВыполнитьОстановку"            , Ложь);
	КонтекстОбработчика.Вставить("ПроизошлаОшибка"               , Ложь);
	КонтекстОбработчика.Вставить("ПолноеОписаниеОшибки"          , "");
	КонтекстОбработчика.Вставить("ПользовательскоеОписаниеОшибки", "");
	КонтекстОбработчика.Вставить("ДействияПриОшибкеДляСервера"   , Новый Массив);
	КонтекстОбработчика.Вставить("ДействиеПриОшибкеДляКлиента"   , "");
	КонтекстОбработчика.Вставить("ПротоколОбмена"                , "");
	КонтекстОбработчика.Вставить("ДопСвойства"                   , Новый Структура);
	
	Возврат КонтекстОбработчика;
	
КонецФункции

#Если Не ВебКлиент Тогда

// Выполняет вызов операции process() сервиса ИПП. При вызове передаются
// необходимые параметры запроса.
//
// Параметры:
// ОпределениеWS - Структура - см. функцию НовыйОписаниеСервисаИПП().
// ПередаваемыеПараметрыЗапроса - Массив - массив элементов типа Структура:
//	* Значение - Строка, ДвоичныеДанные, Неопределено - значение параметра;
//	* ОбластьВидимости - Строка - область видимости параметра;
//	* БизнесПроцесс - Строка - имя бизнес-процесса;
// КонтекстОбработчика - Структура - см. функцию НовыйКонтекстОбработчикаКоманд();
// ОсновныеПараметры - Структура - основные параметры контекста взаимодействия;
//
Процедура ДобавитьКомандыСервиса(
	ОпределениеWS,
	ПередаваемыеПараметрыЗапроса,
	КонтекстОбработчика,
	ОсновныеПараметры) Экспорт
	
	URIСервиса = ОпределениеWS.URIСервиса;
	
	ТипЗапроса       = ОпределениеWS.ФабрикаXDTO.Тип(URIСервиса, "Parameters");
	ПараметрыЗапроса = ОпределениеWS.ФабрикаXDTO.Создать(ТипЗапроса);
	
	ТипОтвета        = ОпределениеWS.ФабрикаXDTO.Тип(URIСервиса, "ProcessResponseType");
	ОтветСервера     = ОпределениеWS.ФабрикаXDTO.Создать(ТипОтвета);
	
	ТипПараметр = ОпределениеWS.ФабрикаXDTO.Тип(URIСервиса, "Parameter");
	
	// Добавление параметров запроса
	Если ПередаваемыеПараметрыЗапроса <> Неопределено Тогда
		
		ИндексПараметра = 0;
		ТипДвоичныеДанные = Тип("ДвоичныеДанные");
		Для каждого ПередаваемыйПараметр Из ПередаваемыеПараметрыЗапроса Цикл
			
			Если ТипЗнч(ПередаваемыйПараметр.Значение) <> ТипДвоичныеДанные Тогда
				ЗначениеПараметра = СокрЛП(Строка(ПередаваемыйПараметр.Значение));
			Иначе
				Попытка
					ЗначениеПараметра = ТекстВДвоичныхДанных(ПередаваемыйПараметр.Значение);
				Исключение
					ИнфОшибка = ИнформацияОбОшибке();
					ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при преобразовании передаваемых данных. %1';uk='Помилка при перетворенні переданих даних. %1'"),
						"%1",
						ПодробноеПредставлениеОшибки(ИнфОшибка));
					ВызватьИсключение ТекстИсключения;
				КонецПопытки;
			КонецЕсли;
			
			// Определение объекта параметра (Объект XDTO).
			Параметр = ОпределениеWS.ФабрикаXDTO.Создать(ТипПараметр);
			
			Параметр.name  = СокрЛП(ПередаваемыйПараметр.Имя);
			Параметр.value = ЗначениеПараметра;
			Параметр.index = ИндексПараметра;
			
			БизнесПроцесс = Неопределено;
			ПередаваемыйПараметр.Свойство("БизнесПроцесс", БизнесПроцесс);
			Если БизнесПроцесс <> Неопределено Тогда 
				Параметр.bp = СокрЛП(БизнесПроцесс);
			КонецЕсли;
			
			Если ПередаваемыйПараметр.Свойство("ВложенныеПараметры")
				И ТипЗнч(ПередаваемыйПараметр.ВложенныеПараметры) = Тип("Массив") Тогда
				ДобавитьВложенныеПараметры(
					Параметр,
					ПередаваемыйПараметр.ВложенныеПараметры,
					ОпределениеWS,
					ТипПараметр,
					ТипЗапроса);
			КонецЕсли;
			
			ПараметрыЗапроса.parameter.Добавить(Параметр);
			
			ИндексПараметра = ИндексПараметра + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОтветСервера = Неопределено;
	
	// Выполнение метода "process" WEB-Сервиса.
	ОтветСервера = СервисИПП_process(ПараметрыЗапроса, ОпределениеWS);
	
	// Если контекста нет, то ничего не структурировать, т.к. выполнение команд не последует
	// в связи с тем, что обратная связь не требуется (используется, например, для закрытия
	// бизнес-процесса, чтобы освободить ресурсы на сервере)
	Если КонтекстОбработчика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Преобразование ответа сервера из объекта XDTO в массив структур
	МассивСтруктурыКоманд = СтруктурироватьОтветСервера(
		ОсновныеПараметры,
		ОтветСервера,
		КонтекстОбработчика);
	
	Если КонтекстОбработчика.ПроизошлаОшибка Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСтруктурыКоманд = Неопределено ИЛИ МассивСтруктурыКоманд.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Пустой ответ сервера.';uk='Порожній відповідь сервера.'");
	КонецЕсли;
	
	// Вставка команд в начало стека команд
	КоличествоКомандСервера = МассивСтруктурыКоманд.Количество();
	Для ОбратныйИндекс = 1 По КоличествоКомандСервера Цикл
		КонтекстОбработчика.Команды.Вставить(0, МассивСтруктурыКоманд[КоличествоКомандСервера - ОбратныйИндекс]);
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с параметрами в контексте взаимодействия

// Создает описание параметра ИПП.
// Параметры:
// Имя - Строка - имя параметра;
// Значение - Строка - значение параметра;
// ОбластьВидимости - Строка - область видимости параметра (сессионный
//		или стартовый);
//
// Возвращаемое значение:
// Структура - описание параметра с полями:
//	* Имя - Строка - имя параметра;
//	* Значение - Строка - значение параметра;
//	* ОбластьВидимости - Строка - область видимости параметра;
//
Функция НовыйПараметрИПП(Имя, Значение, ОбластьВидимости) Экспорт
	
	Возврат Новый Структура("Имя, Значение, ОбластьВидимости",
		Имя,
		Значение,
		ОбластьВидимости);
	
КонецФункции

// Запись сессионного или стартового параметра. Стартовые параметры записываются
// также регистр сведений ПараметрыИнтернетПоддержкиПользователей.
//
Процедура ЗаписатьПараметрКонтекста(
	КСКонтекст,
	ИмяПараметра,
	ЗначениеПараметра,
	ОбластьВидимости = "",
	ОбщиеСтартовыеПараметры = Неопределено) Экспорт
	
	ЭтоСтартовыйПараметр = (НРег(ОбластьВидимости) = "startup");
	СессионныеПараметры = КСКонтекст.СессионныеПараметры;
	
	Параметр = СессионныеПараметры.Получить(ИмяПараметра);
	
	ОбластьВидимостиЗаписываемого = ?(ЭтоСтартовыйПараметр, "startUp", "");
	
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ЗначениеПараметра;
		Параметр.ОбластьВидимости = ОбластьВидимостиЗаписываемого;
	Иначе
		Параметр = НовыйПараметрИПП(ИмяПараметра, ЗначениеПараметра, ОбластьВидимостиЗаписываемого);
		СессионныеПараметры.Вставить(ИмяПараметра, Параметр);
	КонецЕсли;
	
	// Если параметр является стартовым, то он сохраняется для
	// всех пользователей в регистре сведений
	Если ЭтоСтартовыйПараметр И ОбщиеСтартовыеПараметры <> Неопределено Тогда
		ОбщиеСтартовыеПараметры.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЕсли;
	
КонецПроцедуры

// Удаление параметров контекста. Стартовые параметры удаляются также из
// регистра сведений ПараметрыИнтернетПоддержкиПользователей.
//
Процедура УдалитьПараметрыКонтекста(КСКонтекст, СтруктураКоманды, КонтекстОбработчика) Экспорт
	
	СессионныеПараметры = КСКонтекст.СессионныеПараметры;
	
	Если ТипЗнч(СтруктураКоманды) = Тип("Структура") Тогда
		Если СтруктураКоманды.Свойство("Параметры") Тогда
			МассивПараметров = СтруктураКоманды.Параметры;
		Иначе
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(СтруктураКоманды);
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтруктураКоманды) = Тип("Массив") Тогда
		МассивПараметров = СтруктураКоманды;
	Иначе
		Возврат;
	КонецЕсли;
	
	УдаляемыеИзРС = Новый Соответствие;
	
	Для каждого ПараметрКоманды Из МассивПараметров Цикл
		
		Если ПараметрКоманды = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СессионныеПараметры.Удалить(ПараметрКоманды.Имя);
		
		// Если параметр стартовый, то он удаляется из регистра параметров ИПП
		Если ПараметрКоманды.Свойство("ОбластьВидимости") И НРег(ПараметрКоманды.ОбластьВидимости) = "startup" Тогда
			УдаляемыеИзРС.Вставить(ПараметрКоманды.Имя, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдаляемыеИзРС.Количество() > 0 Тогда
		
		Если УдаляемыеИзРС.Получить("login") = Истина Тогда
			КонтекстОбработчика.ДопСвойства.Вставить("ИзмененЛогинПользователя", "");
		КонецЕсли;
		
		ИнтернетПоддержкаПользователейВызовСервера.УдалитьПараметрыИзРегистра(УдаляемыеИзРС);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение параметра контекста.
//
Функция ЗначениеСессионногоПараметра(КСКонтекст, ИмяПараметра) Экспорт
	
	СессионныеПараметры = КСКонтекст.СессионныеПараметры;
	ОсновныеПараметры   = КСКонтекст.ОсновныеПараметры;
	
	ЗначениеПараметра = Неопределено;
	
	Если ИмяПараметра = "libraryVersion" Тогда
		ЗначениеПараметра = ВерсияБиблиотеки();
		
	ИначеЕсли ИмяПараметра = "APIVersion" Тогда
		ЗначениеПараметра = ВерсияAPIВзаимодействия();
		
	ИначеЕсли ИмяПараметра = "versionPlatform" Тогда
		ЗначениеПараметра = ОсновныеПараметры.ВерсияПриложения;
		
	ИначеЕсли ИмяПараметра = "nameConfiguration" Тогда
		ЗначениеПараметра = ОсновныеПараметры.ИмяКонфигурации;
		
	ИначеЕсли ИмяПараметра = "versionConfiguration" Тогда
		ЗначениеПараметра = ОсновныеПараметры.ВерсияКонфигурации;
		
	ИначеЕсли ИмяПараметра = "language" Тогда
		ЗначениеПараметра = ОсновныеПараметры.ТекущийКодЛокализации;
		
	ИначеЕсли ИмяПараметра = "enterPoint" Тогда
		ЗначениеПараметра = СокрЛП(ОсновныеПараметры.МестоЗапуска);
		
	ИначеЕсли ИмяПараметра = "versionUpdateConfiguration" Тогда
		
		ЗначениеПараметра = ОсновныеПараметры.ВерсияОбработкиОбновленияКонфигурации;
		
	Иначе
		
		ОписательПараметра = СессионныеПараметры.Получить(ИмяПараметра);
		Если ОписательПараметра <> Неопределено Тогда
			Возврат ОписательПараметра.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Добавляет вложенные параметры к параметрам запроса.
//
Процедура ДобавитьВложенныеПараметры(
	Параметр,
	ВложенныеПараметрыМассив,
	ОпределениеWS,
	ТипПараметр,
	ТипПараметры) Экспорт
	
	Параметр.parameters = ОпределениеWS.ФабрикаXDTO.Создать(ТипПараметры);
	
	Индекс = 0;
	Для каждого ПередаваемыйПараметр Из ВложенныеПараметрыМассив Цикл
		
		ВложенныйПараметр = ОпределениеWS.ФабрикаXDTO.Создать(ТипПараметр);
		
		ВложенныйПараметр.name  = СокрЛП(ПередаваемыйПараметр.Имя);
		ВложенныйПараметр.value = СокрЛП(ПередаваемыйПараметр.Значение);
		ВложенныйПараметр.index = Индекс;
		
		Если ПередаваемыйПараметр.Свойство("БизнесПроцесс") Тогда
			Параметр.bp = СокрЛП(ПередаваемыйПараметр.БизнесПроцесс);
		КонецЕсли;
		
		Параметр.parameters.parameter.Добавить(ВложенныйПараметр);
		
		Если ПередаваемыйПараметр.Свойство("ВложенныеПараметры")
			И ТипЗнч(ПередаваемыйПараметр.ВложенныеПараметры) = Тип("Массив") Тогда
			
			ДобавитьВложенныеПараметры(
				ВложенныйПараметр,
				ПередаваемыйПараметр.ВложенныеПараметры,
				ОпределениеWS,
				ТипПараметр,
				ТипПараметры);
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает сессионные параметры, необходимые для расшифрования
// контрольного маркера ЭЦП.
//
Функция СессионныеПараметрыДляРасшифрования(КСКонтекст) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("markerED",
		ЗначениеСессионногоПараметра(КСКонтекст, "markerED"));
	Результат.Вставить("IDCertificateED_Dop",
		ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED_Dop"));
	Результат.Вставить("IDCertificateED",
		ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED"));
	
	Возврат Результат;
	
КонецФункции

// Добавление сессионных параметров к параметрам запроса при вызове операции
// process() сервиса ИПП.
//
Процедура ДобавитьСессионныеПараметрыКЗапросу(
	КСКонтекст,
	ИменаСессионныхПараметров = Неопределено,
	ПараметрыЗапроса) Экспорт
	
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Массив;
	КонецЕсли;
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	ИдентификаторСеансаДобавлен = Ложь;
	Если ИменаСессионныхПараметров <> Неопределено Тогда
		
		Для каждого ИмяПараметра Из ИменаСессионныхПараметров Цикл
			
			ЗначениеПараметра = ЗначениеСессионногоПараметра(КСКонтекст, ИмяПараметра);
			
			СессионныйПараметр = Новый Структура("Имя, БизнесПроцесс, Значение, ОбластьВидимости",
				ИмяПараметра,
				ОсновныеПараметры.ИмяWSОпределения,
				ЗначениеПараметра,
				"sessionParameter");
			
			ПараметрыЗапроса.Добавить(СессионныйПараметр);
			
			Если ИмяПараметра = "session_id" Тогда
				ИдентификаторСеансаДобавлен = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ИдентификаторСеансаДобавлен Тогда
		
		ИдентификаторСеансаИПП = ЗначениеСессионногоПараметра(КСКонтекст, "session_id");
		
		СессионныйПараметр = Новый Структура("Имя, БизнесПроцесс, Значение, ОбластьВидимости",
			"session_id",
			ОсновныеПараметры.ИмяWSОпределения,
			ИдентификаторСеансаИПП,
			"sessionParameter");
		
		ПараметрыЗапроса.Добавить(СессионныйПараметр);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Другие процедуры и функции для взаимодействия с сервисом ИПП

#Если Не ВебКлиент Тогда

// Отправка электронного письма в службу технической поддержки.
//
Функция ОтправитьЭлектронноеПисьмоЧерезСервис(СтруктураСообщения, СетевыеПараметрыИПП) Экспорт
	
	Попытка
		ОписаниеСервисаИПППочты = НовыйОписаниеСервисаИПП(ИмяWSОпределения(), СетевыеПараметрыИПП);
		
		ТипЗапроса       = ОписаниеСервисаИПППочты.ФабрикаXDTO.Тип(ОписаниеСервисаИПППочты.URIСервиса, "Parameters");
		ПараметрыЗапроса = ОписаниеСервисаИПППочты.ФабрикаXDTO.Создать(ТипЗапроса);
		
		ТипПараметр = ОписаниеСервисаИПППочты.ФабрикаXDTO.Тип(ОписаниеСервисаИПППочты.URIСервиса, "Parameter");
		
		// Инициализация параметров электронного письма
		Параметр2 = ОписаниеСервисаИПППочты.ФабрикаXDTO.Создать(ТипПараметр);
		Параметр3 = ОписаниеСервисаИПППочты.ФабрикаXDTO.Создать(ТипПараметр);
		Параметр4 = ОписаниеСервисаИПППочты.ФабрикаXDTO.Создать(ТипПараметр);
		
		Параметр2.name  = "subject";
		Параметр2.value = СтруктураСообщения.Тема;
		ПараметрыЗапроса.parameter.Добавить(Параметр2);
		
		Параметр3.name  = "text";
		Параметр3.value = СтруктураСообщения.Сообщение;
		ПараметрыЗапроса.parameter.Добавить(Параметр3);
		
		Параметр4.name  = "from";
		Параметр4.value = СтруктураСообщения.ОтКого;
		ПараметрыЗапроса.parameter.Добавить(Параметр4);
		
		УсловноеИмяПолучателя = Неопределено;
		Если СтруктураСообщения.Свойство("УсловноеИмяПолучателя", УсловноеИмяПолучателя) Тогда
			Параметр5 = ОписаниеСервисаИПППочты.ФабрикаXDTO.Создать(ТипПараметр);
			Параметр5.name  = "aliasto";
			Параметр5.value = УсловноеИмяПолучателя;
			ПараметрыЗапроса.parameter.Добавить(Параметр5);
		КонецЕсли;
		
		Ответ = СервисИПП_sendmailtonet(ПараметрыЗапроса, ОписаниеСервисаИПППочты);
	Исключение
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru='Ошибка при отправке электронного письма. ';uk='Помилка під час надсилання електронного листа. '")
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

#Если Не ВебКлиент Тогда

// Выполняет получение содержимого двоичных данных в виде текста.
// Параметры:
// ДвоичныеДанные - ДвоичныеДанные - двоичные данные, содержимое которых
//	необходимо получить в виде текста.
//
// Возвращаемое значение:
//	Строка - текст в двоичных данных;
//
Функция ТекстВДвоичныхДанных(ДвоичныеДанные) Экспорт
	
	Результат = "";
	
	Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанные.Записать(ИмяВремФайла);
	ТекДок = Новый ТекстовыйДокумент;
	ТекДок.Прочитать(ИмяВремФайла, , "");
	Результат = ТекДок.ПолучитьТекст();
	
	Попытка
		УдалитьФайлы(ИмяВремФайла);
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры
//	СтрокаПодстановки  – Строка – шаблон строки с параметрами
//		(вхождениями вида "%ИмяПараметра").
// Параметр<n>         - Строка - параметр
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами
//
// Пример:
// Строка = ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2';uk='%1 пішов в %2'"), "Вася", "Зоопарк");
//
Функция ПодставитьПараметрыВСтроку(
	Знач СтрокаПодстановки,
	Знач Параметр1,
	Знач Параметр2 = Неопределено,
	Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено,
	Знач Параметр5 = Неопределено,
	Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено,
	Знач Параметр8 = Неопределено,
	Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Результат = Результат + "%";
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %';uk='Вхідний рядок Строкаподстановки має невірний формат: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %';uk='Вхідний рядок Строкаподстановки має невірний формат: %'" + ЗначениеПараметра);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
	
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает номер версии, записанный через символ ".", в виде сплошной записи
// с незначащими нулями.
// Пример:
// "1.2.3.4" -> "001002003004".
//
Функция НормализованныйНомерВерсии(Версия) Экспорт
	
	Результат = "";
	
	ПроверяемаяСтрока  = Версия + ".";
	КоличествоСимволов = СтрДлина(ПроверяемаяСтрока);
	
	Подверсия = "";
	
	Для Итератор = 1 По КоличествоСимволов Цикл
		
		ТекущийСимвол = Сред(ПроверяемаяСтрока, Итератор, 1);
		
		Если ТекущийСимвол <> "." Тогда
			Подверсия = Подверсия + ТекущийСимвол;
		Иначе
			Результат = Результат + Прав("000" + Подверсия, 4);
			Подверсия = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Сравнение старшинства версий, записанных через символ ".".
// Параметры:
// Версия1 - Строка - сравниваемая версия;
// Версия2 - Строка - сравниваемая версия;
//
// Возвращаемое значение:
// Число - 0 - версии равны, -1 - Версия1 младше Версия2,
//		1 - Версия1 старше Версия2.
//
Функция СравнитьВерсии(Версия1, Версия2) Экспорт
	
	В1Стр = НормализованныйНомерВерсии(Версия1);
	В2Стр = НормализованныйНомерВерсии(Версия2);
	
	Если В1Стр = В2Стр Тогда
		Возврат 0;
	ИначеЕсли В1Стр < В2Стр Тогда
		Возврат -1;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
