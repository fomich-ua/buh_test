
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет необходимость запуска механизма при старте приложения
// в соответстивии с пользовательскими настройками и реализацией
// переопределяемых модулей.
// 
// Возвращаемое значение:
//	Булево - Истина, если запускать при старте, Ложь - в противном случае.
//
Функция ЗапускатьМеханизмПриСтарте() Экспорт
	
	НеобходимоЗапускатьПриСтарте = Ложь;
	ИнтернетПоддержкаПользователейСерверПереопределяемый.ЗапускатьИнтернетПоддержкуПриСтартеПрограммы(
		НеобходимоЗапускатьПриСтарте);
	
	Если НеобходимоЗапускатьПриСтарте <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВсегдаПоказыватьПриСтартеПрограммы = ХранилищеОбщихНастроек.Загрузить(
		"ИнтернетПоддержкаПользователей",
		"ВсегдаПоказыватьПриСтартеПрограммы");
	
	ВсегдаПоказыватьПриСтартеПрограммы = ?(
		ВсегдаПоказыватьПриСтартеПрограммы = Неопределено,
		Истина,
		ВсегдаПоказыватьПриСтартеПрограммы);
	
	Возврат ВсегдаПоказыватьПриСтартеПрограммы
		И ТекущаяДатаСеанса() >= ИнтернетПоддержкаПользователейВызовСервера.ЗначениеНастройкиНеНапоминатьОбАвторизацииДо();
	
КонецФункции

// Определяет, является ли текущий пользователь полноправным
// пользователем информационной базы.
//
// Возвращаемое значение:
// Булево - Истина - текущий пользователь является полноправным пользователем
//	 системы, Ложь - в противном случае;
//
Функция ЭтоПолноправныйПользователь() Экспорт
	
	ЭтоПолноправныйПользователь = Ложь;
	ИнтернетПоддержкаПользователейСерверПереопределяемый.ПриОпределенииЭтоПолноправныйПользователь(ЭтоПолноправныйПользователь);
	Возврат (ЭтоПолноправныйПользователь = Истина);
	
КонецФункции

// Для конфигураций с внедренной библиотекой "Библиотека стандартных подсистем"
// (БСП). Добавляет необходимые параметры работы клиента при запуске.
//
// Параметры:
//	Параметры - Структура - заполняемые параметры;
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	// При запуске программы зачитываются необходимые параметры, формируется
	// контекст взаимодействия с сервисом ИПП
	
	МестоЗапускаПриСтартеПрограммы = "systemStartNew";
	ПараметрыИПП = ИнтернетПоддержкаПользователейВызовСервера.ПараметрыИнтернетПоддержки(
		МестоЗапускаПриСтартеПрограммы);
	
	УправляющаяСтруктураЗапуска = ИнтернетПоддержкаПользователейКлиентСервер.ОпределитьВозможностьЗапускаПоМестуИПараметрам(
		МестоЗапускаПриСтартеПрограммы,
		ПараметрыИПП);
	
	ВозвращаемыеПараметры = Новый Структура;
	
	Если УправляющаяСтруктураЗапуска <> Неопределено Тогда
		// Если запуск запрещен
		ВозвращаемыеПараметры.Вставить("УправляющаяСтруктураЗапуска", УправляющаяСтруктураЗапуска);
	Иначе
		КонтекстВзаимодействия = ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия(
			МестоЗапускаПриСтартеПрограммы,
			ПараметрыИПП,
			Ложь,
			Неопределено);
		ВозвращаемыеПараметры.Вставить("ПараметрыКонтекстаВзаимодействия", КонтекстВзаимодействия);
	КонецЕсли;
	
	Параметры.Вставить("ИнтернетПоддержкаПользователей", ВозвращаемыеПараметры);
	
КонецПроцедуры

// Для конфигураций с внедренной библиотекой "Библиотека стандартных подсистем"
// (БСП) версии 2.2.2 и старше.
// Используется для заполнения разрешений работы в безопасном режиме
// (см. одноименную процедуру модуля РаботаВБезопасномРежимеПереопределяемый)
//
// Параметры:
//	ЗапросыРазрешений - заполняемые разрешения;
//
// Пример использования в переопределяемой процедуре
// РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам():
// 
//	// ИнтернетПоддержкаПользователей
//	ИнтернетПоддержкаПользователей.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(Разрешения)
//	// Конец ИнтернетПоддержкаПользователей
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если ИспользованиеИнтернетПоддержкиРазрешеноВТекущемРежимеРаботы() Тогда
		
		Если Метаданные.ОбщиеМодули.Найти("РаботаВБезопасномРежиме") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		МодульРаботаВБезопасномРежиме = Вычислить("РаботаВБезопасномРежиме");
		
		Если ТипЗнч(МодульРаботаВБезопасномРежиме) <> Тип("ОбщийМодуль") Тогда
			Возврат;
		КонецЕсли;
		
		ОписаниеРесурса = ИнтернетПоддержкаПользователейКлиентСервер.ОписаниеРесурсаИнтернетПоддержки();
		Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			ОписаниеРесурса.Протокол,
			ОписаниеРесурса.Адрес,
			ОписаниеРесурса.Порт,
			ОписаниеРесурса.Описание);
		
		ЗапросыРазрешений.Добавить(Разрешение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет, разрешено ли использование интернет-поддержки в текущем режиме
// работы информационной базы в соответствии с реализацией процедуры
// ИнтернетПоддержкаПользователейСерверПереопределяемый.ИспользоватьИнтернетПоддержку()
//
Функция ИспользованиеИнтернетПоддержкиРазрешеноВТекущемРежимеРаботы()
	
	Отказ = Ложь;
	ИнтернетПоддержкаПользователейСерверПереопределяемый.ИспользоватьИнтернетПоддержку(Отказ);
	
	Возврат (Отказ = Ложь);
	
КонецФункции

// Определяет, разрешено ли использование интернет-поддержки текущему
// пользователю в зависимости от его прав доступа.
//
// Возвращаемое значение:
//	Булево - Истина, если использование разрешено, Ложь - в противном случае.
//
Функция ИспользованиеИнтернетПоддержкиРазрешеноДляТекущегоПользователя() Экспорт
	
	Результат = (РольДоступна("ИспользованиеИПП") ИЛИ ЭтоПолноправныйПользователь());
	Если НЕ Результат Тогда
		ИнтернетПоддержкаПользователейСерверПереопределяемый.ПроверитьВозможностьЗапуска(Результат);
	КонецЕсли;
	
	Возврат (Результат = Истина);
	
КонецФункции

#КонецОбласти
