
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Переопределяемые процедуры и функции общего назначения

// Переопределяет использование механизма интернет-поддержки.
// Реализация процедуры строго обязательна. В параметре Отказ должно
// возвращаться одно из двух значений: Истина или Ложь.
//
// Параметры:
//	Отказ - Булево - Истина, использование интренет-поддержки запрещено;
//		Ложь - в противном случае;
//		Значение по умолчанию - Неопределено;
//
// Пример:
// Для типовых конфигураций, основанных на библиотеке стандартных подсистем
// (БСП) необходимо запрещение использования механизма интернет-поддержки в
// модели сервиса. Для этого необходимо в тело процедуры вставить код:
//
// Отказ = ОбщегоНазначенияПовтИсп.РазделенияВключено();
//
Процедура ИспользоватьИнтернетПоддержку(Отказ) Экспорт
	
	Отказ = НЕ ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме");
	
КонецПроцедуры

// Переопределяет возможность показа информационного окна для
// текущей конфигурации.
//
// Параметры:
//	Отказ - Булево - Истина, если показ информационного окна запрещен;
//		Ложь - в противном случае;
//		Значение по умолчанию - Ложь;
//
Процедура ИспользоватьИнформационноеОкно(Отказ) Экспорт
	
	Отказ = НЕ ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме")
	
КонецПроцедуры

// Переопределяет необходимость запуска механизма при старте программы, т.е.
// должна ли интеренет-поддержка запускаться при старте программы для показа
// информационного окна.
// Имеет смысл только в том случае, если в ИспользоватьИнформационноеОкно()
// параметру Отказ присваивается значение Ложь.
//
// Параметры:
// ЗапускатьПриСтарте - Булево - Истина, если необходимо запускать
//		интернет-поддержку при старте программы, Ложь - в противном случае.
//		Значение по умолчанию - Ложь.
//
Процедура ЗапускатьИнтернетПоддержкуПриСтартеПрограммы(ЗапускатьПриСтарте) Экспорт
	
	ЗапускатьПриСтарте = НЕ ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы().ЭтоВебКлиент;
	
КонецПроцедуры

// Процедура дополняет проверку возможности запуска
// механизма интернет-поддержки пользователей в том случае,
// если пользователю недоступна роль "ИспользованиеИПП" и текущий пользователь
// не является полноправным пользователем системы
// (см. процедуру ПриОпределенииЭтоПолноправныйПользователь()).
//
// Параметры:
//	ЗапускРазрешен - Булево - Истина - разрешить запуск, Ложь - запретить запуск.
//		Значение по умолчанию - Ложь.
//
Процедура ПроверитьВозможностьЗапуска(ЗапускРазрешен) Экспорт
	
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		ЗапускРазрешен = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет, является ли текущий пользователь полноправным
// пользователем информационной базы. Используется для
// определения возможности настройки пользователем параметров
// интернет-поддержки.
//
// Параметры:
// ЭтоПолноправныйПользователь - Булево - в параметре возвращается признак
//	"полноправности" пользователя. Истина - если текущий пользователь является
//	полноправным пользователем информационной базы.
//	Значение по умолчанию - Ложь.
//
// Пример:
// Для конфигурации со встроенной подсистемой "Пользователи" библиотеки
// стандартных подсистем (БСП):
//
//	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(, Истина);
//
Процедура ПриОпределенииЭтоПолноправныйПользователь(ЭтоПолноправныйПользователь) Экспорт
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(, Истина);
	
КонецПроцедуры

// Определяет версию обработки "ОбновлениеКонфигурации" библиотеки стандартных
// подсистем (БСП). В параметре Версия возвращается версия обработки обновления
// конфигурации. Для конфигураций, основанных на библиотеке стандартных
// подсистем необходимо в параметре Версия возвратить версию библиотеки
// стандартных подсистем.
// Если библиотека страндартных подсистем не используется, тогда необходимо
// оставить тело процедуры пустым.
//
// Параметры:
//	Версия - Строка - в параметре возвращается версия обработки обновления
//		конфигурации.
//
// Пример:
// Для конфигураций со встроенной библиотекой "Библиотека стандартных
// подсистем":
//	ПодсистемаСтандартныеПодсистемы = Новый Структура("Имя, Версия");
//	ОбновлениеИнформационнойБазыБСП.ПриДобавленииПодсистемы(ПодсистемаСтандартныеПодсистемы);
//	Версия = ПодсистемаСтандартныеПодсистемы.Версия;
//
Процедура ВерсияОбработкиОбновленияКонфигурации(Версия) Экспорт
	
	ПодсистемаСтандартныеПодсистемы = Новый Структура("Имя, Версия");
	ОбновлениеИнформационнойБазыБСП.ПриДобавленииПодсистемы(ПодсистемаСтандартныеПодсистемы);
	Версия = ПодсистемаСтандартныеПодсистемы.Версия;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для обработки событий интернет-поддержки пользователей

// Вызывается перед авторизацией пользователя в интернет-поддержке
// пользователей для определения данных текущего пользователя, если
// логин и пароль не указаны.
// Процедура используется ТОЛЬКО, если необходимо переопределить логин и пароль
// неавторизованного пользователя, например, на основе логина и пароля
// пользователя сервера обновлений или каким-либо другим способом.
//
// Параметры:
// ДанныеПользователя - Структура - выходной параметр - структура, заполняемая
//		данными о пользователе интернет-поддержки:
//	* Логин - Строка - логин пользователя;
//	* Пароль - Строка - пароль пользователя;
//
// Пример:
// получение логина и пароля пользователя интернет-поддержки
// из настроек пользователя сервера обновлений для конфигураций со встроенной
// библиотекой "Библиотека стандартных подсистем" (БСП):
//
//	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
//		"ОбновлениеКонфигурации", 
//		"НастройкиОбновленияКонфигурации"
//	);
//
//	Если Настройки = Неопределено Тогда
//		Возврат;
//	Иначе
//		ДанныеПользователя.Вставить("Логин" , Настройки.КодПользователяСервераОбновлений);
//		ДанныеПользователя.Вставить("Пароль", Настройки.ПарольСервераОбновлений);
//	КонецЕсли;
//
Процедура ПриОпределенииДанныхПользователяИнтернетПоддержки(ДанныеПользователя) Экспорт
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбновлениеКонфигурации", 
		"НастройкиОбновленияКонфигурации"
	);

	Если Настройки = Неопределено Тогда
		Возврат;
	Иначе
		ДанныеПользователя.Вставить("Логин" , Настройки.КодПользователяСервераОбновлений);
		ДанныеПользователя.Вставить("Пароль", Настройки.ПарольСервераОбновлений);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при успешной авторизации пользователя в интернет-поддержке
// пользователей после ввода пользователем правильного логина и пароля.
// При необходимости процедура может быть использована для сохранения логина и
// пароля пользователя в смежных механизмах.
// Заполнение процедуры требуется ТОЛЬКО при необходимости переопределения
// обработки входа пользователя в интернет-поддержку.
//
// Параметры:
// ДанныеПользователя - Структура - структура с полями:
//	* Логин - Строка - логин пользователя;
//	* Пароль - Строка - пароль пользователя;
//
// Пример:
// Сохранение логина и пароля пользователя интернет-поддержки
// в настройках пользователя сервера обновлений для конфигураций со встроенной
// библиотекой "Библиотека стандартных подсистем" (БСП):
//
//	НастройкиОбновленияКонфигурации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
//		"ОбновлениеКонфигурации",
//		"НастройкиОбновленияКонфигурации"
//	);
//
//	Если НастройкиОбновленияКонфигурации = Неопределено Тогда
//		НастройкиОбновленияКонфигурации = ОбновлениеКонфигурацииКлиентСервер.НовыеНастройкиОбновленияКонфигурации();
//	Иначе
//		НастройкиОбновленияКонфигурации.Вставить("КодПользователяСервераОбновлений" , ДанныеПользователя.Логин);
//		НастройкиОбновленияКонфигурации.Вставить("ПарольСервераОбновлений"          , ДанныеПользователя.Пароль);
//	КонецЕсли;
//
//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
//		"ОбновлениеКонфигурации", 
//		"НастройкиОбновленияКонфигурации",
//		НастройкиОбновленияКонфигурации);
//
Процедура ПриАвторизацииПользователяВИнтернетПоддержке(ДанныеПользователя) Экспорт
	
	НастройкиОбновленияКонфигурации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбновлениеКонфигурации",
		"НастройкиОбновленияКонфигурации"
	);

	Если НастройкиОбновленияКонфигурации = Неопределено Тогда
		НастройкиОбновленияКонфигурации = ОбновлениеКонфигурацииКлиентСервер.НовыеНастройкиОбновленияКонфигурации();
	Иначе
		НастройкиОбновленияКонфигурации.Вставить("КодПользователяСервераОбновлений" , ДанныеПользователя.Логин);
		НастройкиОбновленияКонфигурации.Вставить("ПарольСервераОбновлений"          , ДанныеПользователя.Пароль);
	КонецЕсли;

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ОбновлениеКонфигурации", 
		"НастройкиОбновленияКонфигурации",
		НастройкиОбновленияКонфигурации);
	
КонецПроцедуры

// Вызывается при выходе пользователя из интернет-поддержки
// (нажатие пользователем кнопки "Выход" на форме интернет-поддержки).
//
// Заполнение процедуры требуется ТОЛЬКО при необходимости переопределить
// обработку выхода пользователя из интернет-поддержки пользователей.
// При необходимости может быть использована для обновления данных пользователя
// в смежных механизмах.
//
// Пример:
// Очистка логина и пароля пользователя интернет-поддержки
// в настройках пользователя сервера обновлений для конфигураций со встроенной
// библиотекой "Библиотека стандартных подсистем" (БСП):
//
//	НастройкиОбновленияКонфигурации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
//		"ОбновлениеКонфигурации",
//		"НастройкиОбновленияКонфигурации"
//	);
//
//	Если НастройкиОбновленияКонфигурации <> Неопределено Тогда
//		НастройкиОбновленияКонфигурации.Вставить("КодПользователяСервераОбновлений" , "");
//		НастройкиОбновленияКонфигурации.Вставить("ПарольСервераОбновлений"          , "");
//		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
//			"ОбновлениеКонфигурации", 
//			"НастройкиОбновленияКонфигурации",
//			НастройкиОбновленияКонфигурации);
//	КонецЕсли;
//
Процедура ПриВыходеПользователяИзИнтернетПоддержки() Экспорт
	
	НастройкиОбновленияКонфигурации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбновлениеКонфигурации",
		"НастройкиОбновленияКонфигурации"
	);
	
	Если НастройкиОбновленияКонфигурации <> Неопределено Тогда
		НастройкиОбновленияКонфигурации.Вставить("КодПользователяСервераОбновлений" , "");
		НастройкиОбновленияКонфигурации.Вставить("ПарольСервераОбновлений"          , "");
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ОбновлениеКонфигурации", 
			"НастройкиОбновленияКонфигурации",
			НастройкиОбновленияКонфигурации);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с Интернет

// Определяет настройки прокси-сервера на стороне сервера 1С:Предприятия;
//
// Параметры:
// НастройкиПрокси - Соответствие - параметры прокси-сервера - в параметре
//		возвращаются настройки прокси-сервера на стороне клиента 1С:Предприятия:
//	* ИспользоватьПрокси - Булево - Истина, если использовать прокси-сервер;
//	* Пользователь - Строка, Неопределено - имя пользователя прокси-сервера;
//	* Пароль - Строка, Неопределено - пароль пользователя прокси-сервера;
//	* Сервер - Строка - сетевое имя прокси-сервера;
//	* Порт - Число - порт прокси-сервера;
//	* НеИспользоватьПроксиДляЛокальныхАдресов - Булево - Истина, если необходимо
//		отключить использование прокси-сервера для локальных адресов;
//	* ИспользоватьСистемныеНастройки - Булево - Истина, если необходимо
//		использовать системные настройки прокси-сервера;
//	* ДополнительныеНастройки - Соответствие - дополнительные прокси для
//		различных протоколов - ключ - имя протокола ("http", "https", "ftp"),
//		значение - структура со свойствами "Адрес" (Строка) и "Порт" (Число);
//
//
////////////////////////////////////////////////////////////////////////////////
// Пример получения настроек прокси-сервера для конфигураций
// со встроенной подсистемой БСП "ПолучениеФайловИзИнтернета"
//
// НастройкиПрокси = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
//
////////////////////////////////////////////////////////////////////////////////
//
// Если в конфигурации не используется подсистема ПолучениеФайловИзИнтернета
// или не используется функционал подсистемы ПолучениеФайловИзИнтернета
// для настройки параметров прокси-сервера, то рекомендуется использовать
// автоматические настройки параметров прокси-сервера.
// В этом случае код должен иметь вид:
//
//	НастройкиПрокси = Новый Соответствие;
//	НастройкиПрокси["ИспользоватьПрокси"]             = Истина;
//	НастройкиПрокси["ИспользоватьСистемныеНастройки"] = Истина;
//
Процедура НастройкиПроксиСервера(НастройкиПрокси) Экспорт
	
	НастройкиПрокси = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	
КонецПроцедуры

#КонецОбласти
