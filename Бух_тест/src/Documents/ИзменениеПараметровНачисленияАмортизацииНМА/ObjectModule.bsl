#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНМА);

	ДатаДок = СтруктураШапкиДокумента.Дата;

	ПервоначальныеСведенияБУ = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет;
	ПервоначальныеСведенияНУ = Движения.ПервоначальныеСведенияНМАНалоговыйУчет;
	
	Для Каждого СтрокаТЧ из ТаблицаПоНМА Цикл

		Если ЗначениеЗаполнено(СтрокаТЧ.СпособНачисленияАмортизацииБУ) Тогда
			СтрокаДвижений = ПервоначальныеСведенияБУ.Добавить();
			
			СтрокаДвижений.Период           							= ДатаДок;
			СтрокаДвижений.НематериальныйАктив 							= СтрокаТЧ.НематериальныйАктив;
			СтрокаДвижений.Организация      							= СтруктураШапкиДокумента.Организация;
			
			СтрокаДвижений.СрокПолезногоИспользования                  	= СтрокаТЧ.СрокПолезногоИспользованияБУ;
			СтрокаДвижений.ОбъемПродукцииРаботДляВычисленияАмортизации 	= СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
			СтрокаДвижений.ЛиквидационнаяСтоимость                     	= СтрокаТЧ.ЛиквидационнаяСтоимостьБУ;
			СтрокаДвижений.СпособНачисленияАмортизации 					= СтрокаТЧ.СпособНачисленияАмортизацииБУ;
			СтрокаДвижений.ПервоначальнаяСтоимость 						= СтрокаТЧ.ПервоначальнаяСтоимостьБУ;
			СтрокаДвижений.НачислятьАмортизацию 						= СтрокаТЧ.НачислятьАмортизациюБУ;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СрокПолезногоИспользованияНУ) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СпособНачисленияАмортизацииНУ) Тогда
			СтрокаДвижений = ПервоначальныеСведенияНУ.Добавить();
			
			СтрокаДвижений.Период           							= ДатаДок;
			СтрокаДвижений.НематериальныйАктив 							= СтрокаТЧ.НематериальныйАктив;
			СтрокаДвижений.Организация      							= СтруктураШапкиДокумента.Организация;
			
			СтрокаДвижений.СрокПолезногоИспользования                  	= СтрокаТЧ.СрокПолезногоИспользованияНУ;
			СтрокаДвижений.ПервоначальнаяСтоимостьНУ 					= СтрокаТЧ.ПервоначальнаяСтоимостьНУ;
			СтрокаДвижений.НачислятьАмортизацию 						= СтрокаТЧ.НачислятьАмортизациюНУ;
			СтрокаДвижений.НалоговоеНазначение 							= СтрокаТЧ.НалоговоеНазначение;
			СтрокаДвижений.НалоговаяГруппаОС 							= СтрокаТЧ.НалоговаяГруппаОС;
			СтрокаДвижений.СпособНачисленияАмортизации 					= СтрокаТЧ.СпособНачисленияАмортизацииНУ;
		КонецЕсли;	
		
	КонецЦикла;

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДополнитьСтруктуруПолейТабличнойЧастиНМАРегл(СтруктураШапкиДокумента, СтруктураПолей)
	
	СтруктураПолей.Вставить("СрокПолезногоИспользованияБУ"                 	, "СрокПолезногоИспользованияБУ");
	СтруктураПолей.Вставить("СрокПолезногоИспользованияНУ"                 	, "СрокПолезногоИспользованияНУ");
	СтруктураПолей.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизацииБУ" , "ОбъемПродукцииРаботДляВычисленияАмортизацииБУ");
	СтруктураПолей.Вставить("ЛиквидационнаяСтоимостьБУ"                     , "ЛиквидационнаяСтоимостьБУ");
	СтруктураПолей.Вставить("СпособНачисленияАмортизацииБУ" 				, "СпособНачисленияАмортизацииБУ");
	СтруктураПолей.Вставить("СпособНачисленияАмортизацииНУ" 				, "СпособНачисленияАмортизацииНУ");
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоНМА, Отказ, Заголовок) Экспорт
	
	// Сформируем структуру табличной части
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НематериальныйАктив" , "НематериальныйАктив");

	ДополнитьСтруктуруПолейТабличнойЧастиНМАРегл(СтруктураШапкиДокумента,СтруктураПолей);

	РезультатЗапросаПоНМА = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураПолей);
	ТаблицаПоНМА          = РезультатЗапросаПоНМА.Выгрузить();
	
	ДополнитьТабличнуюЧастьСведениямиОбПервоначальныхСведенияхНМА(МоментВремени(), Организация, ТаблицаПоНМА);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоНМА;
	
	Заголовок = "";

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоНМА, Отказ, Заголовок);

	//проверка, нет ли списанных НМА в табличной части
	УправлениеНеоборотнымиАктивами.ПроверитьНаСписанностьНМА(МоментВремени(), Организация, ТаблицаПоНМА, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНМА);
	КонецЕсли;

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры

// Процедура дополняет табличную часть колонками
// ПервоначальнаяСтоимостьБУ, НачислятьАмортизациюБУ 
// для нематериальных активов. 
//
// Параметры
//  ДатаДока                     – Тип: Дата, МоментВремени, Граница – Дата, на которую получать результаты
//                 
//  ТекОрганизация               – Тип: СправочникСсылка.Организации – Организация
//                 
//  ТаблицаПоНМА                  – Тип: ТаблицаЗначений – Таблица, в которую необходимо добавить колонки
//
Процедура ДополнитьТабличнуюЧастьСведениямиОбПервоначальныхСведенияхНМА(ДатаДока, ТекОрганизация, ТаблицаПоНМА) Экспорт
	
	ТаблицаПоНМА.Колонки.Добавить("ПервоначальнаяСтоимостьБУ", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоНМА.Колонки.Добавить("ПервоначальнаяСтоимостьНУ", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоНМА.Колонки.Добавить("НачислятьАмортизациюБУ", 	Новый ОписаниеТипов("Булево"));
	ТаблицаПоНМА.Колонки.Добавить("НачислятьАмортизациюНУ", 	Новый ОписаниеТипов("Булево"));
	
	ТаблицаПоНМА.Колонки.Добавить("НалоговоеНазначение", 		Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаПоНМА.Колонки.Добавить("НалоговаяГруппаОС", 			Новый ОписаниеТипов("СправочникСсылка.НалоговыеГруппыОсновныхСредств"));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",     ТекОрганизация);
	Запрос.УстановитьПараметр("Период",          ДатаДока);
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоНМА);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
   	|	НематериальныйАктив
	|ПОМЕСТИТЬ НематериальныеАктивы
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НематериальныеАктивы.НематериальныйАктив КАК НематериальныйАктив,
	|	ПервоначальныеСведенияБУ.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимостьБУ,
	|	ПервоначальныеСведенияНУ.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияБУ.НачислятьАмортизацию КАК НачислятьАмортизациюБУ,
	|	ПервоначальныеСведенияНУ.НачислятьАмортизацию КАК НачислятьАмортизациюНУ,
	|	ПервоначальныеСведенияНУ.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ПервоначальныеСведенияНУ.НалоговаяГруппаОС КАК НалоговаяГруппаОС
	|ИЗ
	|	НематериальныеАктивы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&Период, НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ НематериальныеАктивы)) КАК ПервоначальныеСведенияБУ
	|		ПО НематериальныеАктивы.НематериальныйАктив = ПервоначальныеСведенияБУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(&Период, НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ НематериальныеАктивы)) КАК ПервоначальныеСведенияНУ
	|		ПО НематериальныеАктивы.НематериальныйАктив = ПервоначальныеСведенияНУ.НематериальныйАктив
	|";
	
	ТаблицаСведенийНМА  = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из ТаблицаПоНМА Цикл
		
		ТекНМА=  СтрокаТЧ.НематериальныйАктив;
		СтрокаСведений = ТаблицаСведенийНМА.Найти(ТекНМА, "НематериальныйАктив");	
		
		Если СтрокаСведений <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаСведений);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДополнитьТабличнуюЧастьСведениямиОбПервоначальныхСведенияхНМА()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "НМА", Новый Структура("НематериальныйАктив"), Отказ);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

#КонецЕсли